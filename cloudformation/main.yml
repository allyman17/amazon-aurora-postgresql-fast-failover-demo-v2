Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Codebase
        Parameters:
          - CodeDownloadUrl
      - Label:
          default: Accessibility
        Parameters:
          - PublicHostedZoneId
          - PublicFqdn
      - Label:
          default: Database
        Parameters:
          - DatabaseAdminUsername
          - DatabaseAdminPassword
      - Label:
          default: Primary Region
        Parameters:
          - PrimaryRegionName
          - PrimaryVpcCidr
          - PrimaryPublicSubnetZoneACidr
          - PrimaryPublicSubnetZoneBCidr
          - PrimaryPrivateSubnetZoneACidr
          - PrimaryPrivateSubnetZoneBCidr
          - PrimaryDatabaseSubnetZoneACidr
          - PrimaryDatabaseSubnetZoneBCidr
      - Label:
          default: Failover Region
        Parameters:
          - FailoverRegionName
          - FailoverVpcCidr
          - FailoverPublicSubnetZoneACidr
          - FailoverPublicSubnetZoneBCidr
          - FailoverPrivateSubnetZoneACidr
          - FailoverPrivateSubnetZoneBCidr
          - FailoverDatabaseSubnetZoneACidr
          - FailoverDatabaseSubnetZoneBCidr
    ParameterLabels:
      CodeDownloadUrl:
        default: Download URL
      DatabaseAdminPassword:
        default: Admin Password
      DatabaseAdminUsername:
        default: Admin Username
      FailoverDatabaseSubnetZoneACidr:
        default: Failover Region Database Subnet Zone A CIDR
      FailoverDatabaseSubnetZoneBCidr:
        default: Failover Region Database Subnet Zone B CIDR
      FailoverPrivateSubnetZoneACidr:
        default: Failover Region Private Subnet Zone A CIDR
      FailoverPrivateSubnetZoneBCidr:
        default: Failover Region Private Subnet Zone B CIDR
      FailoverPublicSubnetZoneACidr:
        default: Failover Region Public Subnet Zone A CIDR
      FailoverPublicSubnetZoneBCidr:
        default: Failover Region Public Subnet Zone B CIDR
      FailoverRegionName:
        default: Failover Region Name
      FailoverVpcCidr:
        default: Failover Region VPC CIDR
      PrimaryDatabaseSubnetZoneACidr:
        default: Primary Region Database Subnet Zone A CIDR
      PrimaryDatabaseSubnetZoneBCidr:
        default: Primary Region Database Subnet Zone B CIDR
      PrimaryPrivateSubnetZoneACidr:
        default: Primary Region Private Subnet Zone A CIDR
      PrimaryPrivateSubnetZoneBCidr:
        default: Primary Region Private Subnet Zone B CIDR
      PrimaryPublicSubnetZoneACidr:
        default: Primary Region Public Subnet Zone A CIDR
      PrimaryPublicSubnetZoneBCidr:
        default: Primary Region Public Subnet Zone B CIDR
      PrimaryRegionName:
        default: Primary Region Name
      PrimaryVpcCidr:
        default: Primary Region VPC CIDR
      PublicFqdn:
        default: Public Service FQDN
      PublicHostedZoneId:
        default: Public Hosted Zone ID
  Comments: ''
  CreatedBy: Carter Meyers (AWS)
  Description: This application deploys a Global RDS Aurora cluster.
  LastUpdated: September 25, 2024
  Version: v2.11
Outputs:
  CrossRegionFailoverDemoUrl:
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'FinalExportRetriever.CustomCloudFrontDashboardEndpoint'
        - /cross-region-failover.html
        - !Join
          - ''
          - - !Join
              - ''
              - - !Join
                  - ''
                  - - ?apiHost=
                    - !GetAtt 'FinalExportRetriever.CustomApiEndpoint'
                - '&primaryRegion='
                - !Ref 'PrimaryRegionName'
            - '&failoverRegion='
            - !Ref 'FailoverRegionName'
  InRegionFailoverDemoUrl:
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'FinalExportRetriever.CustomCloudFrontDashboardEndpoint'
        - /in-region-failover.html
        - !Join
          - ''
          - - !Join
              - ''
              - - !Join
                  - ''
                  - - ?apiHost=
                    - !GetAtt 'FinalExportRetriever.CustomApiEndpoint'
                - '&primaryRegion='
                - !Ref 'PrimaryRegionName'
            - '&failoverRegion='
            - !Ref 'FailoverRegionName'
Parameters:
  CodeDownloadUrl:
    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
    Type: String
  DatabaseAdminPassword:
    Description: The password to be used for the RDS Aurora admin account.
    NoEcho: true
    Type: String
  DatabaseAdminUsername:
    Description: The username to be used for the RDS Aurora admin account.
    Type: String
  FailoverDatabaseSubnetZoneACidr:
    Default: 10.10.10.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  FailoverDatabaseSubnetZoneBCidr:
    Default: 10.10.13.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  FailoverPrivateSubnetZoneACidr:
    Default: 10.10.9.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  FailoverPrivateSubnetZoneBCidr:
    Default: 10.10.12.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  FailoverPublicSubnetZoneACidr:
    Default: 10.10.8.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  FailoverPublicSubnetZoneBCidr:
    Default: 10.10.11.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  FailoverRegionName:
    Default: us-east-2
    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
    Type: String
  FailoverVpcCidr:
    Default: 10.10.8.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PrimaryDatabaseSubnetZoneACidr:
    Default: 10.10.2.0/24
    Description: The CIDR range you wish to use for your primary database subnet.
    Type: String
  PrimaryDatabaseSubnetZoneBCidr:
    Default: 10.10.5.0/24
    Description: The CIDR range you wish to use for your failover database subnet.
    Type: String
  PrimaryPrivateSubnetZoneACidr:
    Default: 10.10.1.0/24
    Description: The CIDR range you wish to use for your primary private subnet.
    Type: String
  PrimaryPrivateSubnetZoneBCidr:
    Default: 10.10.4.0/24
    Description: The CIDR range you wish to use for your failover private subnet.
    Type: String
  PrimaryPublicSubnetZoneACidr:
    Default: 10.10.0.0/24
    Description: The CIDR range you wish to use for your primary public subnet.
    Type: String
  PrimaryPublicSubnetZoneBCidr:
    Default: 10.10.3.0/24
    Description: The CIDR range you wish to use for your failover public subnet.
    Type: String
  PrimaryRegionName:
    Default: us-east-1
    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
    Type: String
  PrimaryVpcCidr:
    Default: 10.10.0.0/21
    Description: The CIDR range you wish to use for your VPC.
    Type: String
  PublicFqdn:
    Description: >-
      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
      record currently defined in the corresponding Route 53 Hosted Zone.
    Type: String
  PublicHostedZoneId:
    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
    Type: String
Resources:
  APIDeploymentStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
      - APIMethods1StackSet
      - APIMethods2StackSet
      - APIMethods3StackSet
      - APIMethods4StackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - API-Deployment
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - API-Deployment
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          ApiHostExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -ApiHost
            Value: !Join
              - ''
              - - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /ApiId}}
                - .execute-api.
                - !Ref 'AWS::Region'
                - .amazonaws.com/
                - v1
          CustomApiEndpointExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -CustomApiEndpoint
            Value: !Join
              - ''
              - - api.
                - !Ref 'PublicFqdn'
          DefaultApiEndpointExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -DefaultApiEndpoint
            Value: !GetAtt 'DomainName.RegionalDomainName'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          BasePathMapping:
            DependsOn:
              - DomainName
              - Deployment
              - DeploymentStage
            Properties:
              DomainName: !Join
                - ''
                - - api.
                  - !Ref 'PublicFqdn'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
              Stage: v1
            Type: AWS::ApiGateway::BasePathMapping
          Deployment:
            Properties:
              Description: Initial Deployment
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Deployment
          DeploymentStage:
            DependsOn:
              - Deployment
            Properties:
              DeploymentId: !Ref 'Deployment'
              MethodSettings:
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: GET
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
                - CachingEnabled: false
                  DataTraceEnabled: true
                  HttpMethod: POST
                  MetricsEnabled: true
                  ResourcePath: /~1
                  ThrottlingBurstLimit: '5000'
                  ThrottlingRateLimit: '10000'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
              StageName: v1
            Type: AWS::ApiGateway::Stage
          DnsRecord:
            DependsOn:
              - DomainName
            Properties:
              HostedZoneId: !Ref 'PublicHostedZoneId'
              RecordSets:
                - AliasTarget:
                    DNSName: !GetAtt 'DomainName.RegionalDomainName'
                    HostedZoneId: !GetAtt 'DomainName.RegionalHostedZoneId'
                  Name: !Join
                    - ''
                    - - api.
                      - !Ref 'PublicFqdn'
                  Type: A
            Type: AWS::Route53::RecordSetGroup
          DomainName:
            DependsOn:
              - TlsCertificate
            Properties:
              DomainName: !Join
                - ''
                - - api.
                  - !Ref 'PublicFqdn'
              EndpointConfiguration:
                Types:
                  - REGIONAL
              RegionalCertificateArn: !Ref 'TlsCertificate'
            Type: AWS::ApiGateway::DomainName
          TlsCertificate:
            Properties:
              DomainName: !Join
                - ''
                - - api.
                  - !Ref 'PublicFqdn'
              DomainValidationOptions:
                - DomainName: !Join
                    - ''
                    - - api.
                      - !Ref 'PublicFqdn'
                  HostedZoneId: !Ref 'PublicHostedZoneId'
              ValidationMethod: DNS
            Type: AWS::CertificateManager::Certificate
    Type: AWS::CloudFormation::StackSet
  APIGatewayStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - API-Gateway
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - API-Gateway
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          ApiId:
            Condition: ''
            Value: !Ref 'Api'
          ApiRootResourceId:
            Condition: ''
            Value: !GetAtt 'Api.RootResourceId'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          Api:
            Properties:
              Description: !Join
                - ''
                - - !If
                    - IsPrimaryRegion
                    - Primary
                    - Failover
                  - ' Dashboard API'
              EndpointConfiguration:
                Types:
                  - REGIONAL
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
            Type: AWS::ApiGateway::RestApi
          ApiIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - ApiId
              Tier: Standard
              Type: String
              Value: !Ref 'Api'
            Type: AWS::SSM::Parameter
          ApiRootResourceIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'API Gateway Root Resource ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - ApiRootResourceId
              Tier: Standard
              Type: String
              Value: !GetAtt 'Api.RootResourceId'
            Type: AWS::SSM::Parameter
          DEFAULT4XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_4XX
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::GatewayResponse
          DEFAULT5XXGatewayResponse:
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              ResponseType: DEFAULT_5XX
              RestApiId: !Ref 'Api'
            Type: AWS::ApiGateway::GatewayResponse
    Type: AWS::CloudFormation::StackSet
  APIMethods1StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - API-Methods-1
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - API-Methods-1
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          GetClusterInfo:
            DependsOn:
              - GetClusterInfoRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import os\nimport json\nimport boto3\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    data = {}\n    rds_client = boto3.client('rds')\n\n    cluster_resp\
                  \ = rds_client.describe_db_clusters(\n        DBClusterIdentifier = os.environ['REGIONAL_APP_DB_CLUSTER_IDENTIFIER']\n    )\n        \n    for member in cluster_resp['DBClusters'][0]['DBClusterMembers']:\n\
                  \        \n        instance_resp = rds_client.describe_db_instances(\n            DBInstanceIdentifier = member['DBInstanceIdentifier']\n        )\n        \n        data[member['DBInstanceIdentifier']]\
                  \ = {\n            'az': instance_resp['DBInstances'][0]['AvailabilityZone'],\n            'type': 'WRITER' if member['IsClusterWriter'] is True else 'READER'\n        }\n        \n    return\
                  \ {\n        'code': 200,\n        'body': json.dumps(data)\n    }"
              Description: Retrieves DB cluster info
              Environment:
                Variables:
                  REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterIdentifier}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'GetClusterInfoRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetClusterInfoLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetClusterInfo
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetClusterInfo'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetClusterInfoMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetClusterInfo.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getClusterInfo
              ResourceId: !Ref 'GetClusterInfoResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetClusterInfoMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetClusterInfo
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetClusterInfo.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - get-cluster-info
            Type: AWS::Lambda::Permission
          GetClusterInfoResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-cluster-info
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          GetClusterInfoResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetClusterInfoResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetClusterInfoRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DescribeDBClusters
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbClusterArn}}
                        Sid: DescribeRDSClusters
                  PolicyName: get-db-clusters
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DescribeDBInstances
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:rds:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :db*
                        Sid: DescribeDBInstances
                  PolicyName: get-db-instances
            Type: AWS::IAM::Role
          GetFailoverEvents:
            DependsOn:
              - GetFailoverEventsRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\nimport multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n        \ndef handler(event, context):\n\
                  \    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n\
                  \        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n\
                  \        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        SELECT \n            event,\n            to_char(insertedon,'HH24:MI:SS')\
                  \ AS time, \n            insertedon \n        FROM failoverevents\n        ORDER BY insertedon\n    ''');\n    \n    failover_events = curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n\
                  \    \n    records_to_return = []\n    \n    for x in failover_events:\n    \n        c = 0\n        temp2 = {}\n        \n        for col in curs.description:\n            \n            temp2.update({str(col[0]):\
                  \ x[c]})\n            c += 1\n        \n        records_to_return.append(temp2)\n    \n    return {\n        'code': 200,\n        'body': json.dumps(records_to_return, default = str)\n    }"
              Description: Retrieves failover events from the database
              Environment:
                Variables:
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'GetFailoverEventsRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetFailoverEventsLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetFailoverEvents
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetFailoverEvents'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetFailoverEventsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetFailoverEvents.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getFailoverEvents
              ResourceId: !Ref 'GetFailoverEventsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetFailoverEventsMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetFailoverEvents
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetFailoverEvents.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - get-failover-events
            Type: AWS::Lambda::Permission
          GetFailoverEventsResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-failover-events
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          GetFailoverEventsResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetFailoverEventsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetFailoverEventsRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          UpdateDatabaseNacl:
            Condition: IsPrimaryRegion
            DependsOn:
              - UpdateDatabaseNaclRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\
                  \    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n  \
                  \      port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database\
                  \ = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n\n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event, insertedon) values (1,'\" + datetime.datetime.now(tz\
                  \ = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n    \n    try:\n        \n        boto3.client('ec2').replace_network_acl_entry(\n\
                  \            Egress = False, \n            CidrBlock = '0.0.0.0/0',\n            NetworkAclId = os.environ['REGIONAL_APP_DB_NACL_ID'],\n            Protocol = '-1',\n            RuleAction = 'deny',\n\
                  \            RuleNumber = 100\n        )\n        \n    except boto3_client_error as e:\n        raise Exception('Failed to Update Database NACL')\n    \n    return {\n        'code': 200,\n \
                  \       'body': json.dumps([])\n    }"
              Description: Updates the database NACL to deny incoming traffic
              Environment:
                Variables:
                  REGIONAL_APP_DB_NACL_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDatabaseNaclId}}
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'UpdateDatabaseNaclRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          UpdateDatabaseNaclLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - UpdateDatabaseNacl
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'UpdateDatabaseNacl'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          UpdateDatabaseNaclMethod:
            Condition: IsPrimaryRegion
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'UpdateDatabaseNacl.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getFailoverEvents
              ResourceId: !Ref 'UpdateDatabaseNaclResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          UpdateDatabaseNaclMethodInvocationPermission:
            Condition: IsPrimaryRegion
            DependsOn:
              - UpdateDatabaseNacl
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'UpdateDatabaseNacl.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - update-database-nacl
            Type: AWS::Lambda::Permission
          UpdateDatabaseNaclResource:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: update-database-nacl
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          UpdateDatabaseNaclResourceOptionsMethod:
            Condition: IsPrimaryRegion
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'UpdateDatabaseNaclResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          UpdateDatabaseNaclRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          UpdateDatabaseNaclRoleCustomPolicy:
            Condition: IsPrimaryRegion
            DependsOn:
              - UpdateDatabaseNaclRole
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - ec2:ReplaceNetworkAclEntry
                    Effect: Allow
                    Resource:
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - :network-acl/
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDatabaseNaclId}}
                    Sid: UpdateACLEntry
              PolicyName: custom-policy
              Roles:
                - !Ref 'UpdateDatabaseNaclRole'
            Type: AWS::IAM::Policy
    Type: AWS::CloudFormation::StackSet
  APIMethods2StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - API-Methods-2
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - API-Methods-2
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          BypassRdsProxy:
            DependsOn:
              - BypassRdsProxyRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n\
                  \    \n    print(json.dumps(event))\n    \n    '''\n        For each global database endpoint, we'll update it to point to the\n        regional writer endpoint.\n    '''\n    for endpoint_type\
                  \ in ['READER', 'WRITER']:\n        \n        custom_functions.update_dns_record(\n            fqdn            = os.environ['REGIONAL_APP_DB_' + endpoint_type + '_ENDPOINT'],\n            new_value\
                  \       = os.environ['REGIONAL_APP_DB_CLUSTER_' + endpoint_type + '_ENDPOINT'],\n            hosted_zone_id  = os.environ['PRIVATE_HOSTED_ZONE_ID'],\n        )\n        \n    return {\n      \
                  \  'code': 200,\n        'records': json.dumps([])\n    }"
              Description: Updates the global database endpoints to bypass the RDS proxy
              Environment:
                Variables:
                  REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterReaderEndpoint}}
                  REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterWriterEndpoint}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'BypassRdsProxyRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          BypassRdsProxyLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - BypassRdsProxy
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'BypassRdsProxy'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          BypassRdsProxyMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'BypassRdsProxy.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getBypassRdsProxy
              ResourceId: !Ref 'BypassRdsProxyResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          BypassRdsProxyMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - BypassRdsProxy
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'BypassRdsProxy.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - bypass-rds-proxy
            Type: AWS::Lambda::Permission
          BypassRdsProxyResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: bypass-rds-proxy
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          BypassRdsProxyResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'BypassRdsProxyResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          BypassRdsProxyRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          CalculateRecoveryTime:
            DependsOn:
              - CalculateRecoveryTimeRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\nimport multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n\
                  \    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n\
                  \        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n\
                  \        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n    \n    curs.execute('''\n        SELECT\n            DATE_PART('second', max(insertedon)::time\
                  \ - min(insertedon)::time) AS rto\n        FROM dataclient \n        WHERE http_code = 500 \n        GROUP BY http_code\n    ''');\n    \n    client_events = curs.fetchall()\n    \n    curs.close()\n\
                  \    db_conn.close()\n    \n    records_to_return = []\n    \n    for client_event in client_events:\n    \n        c = 0\n        temp2 = {}\n        \n        for col in curs.description:\n\
                  \            \n            temp2.update({str(col[0]): client_event[c]})\n            c += 1\n        \n        records_to_return.append(temp2)\n    \n    return {\n        'code': 200,\n     \
                  \   'body': json.dumps(records_to_return, default = str),\n    }"
              Description: Retrieves the resolved RTO
              Environment:
                Variables:
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'CalculateRecoveryTimeRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          CalculateRecoveryTimeLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - CalculateRecoveryTime
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'CalculateRecoveryTime'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          CalculateRecoveryTimeMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'CalculateRecoveryTime.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getRecoveryTime
              ResourceId: !Ref 'CalculateRecoveryTimeResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          CalculateRecoveryTimeMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - CalculateRecoveryTime
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'CalculateRecoveryTime.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - calculate-recovery-time
            Type: AWS::Lambda::Permission
          CalculateRecoveryTimeResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: calculate-recovery-time
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          CalculateRecoveryTimeResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'CalculateRecoveryTimeResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          CalculateRecoveryTimeRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          InitiateFailover:
            DependsOn:
              - InitiateFailoverRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef trigger_failover():\n    \n    try:\n        \n        boto3.client('rds').failover_db_cluster(\n \
                  \           DBClusterIdentifier = os.environ['REGIONAL_APP_DB_CLUSTER_IDENTIFIER']\n        )\n        \n    except boto3_client_error as e:\n        raise Exception('Failed to Initiate Cluster\
                  \ Failover: ' + str(e))\n        \ndef log_failover_event():\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n    \n\
                  \    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n\n    curs = db_conn.cursor()\n\
                  \    curs.execute(\"INSERT INTO failoverevents (event, insertedon) values (1,'\" + datetime.datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n    \n\
                  \    curs.close()\n    db_conn.close()\n    \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    trigger_failover()\n\n    log_failover_event()\n    \n    return {\n \
                  \       'code': 200,\n        'body': []\n    }"
              Description: Logs failover events
              Environment:
                Variables:
                  REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterIdentifier}}
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'InitiateFailoverRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          InitiateFailoverLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - InitiateFailover
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'InitiateFailover'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          InitiateFailoverMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'InitiateFailover.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getInitiateFailover
              ResourceId: !Ref 'InitiateFailoverResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          InitiateFailoverMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - InitiateFailover
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'InitiateFailover.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - initiate-failover
            Type: AWS::Lambda::Permission
          InitiateFailoverResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: initiate-failover
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          InitiateFailoverResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'InitiateFailoverResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          InitiateFailoverRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:FailoverDBCluster
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbClusterArn}}
                        Sid: InitiateClusterFailover
                  PolicyName: initiate-cluster-failover
            Type: AWS::IAM::Role
    Type: AWS::CloudFormation::StackSet
  APIMethods3StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - API-Methods-3
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - API-Methods-3
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          GetClientErrors:
            DependsOn:
              - GetClientErrorsRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\nimport multi_region_db\n\ncustom_functions = multi_region_db.Functions()\n        \ndef handler(event, context):\n\
                  \    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n\
                  \        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n\
                  \        connect_timeout = 3,\n        sslmode = 'require',\n    )\n        \n    curs = db_conn.cursor()\n    curs.execute('''\n        SELECT\n            insertedon,\n            sum(CASE WHEN\
                  \ http_code = 200 THEN 0 ELSE 1 END)\n        FROM dataclient\n        WHERE http_code != 0\n        GROUP BY insertedon\n        ORDER BY insertedon DESC\n        LIMIT 15\n    ''');\n    client_errors\
                  \ = curs.fetchall()\n    \n    curs.close()\n    db_conn.close()\n    \n    data_json = \"\"\n    label_json = \"\"\n    \n    data_arr = []\n    label_arr = []\n    \n    #for i in reversed(range(1,len(client_errors))):\n\
                  \    #    label_arr.append(str(client_errors[i][0]))\n    #    data_arr.append(str(client_errors[i][1]))\n    \n    for r in reversed(client_errors):\n        \n        label_arr.append(str(r[0]))\n\
                  \        data_arr.append(str(r[1]))\n        \n    if len(label_arr) > 0:\n        \n        for n in range(len(label_arr) + 1, 16):\n            \n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\n\
                  \            data_arr.insert(0, '0')\n        \n        custom_functions.add_time(label_arr,data_arr)\n    \n    i =- 1\n    for r in label_arr:\n        i = i + 1\n        if label_json!=\"\"\
                  :\n            label_json+=\",\"\n        if data_json!=\"\":\n            data_json+=\",\"\n            \n        data_json += data_arr[i]\n        label_json += label_arr[i]\n    \n    return\
                  \ {\n        'code': 200,\n        'body': json.dumps([{\n            'data': data_json,\n            'labels': label_json, \n        }])\n    }"
              Description: Retrieves client errors from the database
              Environment:
                Variables:
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'GetClientErrorsRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetClientErrorsLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetClientErrors
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetClientErrors'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetClientErrorsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetClientErrors.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getClientErrors
              ResourceId: !Ref 'GetClientErrorsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetClientErrorsMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetClientErrors
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetClientErrors.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - get-client-errors
            Type: AWS::Lambda::Permission
          GetClientErrorsResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-client-errors
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          GetClientErrorsResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetClientErrorsResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetClientErrorsRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          GetClientTraffic:
            DependsOn:
              - GetClientTrafficRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport psycopg2\t\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\t\nfrom datetime import timedelta\n\
                  \ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \    \n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n    \n    if event['queryParams']['region']\
                  \ not in ['primary', 'failover']:\n        raise Exception('Invalid Region Specified')\n        \n    curs = db_conn.cursor()\t\n    \n    curs.execute('''\n        SELECT\n            insertedon,\n\
                  \            sum(CASE WHEN http_code = 200 AND {}_region = 1 THEN 1 ELSE 0 END)\n        FROM dataclient\n        WHERE http_code != 0\n        GROUP BY insertedon\n        ORDER BY insertedon\n\
                  \        DESC limit 15\n    '''.format(event['queryParams']['region']))\n    \n    traffic_records = curs.fetchall()\n    \n    curs.close()\t\n    db_conn.close()\n    \n    data_json = \"\"\n\
                  \    label_json = \"\"\n    \t\n    data_arr = []\t\n    label_arr = []\t\n    \n    if event['queryParams']['region'] == 'primary':\n        \n        for i in reversed(range(1, len(traffic_records))):\t\
                  \n            \n            data_arr.append(str(traffic_records[i][1]))\t\n            label_arr.append(str(traffic_records[i][0]))\n            \n    elif event['queryParams']['region'] == 'failover':\n\
                  \    \t\n        for i in reversed(traffic_records):\n            \n            data_arr.append(str(i[1]))\n            label_arr.append(str(i[0]))\n        \t\n    if len(label_arr) > 0:\n  \
                  \      \n        for n in range(len(label_arr) + 1, 16):\t\n            \n            data_arr.insert(0, '0')\n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\t\
                  \n        \t\n        custom_functions.add_time(label_arr,data_arr)\t\n    \t\n    i =- 1\t\n    for r in label_arr:\t\n        i = i + 1\t\n        if label_json != \"\":\t\n            label_json\
                  \ += \",\"\t\n        if data_json != \"\":\t\n            data_json += \",\"\t\n            \t\n        data_json += data_arr[i]\t\n        label_json += label_arr[i]\t\n    \t\n    return {\n\
                  \        'code': 200,\n        'body': json.dumps([{\n            'data': data_json,\n            'labels': label_json,\n        }])\n    }\t"
              Description: Retrieves client traffic logs from the database
              Environment:
                Variables:
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'GetClientTrafficRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GetClientTrafficLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GetClientTraffic
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GetClientTraffic'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GetClientTrafficMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GetClientTraffic.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getClientTraffic
              ResourceId: !Ref 'GetClientTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetClientTrafficMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GetClientTraffic
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GetClientTraffic.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - get-client-traffic
            Type: AWS::Lambda::Permission
          GetClientTrafficResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: get-client-traffic
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          GetClientTrafficResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GetClientTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GetClientTrafficRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          ResetDemoEnvironment:
            Condition: IsPrimaryRegion
            DependsOn:
              - ResetDemoEnvironmentRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\nfrom botocore.exceptions\
                  \ import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\nevent_bridge_client = ec2_client = boto3.client('events', \n    region_name = os.environ['FAILOVER_REGION_NAME']\n\
                  )\n\ndef point_service_fqdn_to_primary_web_alb():\n    \n    r53_client = boto3.client('route53')\n        \n    try:\n        \n        r53_client.change_resource_record_sets(\n            ChangeBatch\
                  \ = {\n                'Changes': [\n                    {\n                        'Action': 'UPSERT',\n                        'ResourceRecordSet': {\n                            'Name': os.environ['PUBLIC_FQDN'],\n\
                  \                            'AliasTarget': {\n                                'DNSName': os.environ['REGIONAL_WEB_ALB_FQDN'],\n                                'HostedZoneId': os.environ['REGIONAL_WEB_ALB_HOSTED_ZONE_ID'],\n\
                  \                                'EvaluateTargetHealth': False\n                            },\n                            'Type': 'A'\n                        },\n                    },\n  \
                  \              ],\n            },\n            HostedZoneId = os.environ['PUBLIC_HOSTED_ZONE_ID'],\n        )\n        \n    except boto3_client_error as e:\n        raise Exception('Failed to\
                  \ Update DNS Record: ' + str(e))\n    \n    return True\n\ndef allow_traffic_to_primary_db_cluster():\n    \n    ec2_client = boto3.client('ec2')\n    \n    try:\n        \n        ec2_client.replace_network_acl_entry(\n\
                  \            Egress = False, \n            Protocol = '-1',\n            CidrBlock = '0.0.0.0/0',\n            RuleAction = 'allow',\n            RuleNumber = 100,\n            NetworkAclId =\
                  \ os.environ['REGIONAL_APP_DB_NACL_ID'],\n        )\n        \n    except boto3_client_error as e:\n        raise Exception('Failed to Reset NACL: ' + str(e))\n\ndef prune_db_tables(db_identifier,\
                  \ table_names):\n    \n    db_credentials = custom_functions.get_db_credentials(db_identifier)\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_' + db_identifier.upper()\
                  \ + '_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = db_credentials['port'],\n        user = db_credentials['username'],\n        sslmode = 'require',\n        password = db_credentials['password'],\n\
                  \        database = db_credentials['database'],\n        connect_timeout = 3,\n    )\n    \n    for table_to_prune in table_names:\n        \n        curs = db_conn.cursor()\n        curs.execute('DELETE\
                  \ FROM ' + table_to_prune)\n        db_conn.commit()\n        \n    curs.close()\n    db_conn.close()\n    \n    return True\n\n'''\n    It is expected that this function will be run in the PRIMARY\
                  \ AWS region\n'''\ndef handler(event, context):\n    \n    allow_traffic_to_primary_db_cluster()\n    \n    prune_db_tables('App', ['dataserver'])\n    prune_db_tables('Demo', ['dataclient', 'failoverevents'])\n\
                  \    \n    point_service_fqdn_to_primary_web_alb()\n    \n    return {\n        'code': 200,\n        'body': json.dumps([])\n    }"
              Description: Resets the demo environment
              Environment:
                Variables:
                  DATABASE_CANARY_CRON_NAME: !Join
                    - ''
                    - - !Ref 'MainStackName'
                      - -database-canary
                  FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'
                  PUBLIC_FQDN: !Ref 'PublicFqdn'
                  PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneId'
                  REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterReaderEndpoint}}
                  REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterWriterEndpoint}}
                  REGIONAL_APP_DB_NACL_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDatabaseNaclId}}
                  REGIONAL_APP_DB_PROXY_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RegionalAppDbProxyReaderEndpoint}}
                  REGIONAL_APP_DB_PROXY_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RegionalAppDbProxyWriterEndpoint}}
                  REGIONAL_APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbAdminSecretArn}}
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
                  REGIONAL_WEB_ALB_FQDN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /WebLoadBalancerFqdn}}
                  REGIONAL_WEB_ALB_HOSTED_ZONE_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /WebLoadBalancerHostedZoneId}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          ResetDemoEnvironmentLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - ResetDemoEnvironment
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'ResetDemoEnvironment'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          ResetDemoEnvironmentMethod:
            Condition: IsPrimaryRegion
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'ResetDemoEnvironment.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getResetDemoEnvironment
              ResourceId: !Ref 'ResetDemoEnvironmentResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          ResetDemoEnvironmentMethodInvocationPermission:
            Condition: IsPrimaryRegion
            DependsOn:
              - ResetDemoEnvironment
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - reset-demo-environment
            Type: AWS::Lambda::Permission
          ResetDemoEnvironmentResource:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: reset-demo-environment
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          ResetDemoEnvironmentResourceOptionsMethod:
            Condition: IsPrimaryRegion
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'ResetDemoEnvironmentResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          ResetDemoEnvironmentRole:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
                - PolicyDocument:
                    Statement:
                      - Action:
                          - ec2:ReplaceNetworkAclEntry
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:ec2:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :network-acl/
                              - !Join
                                - ''
                                - - '{{resolve:ssm:/'
                                  - !Ref 'MainStackName'
                                  - /RegionalAppDatabaseNaclId}}
                        Sid: UpdateACLEntry
                      - Action:
                          - events:EnableRule
                          - events:DisableRule
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:events:'
                              - !Ref 'FailoverRegionName'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :rule/
                              - !Join
                                - ''
                                - - !Ref 'MainStackName'
                                  - -database-canary
                          - !Join
                            - ''
                            - - 'arn:aws:events:'
                              - !Ref 'FailoverRegionName'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :rule/
                              - !Join
                                - ''
                                - - !Ref 'MainStackName'
                                  - -database-proxy-monitor
                        Sid: ManageCrons
                      - Action:
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PublicHostedZoneId'
                        Sid: UpdateR53HostedZone
                  PolicyName: custom-policy
            Type: AWS::IAM::Role
    Type: AWS::CloudFormation::StackSet
  APIMethods4StackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
      - APIGatewayStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - API-Methods-4
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - API-Methods-4
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          ClientEmulator:
            DependsOn:
              - ClientEmulatorRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport uuid\nimport psycopg2\nimport datetime\nimport dateutil.tz\nimport urllib.request\nimport multi_region_db\nfrom botocore.vendored\
                  \ import requests\n\ncustom_functions = multi_region_db.Functions()\n        \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    guid = uuid.uuid4()\n    \n    eastern\
                  \ = dateutil.tz.gettz('US/Eastern')\n\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n\
                  \        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n\
                  \        connect_timeout = 3,\n        sslmode = 'require',\n    )\n\n    curs = db_conn.cursor()\n    \n    curs.execute(\"INSERT INTO dataclient (guid, primary_region, failover_region, http_code,\
                  \ insertedon) VALUES ('{}', 0, 0, 0, '{}');\".format(\n        str(guid),\n        datetime.datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\")\n    ))\n    \n    db_conn.commit()\n   \
                  \ \n    http_code = 200\n    http_content = ''\n\n    print('END guid: ' + str(guid))\n\n    try:\n        \n        res = urllib.request.urlopen(\n            urllib.request.Request(\n      \
                  \          url = 'https://' + os.environ['PUBLIC_FQDN'] + '?guid=' + str(guid),\n                method = 'GET',\n            ),\n            timeout = 5\n        )\n        \n        http_code\
                  \ = res.status\n        http_content = res.read().decode()\n        \n    except Exception as e:\n        http_code = 500\n        print('Client Web Request Failed :' + str(e))\n\n    try: \n\n\
                  \        if http_code > 200:\n            http_content = ''\n            \n        curs = db_conn.cursor()\n        \n        curs.execute('''\n            UPDATE dataclient SET\n            \
                  \    primary_region  = {},\n                failover_region = {},\n                http_code       = {}\n            WHERE guid = '{}'\n        '''.format(\n            1 if http_content == os.environ['PRIMARY_REGION_NAME']\
                  \ else 0,\n            1 if http_content == os.environ['FAILOVER_REGION_NAME'] else 0,\n            http_code,\n            str(guid)\n        ))\n        \n        db_conn.commit()\n        \n\
                  \    except Exception as ex:\n        http_code = 500\n        print('Failed to Update Client Request: ' + str(ex) + ' - HTTP Content: \"' + http_content + '\"')\n    \n    curs.close()\n    db_conn.close()\n\
                  \    \n    return True"
              Description: Emulates legitimate client traffic
              Environment:
                Variables:
                  FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'
                  PRIMARY_REGION_NAME: !Ref 'PrimaryRegionName'
                  PUBLIC_FQDN: !Ref 'PublicFqdn'
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'ClientEmulatorRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          ClientEmulatorLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - ClientEmulator
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'ClientEmulator'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          ClientEmulatorRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          ClientEmulatorTopicSubscription:
            DependsOn:
              - ClientEmulator
              - TestTrafficTopic
              - TestTrafficTopicPermission
            Properties:
              Endpoint: !GetAtt 'ClientEmulator.Arn'
              Protocol: lambda
              TopicArn: !Ref 'TestTrafficTopic'
            Type: AWS::SNS::Subscription
          GenerateSampleTraffic:
            DependsOn:
              - GenerateSampleTrafficRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import os\nimport time\nimport json\nimport boto3\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n\n    sns_client = boto3.client('sns')\n    \n    for i in range(0,\
                  \ 10000):\n        \n        sns_client.publish(\n            Message = 'Hola',\n            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\n        )\n        \n        time.sleep(0.1)\n \
                  \   \n    return {\n        'code': 200,\n        'body': json.dumps([])\n    }\n"
              Description: Generates test client traffic
              Environment:
                Variables:
                  TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'GenerateSampleTrafficRole.Arn'
              Runtime: python3.11
              Timeout: 900
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          GenerateSampleTrafficLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - GenerateSampleTraffic
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'GenerateSampleTraffic'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          GenerateSampleTrafficMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: GET
              Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.body')
                    StatusCode: '200'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":400.*
                    StatusCode: '400'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":401.*
                    StatusCode: '401'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":403.*
                    StatusCode: '403'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":404.*
                    StatusCode: '404'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":415.*
                    StatusCode: '415'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":429.*
                    StatusCode: '429'
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: $input.path('$.errorMessage')
                    SelectionPattern: .*"code":500.*
                    StatusCode: '500'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: "#set($params = $input.params())\n{\n\"queryParams\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \"$paramName\" : \"$util.escapeJavaScript($paramSet.get($paramName))\"\
                    \ #if($foreach.hasNext),#end #end }\n}"
                Type: AWS
                Uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path/2015-03-31/functions/
                    - !GetAtt 'GenerateSampleTraffic.Arn'
                    - /invocations
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '400'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '401'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '403'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '404'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '415'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '429'
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '500'
              OperationName: getTrafficGenerator
              ResourceId: !Ref 'GenerateSampleTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GenerateSampleTrafficMethodInvocationPermission:
            Condition: ''
            DependsOn:
              - GenerateSampleTraffic
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !GetAtt 'GenerateSampleTraffic.Arn'
              Principal: apigateway.amazonaws.com
              SourceArn: !Join
                - ''
                - - 'arn:aws:execute-api:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /ApiId}}
                  - /*/
                  - GET
                  - /
                  - generate-sample-traffic
            Type: AWS::Lambda::Permission
          GenerateSampleTrafficResource:
            Condition: ''
            DependsOn: []
            Properties:
              ParentId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiRootResourceId}}
              PathPart: generate-sample-traffic
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Resource
          GenerateSampleTrafficResourceOptionsMethod:
            Condition: ''
            Properties:
              ApiKeyRequired: false
              AuthorizationType: NONE
              HttpMethod: OPTIONS
              Integration:
                IntegrationResponses:
                  - ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    ResponseTemplates:
                      application/json: '{}'
                    StatusCode: '200'
                PassthroughBehavior: WHEN_NO_TEMPLATES
                RequestTemplates:
                  application/json: '{"statusCode": 200}'
                Type: MOCK
              MethodResponses:
                - ResponseModels:
                    application/json: Empty
                  ResponseParameters:
                    method.response.header.Access-Control-Allow-Headers: true
                    method.response.header.Access-Control-Allow-Methods: true
                    method.response.header.Access-Control-Allow-Origin: true
                  StatusCode: '200'
              ResourceId: !Ref 'GenerateSampleTrafficResource'
              RestApiId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /ApiId}}
            Type: AWS::ApiGateway::Method
          GenerateSampleTrafficRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies: []
            Type: AWS::IAM::Role
          GenerateSampleTrafficRoleGenerateTestTraffic:
            DependsOn:
              - GenerateSampleTrafficRole
              - TestTrafficTopic
            Properties:
              PolicyDocument:
                Statement:
                  - Action:
                      - sns:Publish
                    Effect: Allow
                    Resource:
                      - !Ref 'TestTrafficTopic'
                    Sid: SendMessagesToSNS
              PolicyName: generate-test-traffic
              Roles:
                - !Ref 'GenerateSampleTrafficRole'
            Type: AWS::IAM::Policy
          TestTrafficTopic:
            Type: AWS::SNS::Topic
          TestTrafficTopicPermission:
            DependsOn:
              - ClientEmulator
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'ClientEmulator'
              Principal: sns.amazonaws.com
              SourceAccount: !Ref 'AWS::AccountId'
              SourceArn: !Ref 'TestTrafficTopic'
            Type: AWS::Lambda::Permission
    Type: AWS::CloudFormation::StackSet
  CfnExportRetriever:
    DependsOn:
      - CfnExportRetrieverRole
    Properties:
      Architectures:
        - x86_64
      Code:
        ZipFile: "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\nsys.path.insert(1,\
          \ '/tmp/')\n\nimport io\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Region | str\n    - ExportPrefix\
          \ | str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::',\
          \ '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n    \n    cfn_client = boto3Session.client('cloudformation')\n \
          \   \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        try:\n            \n            response = cfn_client.list_exports()\n            \n            '''\n            \
          \    For each CloudFormation export in this region\n            '''\n            for export in response['Exports']:\n            \t\n                '''\n                    If this export has\
          \ the proper prefix\n                '''\n                if export['Name'].startswith(arguments['ExportPrefix']):\n                    \n                    response_data[export['Name'].replace(arguments['ExportPrefix']\
          \ + '-', '')] = export['Value']\n                \n        except ClientError as e:\n            \n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\n            return cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
      Description: ''
      Handler: index.handler
      Layers: []
      MemorySize: 128
      Role: !GetAtt 'CfnExportRetrieverRole.Arn'
      Runtime: python3.11
      Timeout: 15
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  CfnExportRetrieverLogGroup:
    DeletionPolicy: Delete
    DependsOn:
      - CfnExportRetriever
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'CfnExportRetriever'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  CfnExportRetrieverRole:
    DependsOn: []
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudformation:ListExports
                Effect: Allow
                Resource:
                  - '*'
                Sid: GetCFNOutputs
          PolicyName: main-policy
    Type: AWS::IAM::Role
  CustomResourcesStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - NetworkingStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Custom-Resources
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Custom-Resources
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          RegionalCfnExportRetrieverArn:
            Condition: ''
            Value: !GetAtt 'CfnExportRetriever.Arn'
          RegionalDnsRecordDeleterArn:
            Condition: ''
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'DnsRecordDeleter.Arn'
              - '-'
          RegionalLambdaLayerVersionArn:
            Condition: ''
            Value: !Ref 'LambdaLayerCreatorResource'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          CfnExportRetriever:
            DependsOn:
              - CfnExportRetrieverRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\nsys.path.insert(1,\
                  \ '/tmp/')\n\nimport io\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Region | str\n    - ExportPrefix\
                  \ | str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::',\
                  \ '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n    \n    cfn_client = boto3Session.client('cloudformation')\n \
                  \   \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        try:\n            \n            response = cfn_client.list_exports()\n            \n            '''\n            \
                  \    For each CloudFormation export in this region\n            '''\n            for export in response['Exports']:\n            \t\n                '''\n                    If this export has\
                  \ the proper prefix\n                '''\n                if export['Name'].startswith(arguments['ExportPrefix']):\n                    \n                    response_data[export['Name'].replace(arguments['ExportPrefix']\
                  \ + '-', '')] = export['Value']\n                \n        except ClientError as e:\n            \n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\n            return cfnresponse.send(event,\
                  \ context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              Description: ''
              Handler: index.handler
              Layers: []
              MemorySize: 128
              Role: !GetAtt 'CfnExportRetrieverRole.Arn'
              Runtime: python3.11
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          CfnExportRetrieverLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - CfnExportRetriever
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'CfnExportRetriever'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          CfnExportRetrieverRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - cloudformation:ListExports
                        Effect: Allow
                        Resource:
                          - '*'
                        Sid: GetCFNOutputs
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          DnsRecordDeleter:
            Condition: IsPrimaryRegion
            DependsOn:
              - DnsRecordDeleterRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\nsys.path.insert(1,\
                  \ '/tmp/')\n\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Fqdns | list \n    - HostedZoneId | str\n'''\ndef handler(event,\
                  \ context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n\
                  \    \n    response_data = {}\n    \n    route53_client = boto3.client('route53')\n    \n    if event['RequestType'] in ['Delete']:\n        \n        try:\n            \n            record_sets_resp\
                  \ = route53_client.list_resource_record_sets(\n                HostedZoneId = arguments['HostedZoneId'],\n            )\n            \n            change_batch = []\n            \n           \
                  \ for record_set in record_sets_resp['ResourceRecordSets']:\n                \n                print(record_set)\n                \n                '''\n                    We'll be leaving NS\
                  \ and SOA records.\n                '''\n                if record_set['Type'] in ['NS', 'SOA']:\n                    print('Not An Eligible Record Type - Skipping')\n                    continue\n\
                  \                \n                '''\n                    If we've been instructed to delete all FQDNs or this FQDN\n                    \n                    We're going to use for comparison\
                  \ the raw record name from Route53\n                    as well as the name minus the trailing period.\n                '''\n                if '*' in arguments['Fqdns'] or (record_set['Name']\
                  \ in arguments['Fqdns'] or record_set['Name'][0:-1] in arguments['Fqdns']):\n                    \n                    print('Deleting Record')\n                    \n                    change_batch.append({\n\
                  \                        'Action': 'DELETE',\n                        'ResourceRecordSet': record_set,\n                    })\n            \n            if len(change_batch) > 0:\n          \
                  \      \n                route53_client.change_resource_record_sets(\n                    HostedZoneId = arguments['HostedZoneId'],\n                    ChangeBatch = {\n                     \
                  \   'Changes': change_batch\n                    }\n                )\n                \n        except ClientError as e:\n            \n            print('Failed to Delete DNS Records: ' + str(e.response))\n\
                  \            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              Description: Deletes DNS Records on Stack Cleanup
              Handler: index.handler
              Layers: []
              MemorySize: 128
              Role: !GetAtt 'DnsRecordDeleterRole.Arn'
              Runtime: python3.11
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          DnsRecordDeleterLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - DnsRecordDeleter
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DnsRecordDeleter'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DnsRecordDeleterRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - route53:ListResourceRecordSets
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PublicHostedZoneId'
                        Sid: DeleteRoute53Records
                  PolicyName: delete-route53-records
            Type: AWS::IAM::Role
          LambdaLayerCreator:
            DependsOn:
              - LambdaLayerCreatorRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "_A='%H:%M:%S'\nimport sys,subprocess\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\nsys.path.insert(1,'/tmp/')\n\
                  import io,os,json,boto3,shutil,cfnresponse\nfrom zipfile import ZipFile\nfrom botocore.exceptions import ClientError as boto3_client_error\ndef zip_directory(path):\n\tfor(B,F,C)in os.walk(path):\n\
                  \t\tfor D in C:A=os.path.join(B,D);E=A[len(path)+len(os.sep):];yield(A,E)\ndef make_zip_file_bytes(path):\n\tA=io.BytesIO()\n\twith ZipFile(A,'w')as B:\n\t\tfor(C,D)in zip_directory(path=path):B.write(C,D)\n\
                  \treturn A.getvalue()\n'\\n    - Region | str\\n    - Packages | list\\n    - LayerName | str\\n'\ndef handler(event,context):\n\tJ='RequestType';I='ResourceProperties';G='LayerName';C=context;A=event;print(json.dumps(A));B=A[I]['Properties'];N=A[I]['Type'].replace('Custom::','');D={};K=boto3.Session(region_name=B['Region']);E=K.client('lambda')\n\
                  \tif A[J]in['Create','Update']:\n\t\tsubprocess.call(('pip install '+' '.join(B['Packages'])+' -t /tmp/lambda-layer --no-cache-dir').split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL);shutil.copyfile(os.path.realpath(__file__),'/tmp/lambda-layer/multi_region_db.py')\n\
                  \t\ttry:H=E.publish_layer_version(LayerName=B[G],Content={'ZipFile':make_zip_file_bytes('/tmp/lambda-layer')},CompatibleRuntimes=['python3.9','python3.10','python3.11','python3.12'],CompatibleArchitectures=['x86_64','arm64']);return\
                  \ cfnresponse.send(A,C,cfnresponse.SUCCESS,D,H['LayerVersionArn'])\n\t\texcept boto3_client_error as F:print('Failed to Deploy Lambda Layer: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\
                  \tif A[J]in['Delete']:\n\t\ttry:\n\t\t\tL=E.list_layer_versions(LayerName=B[G])\n\t\t\tfor M in L['LayerVersions']:H=E.delete_layer_version(LayerName=B[G],VersionNumber=M['Version'])\n\t\texcept\
                  \ boto3_client_error as F:print('Failed to Delete Layer Versions: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\n\t\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,D)\n\
                  import dateutil.tz\nfrom datetime import datetime\nfrom datetime import timedelta\nclass Functions:\n\tdef __init__(A):''\n\tdef add_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=5)).strftime(_A)\n\
                  \tdef subtract_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=-5)).strftime(_A)\n\tdef add_time(B,label,data):\n\t\tA=label;C=dateutil.tz.gettz('US/Pacific');D=datetime.now(tz=C)\n\
                  \t\twhile datetime.strptime(A[len(A)-1],_A)+timedelta(seconds=9)<datetime.strptime(D.strftime(_A),_A):A.pop(0);data.pop(0);A.append(B.add_five_seconds(A[len(A)-1]));data.append('0')\n\t'\\n  \
                  \      Requires \"REGIONAL_(APP|DEMO)_DB_SECRET_ARN\" as an environment variable\\n        \\n        - db_identifier | str (App|Demo)\\n    '\n\tdef get_db_credentials(E,db_identifier):\n\t\t\
                  A=db_identifier;B=boto3.client('secretsmanager')\n\t\ttry:C=B.get_secret_value(SecretId=os.environ['REGIONAL_'+A.upper()+'_DB_SECRET_ARN'])\n\t\texcept boto3_client_error as D:raise Exception('Failed\
                  \ to Retrieve '+A+' Database Secret: '+str(D))\n\t\telse:return json.loads(C['SecretString'])\n\t'\\n        fqdn | str\\n        newValue | str\\n        hostedZoneId | str\\n        [ ttl |\
                  \ int ]\\n        [ type | str ]\\n    '\n\tdef update_dns_record(C,fqdn,new_value,hosted_zone_id,ttl=1,record_type='CNAME'):\n\t\tA=boto3.client('route53')\n\t\ttry:A.change_resource_record_sets(ChangeBatch={'Changes':[{'Action':'UPSERT','ResourceRecordSet':{'Name':fqdn,'ResourceRecords':[{'Value':new_value}],'TTL':ttl,'Type':record_type}}]},HostedZoneId=hosted_zone_id)\n\
                  \t\texcept boto3_client_error as B:raise Exception('Failed to Update DNS Record: '+str(B))\n\t\treturn True"
              Description: ''
              Handler: index.handler
              Layers: []
              MemorySize: 256
              Role: !GetAtt 'LambdaLayerCreatorRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          LambdaLayerCreatorLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - LambdaLayerCreator
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'LambdaLayerCreator'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          LambdaLayerCreatorResource:
            DependsOn:
              - LambdaLayerCreatorLogGroup
            Properties:
              Properties:
                LayerName: !Ref 'AWS::StackName'
                Packages:
                  - requests
                  - cfnresponse
                  - psycopg2-binary
                Region: !Ref 'AWS::Region'
                Version: 1.0
              ServiceToken: !GetAtt 'LambdaLayerCreator.Arn'
              Type: Custom::DeployLambdaLayer
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          LambdaLayerCreatorRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - lambda:ListLayerVersions
                          - lambda:DeleteLayerVersion
                          - lambda:PublishLayerVersion
                        Effect: Allow
                        Resource:
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - lambda
                              - !Ref 'PrimaryRegionName'
                              - !Ref 'AWS::AccountId'
                              - layer
                              - !Ref 'AWS::StackName'
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - lambda
                              - !Ref 'FailoverRegionName'
                              - !Ref 'AWS::AccountId'
                              - layer
                              - !Ref 'AWS::StackName'
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - lambda
                              - !Ref 'PrimaryRegionName'
                              - !Ref 'AWS::AccountId'
                              - layer
                              - !Ref 'AWS::StackName'
                              - '*'
                          - !Join
                            - ':'
                            - - arn
                              - !Ref 'AWS::Partition'
                              - lambda
                              - !Ref 'FailoverRegionName'
                              - !Ref 'AWS::AccountId'
                              - layer
                              - !Ref 'AWS::StackName'
                              - '*'
                        Sid: CreateAndDeleteLambdaLayers
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          RegionalCfnExportRetrieverArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional CFN Export Retriever Lambda ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalCfnExportRetrieverArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'CfnExportRetriever.Arn'
            Type: AWS::SSM::Parameter
          RegionalDnsRecordDeleterArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional DNS Record Deleter Lambda ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDnsRecordDeleterArn
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'DnsRecordDeleter.Arn'
                - '-'
            Type: AWS::SSM::Parameter
          RegionalLambdaLayerVersionArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional Lambda Layer Version ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalLambdaLayerVersionArn
              Tier: Standard
              Type: String
              Value: !Ref 'LambdaLayerCreatorResource'
            Type: AWS::SSM::Parameter
    Type: AWS::CloudFormation::StackSet
  DashboardStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - NetworkingStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Dashboard
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Dashboard
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          CustomCloudFrontCdnFqdnExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -CustomCloudFrontDashboardEndpoint
            Value: !Join
              - .
              - - dashboard
                - !Ref 'PublicFqdn'
          DefaultCloudFrontCdnFqdnExport:
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -DefaultCloudFrontDashboardEndpoint
            Value: !GetAtt 'CloudFrontDistribution.DomainName'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          Bucket:
            Properties:
              AccessControl: Private
              BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                      SSEAlgorithm: AES256
              PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
              VersioningConfiguration:
                Status: Suspended
            Type: AWS::S3::Bucket
          BucketPolicy:
            DependsOn:
              - Bucket
              - CloudFrontAccessIdentity
            Properties:
              Bucket: !Ref 'Bucket'
              PolicyDocument:
                Statement:
                  - Action:
                      - s3:GetObject
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:'
                          - !Ref 'AWS::Partition'
                          - ':iam::cloudfront:user/CloudFront Origin Access Identity '
                          - !Ref 'CloudFrontAccessIdentity'
                    Resource:
                      - !Join
                        - ''
                        - - !GetAtt 'Bucket.Arn'
                          - /*
            Type: AWS::S3::BucketPolicy
          CloudFrontAccessIdentity:
            Properties:
              CloudFrontOriginAccessIdentityConfig:
                Comment: Dashboard
            Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
          CloudFrontDistribution:
            DependsOn:
              - TlsCertificate
              - ResponseHeadersPolicy
              - CloudFrontAccessIdentity
            Properties:
              DistributionConfig:
                Aliases:
                  - !Join
                    - .
                    - - dashboard
                      - !Ref 'PublicFqdn'
                Comment: !Join
                  - ''
                  - - 'Dashboard Controller for '
                    - !Ref 'MainStackName'
                DefaultCacheBehavior:
                  CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
                  Compress: true
                  ForwardedValues:
                    QueryString: true
                  ResponseHeadersPolicyId: !Ref 'ResponseHeadersPolicy'
                  TargetOriginId: dashboard-bucket
                  ViewerProtocolPolicy: redirect-to-https
                Enabled: true
                HttpVersion: http2
                IPV6Enabled: true
                Origins:
                  - DomainName: !GetAtt 'Bucket.DomainName'
                    Id: dashboard-bucket
                    S3OriginConfig:
                      OriginAccessIdentity: !Join
                        - ''
                        - - origin-access-identity/cloudfront/
                          - !Ref 'CloudFrontAccessIdentity'
                ViewerCertificate:
                  AcmCertificateArn: !Ref 'TlsCertificate'
                  MinimumProtocolVersion: TLSv1.1_2016
                  SslSupportMethod: sni-only
            Type: AWS::CloudFront::Distribution
          DashboardCodeDeployer:
            DependsOn:
              - DashboardCodeDeployerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys,subprocess\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\nsys.path.insert(1,'/tmp/')\nimport\
                  \ os,json,glob,boto3,shutil,urllib3,zipfile,mimetypes,cfnresponse\nfrom collections import defaultdict\nfrom botocore.exceptions import ClientError as boto3_client_error\nhttp=urllib3.PoolManager()\n\
                  try:from urllib2 import HTTPError,build_opener,HTTPHandler,Request\nexcept ImportError:from urllib.error import HTTPError;from urllib.request import build_opener,HTTPHandler,Request\n'\\n    -\
                  \ CodeBucketName | str\\n    - CodeDownloadUrl | str\\n'\ndef handler(event,context):\n\tU='VersionId';T='Key';S='/dashboard/';R=False;Q='RequestType';J='CodeBucketName';D=context;A=event;print(json.dumps(A));C=A['ResourceProperties']['Properties'];E=boto3.client('s3');F={}\n\
                  \tif A[Q]in['Create','Update']:\n\t\tG='/tmp/dashboard_code.zip';K=G.replace('.zip','');'\\n            Download the codebase\\n        ';V=urllib3.PoolManager();L=V.request('GET',C['CodeDownloadUrl'],preload_content=R)\n\
                  \t\tif L.status!=200:return R\n\t\twith L as W,open(G,'wb')as X:shutil.copyfileobj(W,X)\n\t\t'\\n            Unzip the downloaded code\\n        '\n\t\twith zipfile.ZipFile(G,'r')as Y:Y.extractall(K)\n\
                  \t\t'\\n            For each file in the local code directory\\n        '\n\t\tfor B in glob.iglob(K+'**/**',recursive=True):\n\t\t\t\"\\n                If it's one of the dashboard files and\
                  \ it's a file, not a directory, we'll upload it to S3\\n            \"\n\t\t\tif S in B and os.path.isfile(B):\n\t\t\t\ttry:Z=B.split(S)[1];E.upload_file(B,C[J],Z,ExtraArgs={'ContentType':mimetypes.guess_type(B)[0]})\n\
                  \t\t\t\texcept boto3_client_error as H:print('Failed to Upload Dashboard File: '+str(H));return cfnresponse.send(A,D,cfnresponse.FAILED,F)\n\telif A[Q]in['Delete']:\n\t\t\"\\n            Here,\
                  \ we'll delete all objects, versions, and delete markers from the bucket.\\n        \";a=E.get_paginator('list_object_versions');I=[]\n\t\tfor M in a.paginate(Bucket=C[J]):\n\t\t\tfor N in['Versions','DeleteMarkers']:\n\
                  \t\t\t\tif N in M:\n\t\t\t\t\tfor O in M[N]:I.append({T:O[T],U:O[U]})\n\t\tfor P in range(0,len(I),1000):\n\t\t\ttry:b=E.delete_objects(Bucket=C[J],Delete={'Objects':I[P:P+1000],'Quiet':True})\n\
                  \t\t\texcept boto3_client_error as H:print('Failed to Delete S3 Objects: '+str(H));return cfnresponse.send(A,D,cfnresponse.FAILED,F)\n\treturn cfnresponse.send(A,D,cfnresponse.SUCCESS,F)"
              Description: Downloads dashboard code from a remote repo and deploys it to Amazon S3
              Environment:
                Variables:
                  CODE_BUCKET_NAME: !Ref 'Bucket'
                  CODE_DOWNLOAD_URL: !Ref 'CodeDownloadUrl'
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'DashboardCodeDeployerRole.Arn'
              Runtime: python3.11
              Timeout: 30
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          DashboardCodeDeployerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - DashboardCodeDeployer
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DashboardCodeDeployer'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DashboardCodeDeployerResource:
            DependsOn:
              - Bucket
              - DashboardCodeDeployer
              - DashboardCodeDeployerLogGroup
            Properties:
              Properties:
                CodeBucketName: !Ref 'Bucket'
                CodeDownloadUrl: !Ref 'CodeDownloadUrl'
              ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'
              Type: Custom::DeployDashboardCode
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          DashboardCodeDeployerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - s3:PutObject
                          - s3:ListBucket
                          - s3:DeleteObject
                          - s3:ListBucketVersions
                          - s3:DeleteObjectVersion
                        Effect: Allow
                        Resource:
                          - !GetAtt 'Bucket.Arn'
                          - !Join
                            - ''
                            - - !GetAtt 'Bucket.Arn'
                              - /*
                        Sid: PutS3Objects
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          DnsRecord:
            DependsOn:
              - CloudFrontDistribution
            Properties:
              HostedZoneId: !Ref 'PublicHostedZoneId'
              RecordSets:
                - AliasTarget:
                    DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
                    HostedZoneId: Z2FDTNDATAQYW2
                  Name: !Join
                    - .
                    - - dashboard
                      - !Ref 'PublicFqdn'
                  Type: A
            Type: AWS::Route53::RecordSetGroup
          ResponseHeadersPolicy:
            Properties:
              ResponseHeadersPolicyConfig:
                CorsConfig:
                  AccessControlAllowCredentials: false
                  AccessControlAllowHeaders:
                    Items:
                      - '*'
                  AccessControlAllowMethods:
                    Items:
                      - GET
                      - POST
                      - OPTIONS
                  AccessControlAllowOrigins:
                    Items:
                      - '*'
                  AccessControlExposeHeaders:
                    Items:
                      - '*'
                  OriginOverride: false
                Name: !Join
                  - ''
                  - - !Ref 'MainStackName'
                    - -CORS-With-Preflight
            Type: AWS::CloudFront::ResponseHeadersPolicy
          TlsCertificate:
            Properties:
              DomainName: !Join
                - .
                - - dashboard
                  - !Ref 'PublicFqdn'
              DomainValidationOptions:
                - DomainName: !Join
                    - .
                    - - dashboard
                      - !Ref 'PublicFqdn'
                  HostedZoneId: !Ref 'PublicHostedZoneId'
              ValidationMethod: DNS
            Type: AWS::CertificateManager::Certificate
    Type: AWS::CloudFormation::StackSet
  FailoverDatabasesStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - NetworkingStackSet
      - PrimaryDatabasesStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Failover-Databases
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Failover-Databases
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          GlobalAppDbClusterIdentifier:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - GlobalAppDbClusterIdentifier
            Value: !GetAtt 'PrimaryRegionDbExportRetriever.GlobalAppDbClusterIdentifier'
          RegionalAppDbAdminSecretArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - AppDbAdminSecretArn
            Value: !Ref 'AppDbAdminSecret'
          RegionalAppDbClusterArn:
            Condition: ''
            Value: !GetAtt 'FailoverAppCluster.DBClusterArn'
          RegionalAppDbClusterIdentifier:
            Condition: ''
            Value: !Ref 'FailoverAppCluster'
          RegionalAppDbClusterReaderEndpoint:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalAppDbClusterReaderEndpoint
            Value: !GetAtt 'FailoverAppCluster.ReadEndpoint.Address'
          RegionalAppDbClusterWriterEndpoint:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalAppDbClusterWriterEndpoint
            Value: !GetAtt 'FailoverAppCluster.Endpoint.Address'
          RegionalAppDbProxyArn:
            Condition: ''
            Value: !GetAtt 'AppDbProxy.DBProxyArn'
          RegionalAppDbProxyName:
            Condition: ''
            Value: !Ref 'AppDbProxy'
          RegionalAppDbProxyPort:
            Condition: ''
            Value: !GetAtt 'FailoverAppCluster.Endpoint.Port'
          RegionalAppDbProxyReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'
          RegionalAppDbProxyWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'AppDbProxy.Endpoint'
          RegionalDemoDbAdminSecretArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - DemoDbAdminSecretArn
            Value: !Join
              - ':'
              - - arn
                - !Ref 'AWS::Partition'
                - secretsmanager
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - secret
                - !Select
                  - 6
                  - !Split
                    - ':'
                    - !GetAtt 'PrimaryRegionDbExportRetriever.DemoDbAdminSecretArn'
          RegionalDemoDbClusterReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterReaderEndpoint'
          RegionalDemoDbClusterWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterWriterEndpoint'
          RegionalKmsKeyArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalKmsKeyArn
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'KMSKey.Arn'
              - !GetAtt 'KMSKeyReplica.Arn'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          AppDbAdminSecret:
            Properties:
              Description: !Join
                - ''
                - - 'Failover App DB Cluster Admin Account for '
                  - !Ref 'MainStackName'
              SecretString: !Join
                - ''
                - - '{"username": "'
                  - !Ref 'DatabaseAdminUsername'
                  - '", "password": "'
                  - !Ref 'DatabaseAdminPassword'
                  - '", "database": "template1"}'
            Type: AWS::SecretsManager::Secret
          AppDbClusterDeleter:
            Condition: IsFailoverRegion
            DependsOn:
              - AppDbSubnetGroup
              - FailoverAppCluster
              - RdsClusterDeleterLogGroup
            Properties:
              Properties:
                ClusterArn: !GetAtt 'FailoverAppCluster.DBClusterArn'
                ClusterIdentifier: !Ref 'FailoverAppCluster'
              ServiceToken: !GetAtt 'RdsClusterDeleter.Arn'
              Type: Custom::DeleteRdsCluster
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          AppDbProxy:
            Properties:
              Auth:
                - SecretArn: !Ref 'AppDbAdminSecret'
              DBProxyName: !Ref 'FailoverAppCluster'
              EngineFamily: POSTGRESQL
              RequireTLS: true
              RoleArn: !GetAtt 'DbProxyRole.Arn'
              VpcSecurityGroupIds:
                - !Ref 'DbProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneBId}}
            Type: AWS::RDS::DBProxy
          AppDbProxyReaderEndpoint:
            DependsOn:
              - AppDbProxy
            Properties:
              DBProxyEndpointName: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - app
                  - reader
              DBProxyName: !Ref 'AppDbProxy'
              TargetRole: READ_ONLY
              VpcSecurityGroupIds:
                - !Ref 'DbProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneBId}}
            Type: AWS::RDS::DBProxyEndpoint
          AppDbProxyTargetGroup:
            DependsOn:
              - AppDbProxy
              - FailoverAppInstance1
            Properties:
              DBClusterIdentifiers:
                - !Ref 'FailoverAppCluster'
              DBProxyName: !Ref 'AppDbProxy'
              TargetGroupName: default
            Type: AWS::RDS::DBProxyTargetGroup
          AppDbSubnetGroup:
            Properties:
              DBSubnetGroupDescription: App Database Subnets
              DBSubnetGroupName: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - !Join
                    - ''
                    - !Split
                      - subnet-
                      - !Join
                        - '-'
                        - - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Database
                              - SubnetZoneAId}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Database
                              - SubnetZoneAId}}
              SubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Database
                    - SubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Database
                    - SubnetZoneBId}}
            Type: AWS::RDS::DBSubnetGroup
          ClusterParameterGroup:
            Properties:
              Description: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - ' - Cluster Param Group'
              Family: aurora-postgresql13
              Parameters:
                rds.logical_replication: 1
                wal_sender_timeout: 240000
            Type: AWS::RDS::DBClusterParameterGroup
          DbClusterSecurityGroup:
            DependsOn:
              - DbProxySecurityGroup
            Properties:
              GroupDescription: RDS Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from In-Region Lambda Functions
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                  ToPort: 5432
                - Description: DB Access from In-Region RDS Proxy
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Ref 'DbProxySecurityGroup'
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneACidr'
                    - !Ref 'PrimaryPrivateSubnetZoneACidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - a
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneBCidr'
                    - !Ref 'PrimaryPrivateSubnetZoneBCidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - b
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalVpcId}}
            Type: AWS::EC2::SecurityGroup
          DbProxyRole:
            DependsOn:
              - AppDbAdminSecret
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - rds.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AdministratorAccess
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'AppDbAdminSecret'
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          DbProxySecurityGroup:
            Properties:
              GroupDescription: RDS Proxy Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from Lambda
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneACidr'
                    - !Ref 'PrimaryPrivateSubnetZoneACidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - a
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneBCidr'
                    - !Ref 'PrimaryPrivateSubnetZoneBCidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - b
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalVpcId}}
            Type: AWS::EC2::SecurityGroup
          DemoDbSubnetGroup:
            Properties:
              DBSubnetGroupDescription: Demo Database Subnets
              DBSubnetGroupName: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - !Join
                    - ''
                    - !Split
                      - subnet-
                      - !Join
                        - '-'
                        - - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Private
                              - SubnetZoneAId}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Private
                              - SubnetZoneAId}}
              SubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Private
                    - SubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Private
                    - SubnetZoneBId}}
            Type: AWS::RDS::DBSubnetGroup
          FailoverAppCluster:
            Condition: IsFailoverRegion
            DependsOn:
              - AppDbSubnetGroup
              - PrimaryRegionDbExportRetriever
            Properties:
              BackupRetentionPeriod: 30
              DBSubnetGroupName: !Ref 'AppDbSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '13.18'
              GlobalClusterIdentifier: !GetAtt 'PrimaryRegionDbExportRetriever.GlobalAppDbClusterIdentifier'
              KmsKeyId: !If
                - IsPrimaryRegion
                - !Ref 'KMSKey'
                - !Ref 'KMSKeyReplica'
              Port: 5432
              RestoreType: copy-on-write
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'DbClusterSecurityGroup'
            Type: AWS::RDS::DBCluster
          FailoverAppDbAdminSecretAttachment:
            Condition: IsFailoverRegion
            DependsOn:
              - AppDbAdminSecret
              - FailoverAppCluster
            Properties:
              SecretId: !Ref 'AppDbAdminSecret'
              TargetId: !Ref 'FailoverAppCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          FailoverAppInstance1:
            Condition: IsFailoverRegion
            DependsOn:
              - AppDbSubnetGroup
              - FailoverAppCluster
              - AppDbClusterDeleter
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'FailoverAppCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
            Type: AWS::RDS::DBInstance
          FailoverAppInstance2:
            Condition: IsFailoverRegion
            DependsOn:
              - AppDbSubnetGroup
              - FailoverAppCluster
              - AppDbClusterDeleter
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'FailoverAppCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
            Type: AWS::RDS::DBInstance
          GlobalAppDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Global App DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - GlobalAppDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryRegionDbExportRetriever.GlobalAppDbClusterIdentifier'
            Type: AWS::SSM::Parameter
          KMSKey:
            Condition: IsPrimaryRegion
            Properties:
              Description: !Join
                - ''
                - - 'Muli-Region KMS Key for '
                  - !Ref 'AWS::StackName'
              EnableKeyRotation: true
              Enabled: true
              KeyPolicy:
                Id: default-key-policy
                Statement:
                  - Action: kms:*
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:aws:iam::'
                          - !Ref 'AWS::AccountId'
                          - :root
                    Resource: '*'
                    Sid: Enable IAM User Permissions
                Version: '2012-10-17'
              MultiRegion: true
            Type: AWS::KMS::Key
          KMSKeyReplica:
            Condition: IsFailoverRegion
            Properties:
              Enabled: true
              KeyPolicy:
                Id: default-key-policy
                Statement:
                  - Action: kms:*
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:aws:iam::'
                          - !Ref 'AWS::AccountId'
                          - :root
                    Resource: '*'
                    Sid: Enable IAM User Permissions
                Version: '2012-10-17'
              PrimaryKeyArn: !GetAtt 'PrimaryRegionCmkRetriever.RegionalKmsKeyArn'
            Type: AWS::KMS::ReplicaKey
          PrimaryRegionCmkRetriever:
            Condition: IsFailoverRegion
            Properties:
              Properties:
                ExportPrefix: !Ref 'MainStackName'
                Region: !Ref 'PrimaryRegionName'
                Version: 1.05
              ServiceToken: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalCfnExportRetrieverArn}}
              Type: Custom::GetCFNExports
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          PrimaryRegionDbExportRetriever:
            Properties:
              Properties:
                ExportPrefix: !Ref 'MainStackName'
                Region: !Ref 'PrimaryRegionName'
                Version: 1.04
              ServiceToken: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalCfnExportRetrieverArn}}
              Type: Custom::GetCFNExports
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          RdsClusterDeleter:
            Condition: IsFailoverRegion
            DependsOn:
              - RdsClusterDeleterRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport time\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError as boto3_client_error\n\n'''\n\
                  \    ClusterArn\n    ClusterIdentifier\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation =\
                  \ event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    if event['RequestType'] in ['Delete']:\n        \n        rds_client = boto3.client('rds')\n\
                  \        \n        try:\n            \n            '''\n                First, we'll get the cluster's current status\n            '''\n            describe_cluster_resp = rds_client.describe_db_clusters(\n\
                  \                DBClusterIdentifier = arguments['ClusterArn'],\n            )\n            \n            '''\n                If there's a cluster matching this identifier\n            '''\n\
                  \            if len(describe_cluster_resp) > 0:\n                \n                cluster_status = describe_cluster_resp['DBClusters'][0]['Status']\n                \n                '''\n  \
                  \                  If the cluster's current status is AVAILABLE\n                '''\n                if cluster_status in ['available']:\n                    \n                    try:\n    \
                  \                    \n                        '''\n                            We'll try to delete it\n                        '''\n                        rds_client.delete_db_cluster(\n   \
                  \                         SkipFinalSnapshot = True,\n                            DBClusterIdentifier = arguments['ClusterIdentifier']\n                        )\n                        \n   \
                  \                     '''\n                            Now, we'll monitor its deletion and respond only after it's successful.\n                        '''\n                        while True:\n\
                  \                            \n                            try:\n                                \n                                describe_cluster_resp = rds_client.describe_db_clusters(\n  \
                  \                                  DBClusterIdentifier = arguments['ClusterArn'],\n                                )\n\n                                time.sleep(5)\n                        \
                  \        \n                            except boto3_client_error as e:\n                                \n                                if e.response['Error']['Code'] == 'DBClusterNotFoundFault':\n\
                  \                                    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\n                                \n                                else:\n    \
                  \                                print('Failed to Retrieve Cluster: ' + str(e.response))\n                                    return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n\
                  \                            \n                    except boto3_client_error as e:\n                        print('Failed to Delete Cluster: ' + str(e.response))\n                        return\
                  \ cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n                \n        except boto3_client_error as e:\n            print('Failed to Retrieve Cluster: ' + str(e.response))\n\
                  \            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              Description: Deletes the failover cluster once the local instances are deleted
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'RdsClusterDeleterRole.Arn'
              Runtime: python3.11
              Timeout: 300
              TracingConfig:
                Mode: PassThrough
            Type: AWS::Lambda::Function
          RdsClusterDeleterLogGroup:
            Condition: IsFailoverRegion
            DeletionPolicy: Delete
            DependsOn:
              - RdsClusterDeleter
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'RdsClusterDeleter'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          RdsClusterDeleterRole:
            Condition: IsFailoverRegion
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - rds:DeleteDBCluster
                          - rds:DescribeDBClusters
                        Effect: Allow
                        Resource:
                          - !GetAtt 'FailoverAppCluster.DBClusterArn'
                        Sid: DescribeAndDeleteDBCluster
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          RegionalAppDbAdminSecretArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Admin Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbAdminSecretArn
              Tier: Standard
              Type: String
              Value: !Ref 'AppDbAdminSecret'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional App DB Cluster ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'FailoverAppCluster.DBClusterArn'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional App DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'FailoverAppCluster'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Reader Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'FailoverAppCluster.ReadEndpoint.Address'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Writer Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'FailoverAppCluster.Endpoint.Address'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxy.DBProxyArn'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyNameParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Proxy name for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyName
              Tier: Standard
              Type: String
              Value: !Ref 'AppDbProxy'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyPortParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy port for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyPort
              Tier: Standard
              Type: String
              Value: !GetAtt 'FailoverAppCluster.Endpoint.Port'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy reader endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy writer endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxy.Endpoint'
            Type: AWS::SSM::Parameter
          RegionalDemoDbAdminSecretArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Admin Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbAdminSecretArn
              Tier: Standard
              Type: String
              Value: !Join
                - ':'
                - - arn
                  - !Ref 'AWS::Partition'
                  - secretsmanager
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - secret
                  - !Select
                    - 6
                    - !Split
                      - ':'
                      - !GetAtt 'PrimaryRegionDbExportRetriever.DemoDbAdminSecretArn'
            Type: AWS::SSM::Parameter
          RegionalDemoDbClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Reader Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterReaderEndpoint'
            Type: AWS::SSM::Parameter
          RegionalDemoDbClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Writer Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterWriterEndpoint'
            Type: AWS::SSM::Parameter
          RegionalKmsKeyArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional KMS Key ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalKmsKeyArn
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'KMSKey.Arn'
                - !GetAtt 'KMSKeyReplica.Arn'
            Type: AWS::SSM::Parameter
        Transform:
          Name: AWS::SecretsManager-2020-07-23
    Type: AWS::CloudFormation::StackSet
  FailoverHandlersStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - WebsiteStackSet
      - NetworkingStackSet
      - PrimaryDatabasesStackSet
      - FailoverDatabasesStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Failover-Handlers
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Failover-Handlers
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          FailoverClusterPromoter:
            Condition: IsPrimaryRegion
            DependsOn:
              - FailoverClusterPromoterRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\nfrom botocore.exceptions\
                  \ import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef initiate_global_cluster_failover():\n    \n    rds_client = boto3.client('rds')\n    \n    try:\n\
                  \        \n        print('Attempting to Retrieve Global DB Cluster Members: \"' + os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'] + '\"')\n            \n        describe_cluster_resp = rds_client.describe_global_clusters(\n\
                  \            GlobalClusterIdentifier = os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER']\n        )\n        \n        '''\n            For each Global Cluster member\n        '''\n        for cluster_member\
                  \ in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\n            \n                '''\n                    If there's a member in the failover region\n                '''\n\
                  \                if os.environ['FAILOVER_REGION_NAME'] in cluster_member['DBClusterArn']:\n                    \n                    try:\n                        \n                        print('Attempting\
                  \ to Promote Regional Cluster \"' + cluster_member['DBClusterArn'] + '\" within Global DB Cluster \"' + os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'] + '\"')\n                        \n     \
                  \                   rds_client.failover_global_cluster(\n                            GlobalClusterIdentifier = os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'],\n                            TargetDbClusterIdentifier\
                  \ = cluster_member['DBClusterArn'],\n                            AllowDataLoss = True\n                        )\n                        \n                        print('Successfully Promoted\
                  \ Regional Cluster \"' + cluster_member['DBClusterArn'] + '\" within Global DB Cluster \"' + os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'] + '\"')\n                    \n                    except\
                  \ boto3_client_error as e:\n                        raise Exception('Failed to Promote Regional Cluster within Global DB Cluster: ' + str(e))\n                \n    except boto3_client_error as\
                  \ e:\n        raise Exception('Failed to Retrieve Global Cluster Members: ' + str(e))\n                    \n    return True\n    \ndef log_failover_event():\n    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\
                  \    \n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n        port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n\
                  \        sslmode = 'require',\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n        connect_timeout = 3,\n    )\n    \n    eastern\
                  \ = dateutil.tz.gettz('US/Eastern')\n    \n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (2,'\" + datetime.now(tz = eastern).strftime(\"\
                  %m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n   \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    initiate_global_cluster_failover()\n\
                  \            \n    log_failover_event()"
              Description: ''
              Environment:
                Variables:
                  FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'
                  GLOBAL_APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /GlobalAppDbClusterIdentifier}}
                  REGIONAL_APP_DB_CLUSTER_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterArn}}
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'FailoverClusterPromoterRole.Arn'
              Runtime: python3.11
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          FailoverClusterPromoterEventsPermission:
            Condition: IsPrimaryRegion
            DependsOn:
              - FailoverClusterPromoter
              - WebsiteHealthCheckAlarmListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverClusterPromoter'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'WebsiteHealthCheckAlarmListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverClusterPromoterLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - FailoverClusterPromoter
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverClusterPromoter'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverClusterPromoterRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                      - Action:
                          - rds:DescribeGlobalClusters
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:'
                              - !Ref 'AWS::Partition'
                              - ':rds::'
                              - !Ref 'AWS::AccountId'
                              - ':global-cluster:'
                              - !Join
                                - ''
                                - - '{{resolve:ssm:/'
                                  - !Ref 'MainStackName'
                                  - /GlobalAppDbClusterIdentifier}}
                        Sid: DescribeGlobalClusters
                      - Action:
                          - rds:FailoverGlobalCluster
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:'
                              - !Ref 'AWS::Partition'
                              - ':rds:'
                              - !Ref 'FailoverRegionName'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - :cluster:*
                          - !Join
                            - ''
                            - - 'arn:'
                              - !Ref 'AWS::Partition'
                              - ':rds::'
                              - !Ref 'AWS::AccountId'
                              - ':global-cluster:'
                              - !Join
                                - ''
                                - - '{{resolve:ssm:/'
                                  - !Ref 'MainStackName'
                                  - /GlobalAppDbClusterIdentifier}}
                        Sid: PromoteFailoverCluster
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          FailoverCompletedEventListener:
            DependsOn:
              - FailoverCompletedHandler
            Properties:
              Description: Invokes Handler When Failover is Completed
              EventPattern:
                detail:
                  EventID:
                    - RDS-EVENT-0071
                  SourceArn:
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /RegionalAppDbClusterArn}}
                detail-type:
                  - RDS DB Cluster Event
                source:
                  - aws.rds
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverCompletedHandler.Arn'
                  Id: FailoverCompletedHandler
            Type: AWS::Events::Rule
          FailoverCompletedHandler:
            DependsOn:
              - FailoverCompletedHandlerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom datetime import datetime\nfrom datetime import\
                  \ timedelta\nfrom botocore.exceptions import ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef enable_proxy_target_waiter_rule():\n    \n    print('Attempting\
                  \ to Enable Proxy Target Waiter Cron: \"' + os.environ['PROXY_MONITOR_CRON_NAME'] + '\"')\n\n    try:\n        \n        boto3.client('events').enable_rule(\n            Name = os.environ['PROXY_MONITOR_CRON_NAME']\n\
                  \        )\n        \n        print('Successfully Enabled Proxy Target Waiter Cron: \"' + os.environ['PROXY_MONITOR_CRON_NAME'] + '\"')\n        \n    except boto3_client_error as e:\n       \
                  \ raise Exception('Failed to Enable Proxy Target Waiter Cron: ' + str(e))\n    \ndef point_service_fqdn_to_failover_web_alb():\n    \n    try:\n\n        boto3.client('route53').change_resource_record_sets(\n\
                  \            ChangeBatch = {\n                'Changes': [\n                    {\n                        'Action': 'UPSERT',\n                        'ResourceRecordSet': {\n               \
                  \             'Name': os.environ['PUBLIC_FQDN'],\n                            'AliasTarget': {\n                                'DNSName': os.environ['REGIONAL_WEB_ALB_FQDN'],\n              \
                  \                  'HostedZoneId': os.environ['REGIONAL_WEB_ALB_HOSTED_ZONE_ID'],\n                                'EvaluateTargetHealth': False\n                            },\n             \
                  \               'Type': 'A'\n                        },\n                    },\n                ],\n            },\n            HostedZoneId = os.environ['PUBLIC_HOSTED_ZONE_ID'],\n        )\n\
                  \        \n    except boto3_client_error as e:\n        raise Exception('Failed to Update ALB DNS Record: ' + str(e))\n\ndef register_failover_cluster_as_proxy_target():\n    \n    try:\n    \
                  \    \n        boto3.client('rds').register_db_proxy_targets(\n            DBProxyName             = os.environ['REGIONAL_APP_DB_PROXY_NAME'],\n            TargetGroupName         = 'default',\n\
                  \            DBClusterIdentifiers    = [\n                os.environ['REGIONAL_APP_DB_CLUSTER_IDENTIFIER']\n            ]\n        )\n    \n    except boto3_client_error as e:\n        raise Exception('Failed\
                  \ to Register Failover Cluster as Proxy Target: ' + str(e))\n        \ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n \
                  \   \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n       \
                  \ port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n\
                  \        connect_timeout = 3,\n        sslmode = 'require',\n    )\n    \n    current_region = os.environ['AWS_REGION']\n    \n    if current_region == os.environ['PRIMARY_REGION_NAME']:\n   \
                  \     \n        curs = db_conn.cursor()\n        curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (3,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\"\
                  )\n        db_conn.commit()\n        \n    elif current_region == os.environ['FAILOVER_REGION_NAME']:\n        \n        point_service_fqdn_to_failover_web_alb()\n      \n    '''\n        Logs\
                  \ CNAME Update\n    '''\n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (4,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\"\
                  ) + \"' )\")\n    db_conn.commit()\n    \n    '''\n        Logs Failover Completion\n    '''\n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values\
                  \ (3,'\" + datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n        \n    curs.close()\n    db_conn.close()\n    \n    return True"
              Description: Processes failover completed events
              Environment:
                Variables:
                  FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'
                  PRIMARY_REGION_NAME: !Ref 'PrimaryRegionName'
                  PUBLIC_FQDN: !Ref 'PublicFqdn'
                  PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneId'
                  REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterIdentifier}}
                  REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterReaderEndpoint}}
                  REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterWriterEndpoint}}
                  REGIONAL_APP_DB_PROXY_NAME: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RegionalAppDbProxyName}}
                  REGIONAL_APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbAdminSecretArn}}
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
                  REGIONAL_WEB_ALB_FQDN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /WebLoadBalancerFqdn}}
                  REGIONAL_WEB_ALB_HOSTED_ZONE_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /WebLoadBalancerHostedZoneId}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'FailoverCompletedHandlerRole.Arn'
              Runtime: python3.11
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          FailoverCompletedHandlerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - FailoverCompletedHandler
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverCompletedHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverCompletedHandlerPermission:
            DependsOn:
              - FailoverCompletedHandler
              - FailoverCompletedEventListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverCompletedHandler'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'FailoverCompletedEventListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverCompletedHandlerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
                - PolicyDocument:
                    Statement:
                      - Action:
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PublicHostedZoneId'
                        Sid: UpdateRoute53Records
                  PolicyName: update-route53-records
            Type: AWS::IAM::Role
          FailoverStartedEventListener:
            DependsOn:
              - FailoverStartedHandler
            Properties:
              Description: Invokes Handler When Failover is Started
              EventPattern:
                detail:
                  EventID:
                    - RDS-EVENT-0073
                  SourceArn:
                    - !Join
                      - ''
                      - - '{{resolve:ssm:/'
                        - !Ref 'MainStackName'
                        - /RegionalAppDbClusterArn}}
                detail-type:
                  - RDS DB Cluster Event
                source:
                  - aws.rds
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverStartedHandler.Arn'
                  Id: FailoverStartedHandler
            Type: AWS::Events::Rule
          FailoverStartedHandler:
            DependsOn:
              - FailoverStartedHandlerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport datetime\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    eastern = dateutil.tz.gettz('US/Eastern')\n\
                  \    \n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\n\n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\n      \
                  \  port = demo_db_credentials['port'],\n        user = demo_db_credentials['username'],\n        password = demo_db_credentials['password'],\n        database = demo_db_credentials['database'],\n\
                  \        connect_timeout = 3,\n        sslmode = 'require',\n    )\n\n    curs = db_conn.cursor()\n    curs.execute(\"INSERT INTO failoverevents (event,insertedon) values (2,'\" + datetime.datetime.now(tz\
                  \ = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"' )\")\n    db_conn.commit()\n    \n    curs.close()\n    db_conn.close()\n    \n    return True"
              Description: Processes failover started events
              Environment:
                Variables:
                  FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'
                  PRIMARY_REGION_NAME: !Ref 'PrimaryRegionName'
                  PUBLIC_FQDN: !Ref 'PublicFqdn'
                  PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneId'
                  REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterIdentifier}}
                  REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterReaderEndpoint}}
                  REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterWriterEndpoint}}
                  REGIONAL_APP_DB_PROXY_NAME: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /
                      - RegionalAppDbProxyName}}
                  REGIONAL_APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbAdminSecretArn}}
                  REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbClusterWriterEndpoint}}
                  REGIONAL_DEMO_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalDemoDbAdminSecretArn}}
                  REGIONAL_WEB_ALB_FQDN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /WebLoadBalancerFqdn}}
                  REGIONAL_WEB_ALB_HOSTED_ZONE_ID: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /WebLoadBalancerHostedZoneId}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'FailoverStartedHandlerRole.Arn'
              Runtime: python3.11
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          FailoverStartedHandlerLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - FailoverStartedHandler
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'FailoverStartedHandler'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          FailoverStartedHandlerPermission:
            DependsOn:
              - FailoverStartedHandler
              - FailoverStartedEventListener
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'FailoverStartedHandler'
              Principal: events.amazonaws.com
              SourceArn: !GetAtt 'FailoverStartedEventListener.Arn'
            Type: AWS::Lambda::Permission
          FailoverStartedHandlerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: main-policy
                - PolicyDocument:
                    Statement:
                      - Action:
                          - route53:ChangeResourceRecordSets
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - arn:aws:route53:::hostedzone/
                              - !Ref 'PublicHostedZoneId'
                        Sid: UpdateRoute53Records
                  PolicyName: update-route53-records
            Type: AWS::IAM::Role
          WebsiteHealthCheck:
            Condition: IsPrimaryRegion
            Properties:
              HealthCheckConfig:
                EnableSNI: false
                FailureThreshold: '1'
                FullyQualifiedDomainName: !Ref 'PublicFqdn'
                Inverted: false
                MeasureLatency: false
                Port: 443
                RequestInterval: '10'
                ResourcePath: ''
                Type: HTTPS
            Type: AWS::Route53::HealthCheck
          WebsiteHealthCheckAlarm:
            Condition: IsPrimaryRegion
            DependsOn:
              - WebsiteHealthCheck
            Properties:
              ActionsEnabled: true
              AlarmDescription: !Join
                - ''
                - - 'Alerts when '
                  - !Ref 'PublicFqdn'
                  - ' is unavailable.'
              ComparisonOperator: LessThanOrEqualToThreshold
              Dimensions:
                - Name: HealthCheckId
                  Value: !Ref 'WebsiteHealthCheck'
              EvaluationPeriods: 1
              MetricName: HealthCheckStatus
              Namespace: AWS/Route53
              Period: 10
              Statistic: Sum
              Threshold: '0'
              TreatMissingData: ignore
            Type: AWS::CloudWatch::Alarm
          WebsiteHealthCheckAlarmListener:
            Condition: IsPrimaryRegion
            DependsOn:
              - FailoverClusterPromoter
            Properties:
              Description: Invokes Handler When Failure is Detected
              EventPattern:
                detail:
                  state:
                    value:
                      - ALARM
                detail-type:
                  - CloudWatch Alarm State Change
                resources:
                  - !GetAtt 'WebsiteHealthCheckAlarm.Arn'
                source:
                  - aws.cloudwatch
              State: ENABLED
              Targets:
                - Arn: !GetAtt 'FailoverClusterPromoter.Arn'
                  Id: FailoverClusterPromoter
            Type: AWS::Events::Rule
    Type: AWS::CloudFormation::StackSet
  FailoverVpcIdRetriever:
    DependsOn:
      - NetworkingStackSet
      - CfnExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'FailoverRegionName'
        Version: 1.06
      ServiceToken: !GetAtt 'CfnExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  FinalExportRetriever:
    DependsOn:
      - DashboardStackSet
      - APIDeploymentStackSet
      - CfnExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'PrimaryRegionName'
        Version: 1.1
      ServiceToken: !GetAtt 'CfnExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  NetworkingStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Networking
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 1
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Networking
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          DatabaseSubnetZoneAId:
            Condition: ''
            Value: !Ref 'DatabaseSubnetZoneA'
          DatabaseSubnetZoneBId:
            Condition: ''
            Value: !Ref 'DatabaseSubnetZoneB'
          LambdaSecurityGroupId:
            Condition: ''
            Value: !Ref 'LambdaSecurityGroup'
          PrivateRouteTableZoneAId:
            Condition: ''
            Value: !Ref 'PrivateRouteTableZoneA'
          PrivateRouteTableZoneBId:
            Condition: ''
            Value: !Ref 'PrivateRouteTableZoneB'
          PrivateSubnetZoneAId:
            Condition: ''
            Value: !Ref 'PrivateSubnetZoneA'
          PrivateSubnetZoneBId:
            Condition: ''
            Value: !Ref 'PrivateSubnetZoneB'
          PublicSubnetZoneAId:
            Condition: ''
            Value: !Ref 'PublicSubnetZoneA'
          PublicSubnetZoneBId:
            Condition: ''
            Value: !Ref 'PublicSubnetZoneB'
          RegionalAppDatabaseNaclId:
            Condition: ''
            Value: !GetAtt 'DatabaseAcl.Id'
          RegionalVpcId:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalVpcId
            Value: !Ref 'Vpc'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          DatabaseAcl:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - Database
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::NetworkAcl
          DatabaseAclEgressEntry:
            Properties:
              CidrBlock: '0.0.0.0/0'
              Egress: true
              NetworkAclId: !Ref 'DatabaseAcl'
              Protocol: -1
              RuleAction: allow
              RuleNumber: 100
            Type: AWS::EC2::NetworkAclEntry
          DatabaseAclIngressEntry:
            Properties:
              CidrBlock: '0.0.0.0/0'
              Egress: false
              NetworkAclId: !Ref 'DatabaseAcl'
              Protocol: -1
              RuleAction: allow
              RuleNumber: 100
            Type: AWS::EC2::NetworkAclEntry
          DatabaseSubnetZoneA:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryDatabaseSubnetZoneACidr'
                - !Ref 'FailoverDatabaseSubnetZoneACidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - DatabaseSubnetZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          DatabaseSubnetZoneAAclAssociation:
            Properties:
              NetworkAclId: !Ref 'DatabaseAcl'
              SubnetId: !Ref 'DatabaseSubnetZoneA'
            Type: AWS::EC2::SubnetNetworkAclAssociation
          DatabaseSubnetZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Database
                  - ' Subnet Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DatabaseSubnetZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'DatabaseSubnetZoneA'
            Type: AWS::SSM::Parameter
          DatabaseSubnetZoneATableAssociation:
            DependsOn:
              - Vpc
              - DatabaseSubnetZoneA
              - PrivateRouteTableZoneA
            Properties:
              RouteTableId: !Ref 'PrivateRouteTableZoneA'
              SubnetId: !Ref 'DatabaseSubnetZoneA'
            Type: AWS::EC2::SubnetRouteTableAssociation
          DatabaseSubnetZoneB:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryDatabaseSubnetZoneBCidr'
                - !Ref 'FailoverDatabaseSubnetZoneBCidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - DatabaseSubnetZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          DatabaseSubnetZoneBAclAssociation:
            Properties:
              NetworkAclId: !Ref 'DatabaseAcl'
              SubnetId: !Ref 'DatabaseSubnetZoneB'
            Type: AWS::EC2::SubnetNetworkAclAssociation
          DatabaseSubnetZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Database
                  - ' Subnet Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - DatabaseSubnetZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'DatabaseSubnetZoneB'
            Type: AWS::SSM::Parameter
          DatabaseSubnetZoneBTableAssociation:
            DependsOn:
              - Vpc
              - DatabaseSubnetZoneB
              - PrivateRouteTableZoneB
            Properties:
              RouteTableId: !Ref 'PrivateRouteTableZoneB'
              SubnetId: !Ref 'DatabaseSubnetZoneB'
            Type: AWS::EC2::SubnetRouteTableAssociation
          InternetGateway:
            Properties:
              Tags:
                - Key: Name
                  Value: !Ref 'AWS::StackName'
            Type: AWS::EC2::InternetGateway
          InternetGatewayVpcAssociation:
            DependsOn:
              - Vpc
              - InternetGateway
            Properties:
              InternetGatewayId: !Ref 'InternetGateway'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::VPCGatewayAttachment
          LambdaSecurityGroup:
            Properties:
              GroupDescription: Lambda Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress: []
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::SecurityGroup
          LambdaSecurityGroupIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Lambda Security Group ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - LambdaSecurityGroupId
              Tier: Standard
              Type: String
              Value: !Ref 'LambdaSecurityGroup'
            Type: AWS::SSM::Parameter
          NatGatewayZoneA:
            DependsOn:
              - PublicSubnetZoneA
              - NatGatewayZoneAElasticIp
            Properties:
              AllocationId: !GetAtt 'NatGatewayZoneAElasticIp.AllocationId'
              SubnetId: !Ref 'PublicSubnetZoneA'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - NatGatewayZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
            Type: AWS::EC2::NatGateway
          NatGatewayZoneAElasticIp:
            Properties:
              Domain: vpc
            Type: AWS::EC2::EIP
          NatGatewayZoneB:
            DependsOn:
              - PublicSubnetZoneB
              - NatGatewayZoneBElasticIp
            Properties:
              AllocationId: !GetAtt 'NatGatewayZoneBElasticIp.AllocationId'
              SubnetId: !Ref 'PublicSubnetZoneB'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - NatGatewayZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
            Type: AWS::EC2::NatGateway
          NatGatewayZoneBElasticIp:
            Properties:
              Domain: vpc
            Type: AWS::EC2::EIP
          PrivateRouteTableZoneA:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateRouteTableZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::RouteTable
          PrivateRouteTableZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ID of Private Route Table in Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateRouteTableZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateRouteTableZoneA'
            Type: AWS::SSM::Parameter
          PrivateRouteTableZoneB:
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateRouteTableZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::RouteTable
          PrivateRouteTableZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ID of Private Route Table in Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateRouteTableZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateRouteTableZoneB'
            Type: AWS::SSM::Parameter
          PrivateSubnetRouteToNatGatewayZoneA:
            DependsOn:
              - NatGatewayZoneA
              - PrivateRouteTableZoneA
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'NatGatewayZoneA'
              RouteTableId: !Ref 'PrivateRouteTableZoneA'
            Type: AWS::EC2::Route
          PrivateSubnetRouteToNatGatewayZoneB:
            DependsOn:
              - NatGatewayZoneB
              - PrivateRouteTableZoneB
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              NatGatewayId: !Ref 'NatGatewayZoneB'
              RouteTableId: !Ref 'PrivateRouteTableZoneB'
            Type: AWS::EC2::Route
          PrivateSubnetZoneA:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPrivateSubnetZoneACidr'
                - !Ref 'FailoverPrivateSubnetZoneACidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateSubnetZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PrivateSubnetZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Private
                  - ' Subnet Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateSubnetZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateSubnetZoneA'
            Type: AWS::SSM::Parameter
          PrivateSubnetZoneATableAssociation:
            DependsOn:
              - Vpc
              - PrivateSubnetZoneA
              - PrivateRouteTableZoneA
            Properties:
              RouteTableId: !Ref 'PrivateRouteTableZoneA'
              SubnetId: !Ref 'PrivateSubnetZoneA'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PrivateSubnetZoneB:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPrivateSubnetZoneBCidr'
                - !Ref 'FailoverPrivateSubnetZoneBCidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PrivateSubnetZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PrivateSubnetZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Private
                  - ' Subnet Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PrivateSubnetZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'PrivateSubnetZoneB'
            Type: AWS::SSM::Parameter
          PrivateSubnetZoneBTableAssociation:
            DependsOn:
              - Vpc
              - PrivateSubnetZoneB
              - PrivateRouteTableZoneB
            Properties:
              RouteTableId: !Ref 'PrivateRouteTableZoneB'
              SubnetId: !Ref 'PrivateSubnetZoneB'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PublicRouteTable:
            DependsOn:
              - Vpc
            Properties:
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicRouteTable-
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::RouteTable
          PublicRouteToInternet:
            DependsOn:
              - InternetGateway
              - PublicRouteTable
            Properties:
              DestinationCidrBlock: '0.0.0.0/0'
              GatewayId: !Ref 'InternetGateway'
              RouteTableId: !Ref 'PublicRouteTable'
            Type: AWS::EC2::Route
          PublicSubnetZoneA:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - a
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPublicSubnetZoneACidr'
                - !Ref 'FailoverPublicSubnetZoneACidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicSubnetZoneA
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PublicSubnetZoneAIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Public
                  - ' Subnet Zone '
                  - A
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PublicSubnetZoneAId
              Tier: Standard
              Type: String
              Value: !Ref 'PublicSubnetZoneA'
            Type: AWS::SSM::Parameter
          PublicSubnetZoneATableAssociation:
            DependsOn:
              - Vpc
              - PublicSubnetZoneA
              - PublicRouteTable
            Properties:
              RouteTableId: !Ref 'PublicRouteTable'
              SubnetId: !Ref 'PublicSubnetZoneA'
            Type: AWS::EC2::SubnetRouteTableAssociation
          PublicSubnetZoneB:
            DependsOn:
              - Vpc
            Properties:
              AvailabilityZone: !Join
                - ''
                - - !Ref 'AWS::Region'
                  - b
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryPublicSubnetZoneBCidr'
                - !Ref 'FailoverPublicSubnetZoneBCidr'
              MapPublicIpOnLaunch: false
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - PublicSubnetZoneB
                      - '-'
                      - !Ref 'AWS::StackName'
              VpcId: !Ref 'Vpc'
            Type: AWS::EC2::Subnet
          PublicSubnetZoneBIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - Public
                  - ' Subnet Zone '
                  - B
                  - ' for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - PublicSubnetZoneBId
              Tier: Standard
              Type: String
              Value: !Ref 'PublicSubnetZoneB'
            Type: AWS::SSM::Parameter
          PublicSubnetZoneBTableAssociation:
            DependsOn:
              - Vpc
              - PublicSubnetZoneB
              - PublicRouteTable
            Properties:
              RouteTableId: !Ref 'PublicRouteTable'
              SubnetId: !Ref 'PublicSubnetZoneB'
            Type: AWS::EC2::SubnetRouteTableAssociation
          RegionalAppDatabaseNaclIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Database ACL ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDatabaseNaclId
              Tier: Standard
              Type: String
              Value: !GetAtt 'DatabaseAcl.Id'
            Type: AWS::SSM::Parameter
          RegionalVpcIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'VPC for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalVpcId
              Tier: Standard
              Type: String
              Value: !Ref 'Vpc'
            Type: AWS::SSM::Parameter
          Vpc:
            Properties:
              CidrBlock: !If
                - IsPrimaryRegion
                - !Ref 'PrimaryVpcCidr'
                - !Ref 'FailoverVpcCidr'
              EnableDnsHostnames: true
              EnableDnsSupport: true
              Tags:
                - Key: Name
                  Value: !Ref 'AWS::StackName'
            Type: AWS::EC2::VPC
    Type: AWS::CloudFormation::StackSet
  PrimaryDatabasesStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Primary-Databases
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Primary-Databases
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          GlobalAppDbClusterIdentifier:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - GlobalAppDbClusterIdentifier
            Value: !Ref 'GlobalAppCluster'
          GlobalDemoDbClusterIdentifier:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - GlobalDemoDbClusterIdentifier
            Value: !Ref 'GlobalDemoCluster'
          RegionalAppDbAdminSecretArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - AppDbAdminSecretArn
            Value: !Ref 'AppDbAdminSecret'
          RegionalAppDbClusterArn:
            Condition: ''
            Value: !GetAtt 'PrimaryAppCluster.DBClusterArn'
          RegionalAppDbClusterIdentifier:
            Condition: ''
            Value: !Ref 'PrimaryAppCluster'
          RegionalAppDbClusterReaderEndpoint:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalAppDbClusterReaderEndpoint
            Value: !GetAtt 'PrimaryAppCluster.ReadEndpoint.Address'
          RegionalAppDbClusterWriterEndpoint:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalAppDbClusterWriterEndpoint
            Value: !GetAtt 'PrimaryAppCluster.Endpoint.Address'
          RegionalAppDbProxyArn:
            Condition: ''
            Value: !GetAtt 'AppDbProxy.DBProxyArn'
          RegionalAppDbProxyName:
            Condition: ''
            Value: !Ref 'AppDbProxy'
          RegionalAppDbProxyPort:
            Condition: ''
            Value: !GetAtt 'PrimaryAppCluster.Endpoint.Port'
          RegionalAppDbProxyReaderEndpoint:
            Condition: ''
            Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'
          RegionalAppDbProxyWriterEndpoint:
            Condition: ''
            Value: !GetAtt 'AppDbProxy.Endpoint'
          RegionalDemoDbAdminSecretArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - DemoDbAdminSecretArn
            Value: !Ref 'DemoDbAdminSecret'
          RegionalDemoDbClusterArn:
            Condition: ''
            Value: !GetAtt 'PrimaryDemoCluster.DBClusterArn'
          RegionalDemoDbClusterIdentifier:
            Condition: ''
            Value: !Ref 'PrimaryDemoCluster'
          RegionalDemoDbClusterReaderEndpoint:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalDemoDbClusterReaderEndpoint
            Value: !GetAtt 'PrimaryDemoCluster.ReadEndpoint.Address'
          RegionalDemoDbClusterWriterEndpoint:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalDemoDbClusterWriterEndpoint
            Value: !GetAtt 'PrimaryDemoCluster.Endpoint.Address'
          RegionalKmsKeyArn:
            Condition: ''
            Export:
              Name: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - RegionalKmsKeyArn
            Value: !If
              - IsPrimaryRegion
              - !GetAtt 'KMSKey.Arn'
              - !GetAtt 'KMSKeyReplica.Arn'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          AppDatabasePreparerResource:
            Condition: IsPrimaryRegion
            DependsOn:
              - DatabasePreparerLogGroup
              - AppDbAdminSecret
              - PrimaryAppInstance1
              - PrimaryAppInstance2
            Properties:
              Properties:
                DatabaseIdentifier: App
                QueriesToExecute:
                  - "\n                    CREATE SEQUENCE IF NOT EXISTS data_sequence start 1 increment 1;\n                    "
                  - "\n                    CREATE TABLE IF NOT EXISTS dataserver (\n                        id integer not null primary key default nextval('data_sequence'),\n                        guid VARCHAR(255)\
                    \ NOT NULL,\n                        insertedon timestamp NOT NULL DEFAULT NOW(),\n                        migratedon timestamp NOT NULL DEFAULT NOW()\n                    );\n             \
                    \       "
              ServiceToken: !GetAtt 'DatabasePreparer.Arn'
              Type: Custom::ExecuteQueriesAgainstDatabase
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          AppDbAdminSecret:
            Properties:
              Description: !Join
                - ''
                - - 'Primary App DB Cluster Admin Account for '
                  - !Ref 'MainStackName'
              SecretString: !Join
                - ''
                - - '{"username": "'
                  - !Ref 'DatabaseAdminUsername'
                  - '", "password": "'
                  - !Ref 'DatabaseAdminPassword'
                  - '", "database": "template1"}'
            Type: AWS::SecretsManager::Secret
          AppDbProxy:
            Properties:
              Auth:
                - SecretArn: !Ref 'AppDbAdminSecret'
              DBProxyName: !Ref 'PrimaryAppCluster'
              EngineFamily: POSTGRESQL
              RequireTLS: true
              RoleArn: !GetAtt 'DbProxyRole.Arn'
              VpcSecurityGroupIds:
                - !Ref 'DbProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneBId}}
            Type: AWS::RDS::DBProxy
          AppDbProxyReaderEndpoint:
            DependsOn:
              - AppDbProxy
            Properties:
              DBProxyEndpointName: !Join
                - '-'
                - - !Ref 'MainStackName'
                  - app
                  - reader
              DBProxyName: !Ref 'AppDbProxy'
              TargetRole: READ_ONLY
              VpcSecurityGroupIds:
                - !Ref 'DbProxySecurityGroup'
              VpcSubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /DatabaseSubnetZoneBId}}
            Type: AWS::RDS::DBProxyEndpoint
          AppDbProxyTargetGroup:
            DependsOn:
              - AppDbProxy
              - PrimaryAppInstance1
            Properties:
              DBClusterIdentifiers:
                - !Ref 'PrimaryAppCluster'
              DBProxyName: !Ref 'AppDbProxy'
              TargetGroupName: default
            Type: AWS::RDS::DBProxyTargetGroup
          AppDbSubnetGroup:
            Properties:
              DBSubnetGroupDescription: App Database Subnets
              DBSubnetGroupName: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - !Join
                    - ''
                    - !Split
                      - subnet-
                      - !Join
                        - '-'
                        - - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Database
                              - SubnetZoneAId}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Database
                              - SubnetZoneAId}}
              SubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Database
                    - SubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Database
                    - SubnetZoneBId}}
            Type: AWS::RDS::DBSubnetGroup
          ClusterParameterGroup:
            Properties:
              Description: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - ' - Cluster Param Group'
              Family: aurora-postgresql13
              Parameters:
                rds.logical_replication: 1
                wal_sender_timeout: 240000
            Type: AWS::RDS::DBClusterParameterGroup
          DatabasePreparer:
            Condition: IsPrimaryRegion
            DependsOn:
              - DatabasePreparerRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\nimport subprocess\n\nimport os\nimport json\nimport boto3\nimport psycopg2\nimport cfnresponse\nimport multi_region_db\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\n'''\n    RDSAdminSecretArn\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n   \
                  \ \n    if 'Properties' in event['ResourceProperties']:\n        arguments = event['ResourceProperties']['Properties']\n        \n    operation = event['ResourceProperties']['Type'].replace('Custom::',\
                  \ '')\n    \n    response_data = {}\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        db_credentials = custom_functions.get_db_credentials(arguments['DatabaseIdentifier'])\n\
                  \        \n        try:\n                \n            db_conn = psycopg2.connect(\n                host = db_credentials['host'],\n                port = db_credentials['port'],\n           \
                  \     user = db_credentials['username'],\n                password = db_credentials['password'],\n                database = db_credentials['database'],\n                connect_timeout = 3,\n\
                  \                sslmode = 'require',\n            )\n            \n            curs = db_conn.cursor()\n            \n            for query in arguments['QueriesToExecute']:\n               \
                  \ \n                curs.execute(query.replace('\\r','').replace('\\n',' '))\n                db_conn.commit()\n            \n            curs.close()\n            db_conn.close()\n        \n\
                  \        except Exception as error:\n\n            print('There was a problem executing the DDL statements: ' + str(error))\n            return cfnresponse.send(event, context, cfnresponse.FAILED,\
                  \ response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              Description: Executes DDL statements against new DB clusters to create necessary schema
              Environment:
                Variables:
                  REGIONAL_APP_DB_SECRET_ARN: !Ref 'AppDbAdminSecret'
                  REGIONAL_DEMO_DB_SECRET_ARN: !Ref 'DemoDbAdminSecret'
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'DatabasePreparerRole.Arn'
              Runtime: python3.11
              Timeout: 60
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          DatabasePreparerLogGroup:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - DatabasePreparer
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'DatabasePreparer'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          DatabasePreparerRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'AppDbAdminSecret'
                          - !Ref 'DemoDbAdminSecret'
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !If
                            - IsPrimaryRegion
                            - !GetAtt 'KMSKey.Arn'
                            - !GetAtt 'KMSKeyReplica.Arn'
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          DbClusterSecurityGroup:
            DependsOn:
              - DbProxySecurityGroup
            Properties:
              GroupDescription: RDS Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from In-Region Lambda Functions
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                  ToPort: 5432
                - Description: DB Access from In-Region RDS Proxy
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Ref 'DbProxySecurityGroup'
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneACidr'
                    - !Ref 'PrimaryPrivateSubnetZoneACidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - a
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneBCidr'
                    - !Ref 'PrimaryPrivateSubnetZoneBCidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - b
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalVpcId}}
            Type: AWS::EC2::SecurityGroup
          DbProxyRole:
            DependsOn:
              - AppDbAdminSecret
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - rds.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AdministratorAccess
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Ref 'AppDbAdminSecret'
                  PolicyName: main-policy
            Type: AWS::IAM::Role
          DbProxySecurityGroup:
            Properties:
              GroupDescription: RDS Proxy Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - Description: DB Access from Lambda
                  FromPort: 5432
                  IpProtocol: tcp
                  SourceSecurityGroupId: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneACidr'
                    - !Ref 'PrimaryPrivateSubnetZoneACidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - a
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
                - CidrIp: !If
                    - IsPrimaryRegion
                    - !Ref 'FailoverPrivateSubnetZoneBCidr'
                    - !Ref 'PrimaryPrivateSubnetZoneBCidr'
                  Description: !Join
                    - ''
                    - - 'DB Access from Lambda Functions in '
                      - !If
                        - IsPrimaryRegion
                        - !Ref 'FailoverRegionName'
                        - !Ref 'PrimaryRegionName'
                      - b
                  FromPort: 5432
                  IpProtocol: tcp
                  ToPort: 5432
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalVpcId}}
            Type: AWS::EC2::SecurityGroup
          DemoDatabasePreparerResource:
            Condition: IsPrimaryRegion
            DependsOn:
              - DatabasePreparerLogGroup
              - DemoDbAdminSecret
              - PrimaryDemoInstance1
              - PrimaryDemoInstance2
            Properties:
              Properties:
                DatabaseIdentifier: Demo
                QueriesToExecute:
                  - "\n                    CREATE TABLE IF NOT EXISTS dataclient (\n                        guid character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n                        primary_region\
                    \ integer NOT NULL,\n                        failover_region integer NOT NULL,\n                        http_code integer,\n                        insertedon time without time zone\n      \
                    \              );\n                    "
                  - "\n                    CREATE TABLE IF NOT EXISTS failoverevents (\n                        event integer NOT NULL,\n                        insertedon timestamp without time zone NOT NULL\n\
                    \                    );\n                    "
              ServiceToken: !GetAtt 'DatabasePreparer.Arn'
              Type: Custom::ExecuteQueriesAgainstDatabase
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          DemoDbAdminSecret:
            Properties:
              Description: !Join
                - ''
                - - 'Primary Demo DB Cluster Admin Account for '
                  - !Ref 'MainStackName'
              ReplicaRegions:
                - Region: !Ref 'FailoverRegionName'
              SecretString: !Join
                - ''
                - - '{"username": "'
                  - !Ref 'DatabaseAdminUsername'
                  - '", "password": "'
                  - !Ref 'DatabaseAdminPassword'
                  - '", "database": "template1"}'
            Type: AWS::SecretsManager::Secret
          DemoDbSubnetGroup:
            Properties:
              DBSubnetGroupDescription: Demo Database Subnets
              DBSubnetGroupName: !Join
                - ''
                - - !Ref 'AWS::StackName'
                  - !Join
                    - ''
                    - !Split
                      - subnet-
                      - !Join
                        - '-'
                        - - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Private
                              - SubnetZoneAId}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /
                              - Private
                              - SubnetZoneAId}}
              SubnetIds:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Private
                    - SubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /
                    - Private
                    - SubnetZoneBId}}
            Type: AWS::RDS::DBSubnetGroup
          GlobalAppCluster:
            Condition: IsPrimaryRegion
            DependsOn:
              - AppDbSubnetGroup
              - PrimaryAppCluster
            Properties:
              DeletionProtection: false
              SourceDBClusterIdentifier: !Ref 'PrimaryAppCluster'
            Type: AWS::RDS::GlobalCluster
          GlobalAppDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Global App DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - GlobalAppDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'GlobalAppCluster'
            Type: AWS::SSM::Parameter
          GlobalDemoCluster:
            Condition: IsPrimaryRegion
            DependsOn:
              - DemoDbSubnetGroup
              - PrimaryDemoCluster
            Properties:
              DeletionProtection: false
              SourceDBClusterIdentifier: !Ref 'PrimaryDemoCluster'
            Type: AWS::RDS::GlobalCluster
          GlobalDemoDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Global Demo DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - GlobalDemoDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'GlobalDemoCluster'
            Type: AWS::SSM::Parameter
          KMSKey:
            Condition: IsPrimaryRegion
            Properties:
              Description: !Join
                - ''
                - - 'Muli-Region KMS Key for '
                  - !Ref 'AWS::StackName'
              EnableKeyRotation: true
              Enabled: true
              KeyPolicy:
                Id: default-key-policy
                Statement:
                  - Action: kms:*
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:aws:iam::'
                          - !Ref 'AWS::AccountId'
                          - :root
                    Resource: '*'
                    Sid: Enable IAM User Permissions
                Version: '2012-10-17'
              MultiRegion: true
            Type: AWS::KMS::Key
          KMSKeyReplica:
            Condition: IsFailoverRegion
            Properties:
              Enabled: true
              KeyPolicy:
                Id: default-key-policy
                Statement:
                  - Action: kms:*
                    Effect: Allow
                    Principal:
                      AWS: !Join
                        - ''
                        - - 'arn:aws:iam::'
                          - !Ref 'AWS::AccountId'
                          - :root
                    Resource: '*'
                    Sid: Enable IAM User Permissions
                Version: '2012-10-17'
              PrimaryKeyArn: !GetAtt 'PrimaryRegionCmkRetriever.RegionalKmsKeyArn'
            Type: AWS::KMS::ReplicaKey
          PrimaryAppCluster:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - AppDbSubnetGroup
            Properties:
              BackupRetentionPeriod: 30
              DBSubnetGroupName: !Ref 'AppDbSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '13.18'
              KmsKeyId: !If
                - IsPrimaryRegion
                - !Ref 'KMSKey'
                - !Ref 'KMSKeyReplica'
              MasterUserPassword: !Ref 'DatabaseAdminPassword'
              MasterUsername: !Ref 'DatabaseAdminUsername'
              Port: 5432
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'DbClusterSecurityGroup'
            Type: AWS::RDS::DBCluster
          PrimaryAppDbAdminSecretAttachment:
            Condition: IsPrimaryRegion
            DependsOn:
              - AppDbAdminSecret
              - PrimaryAppCluster
            Properties:
              SecretId: !Ref 'AppDbAdminSecret'
              TargetId: !Ref 'PrimaryAppCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          PrimaryAppInstance1:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'PrimaryAppCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
            Type: AWS::RDS::DBInstance
          PrimaryAppInstance2:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'PrimaryAppCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
            Type: AWS::RDS::DBInstance
          PrimaryDemoCluster:
            Condition: IsPrimaryRegion
            DeletionPolicy: Delete
            DependsOn:
              - DemoDbSubnetGroup
            Properties:
              BackupRetentionPeriod: 30
              DBSubnetGroupName: !Ref 'DemoDbSubnetGroup'
              DeletionProtection: false
              EnableIAMDatabaseAuthentication: false
              Engine: aurora-postgresql
              EngineMode: provisioned
              EngineVersion: '13.18'
              KmsKeyId: !If
                - IsPrimaryRegion
                - !Ref 'KMSKey'
                - !Ref 'KMSKeyReplica'
              MasterUserPassword: !Ref 'DatabaseAdminPassword'
              MasterUsername: !Ref 'DatabaseAdminUsername'
              Port: 5432
              StorageEncrypted: true
              VpcSecurityGroupIds:
                - !Ref 'DbClusterSecurityGroup'
            Type: AWS::RDS::DBCluster
          PrimaryDemoDbAdminSecretAttachment:
            Condition: IsPrimaryRegion
            DependsOn:
              - DemoDbAdminSecret
              - PrimaryDemoCluster
            Properties:
              SecretId: !Ref 'DemoDbAdminSecret'
              TargetId: !Ref 'PrimaryDemoCluster'
              TargetType: AWS::RDS::DBCluster
            Type: AWS::SecretsManager::SecretTargetAttachment
          PrimaryDemoInstance1:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'PrimaryDemoCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
            Type: AWS::RDS::DBInstance
          PrimaryDemoInstance2:
            Condition: IsPrimaryRegion
            DependsOn: []
            Properties:
              AllowMajorVersionUpgrade: false
              AutoMinorVersionUpgrade: true
              DBClusterIdentifier: !Ref 'PrimaryDemoCluster'
              DBInstanceClass: db.r6g.large
              EnablePerformanceInsights: false
              Engine: aurora-postgresql
              MultiAZ: false
            Type: AWS::RDS::DBInstance
          PrimaryRegionCmkRetriever:
            Condition: IsFailoverRegion
            Properties:
              Properties:
                ExportPrefix: !Ref 'MainStackName'
                Region: !Ref 'PrimaryRegionName'
                Version: 1.05
              ServiceToken: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalCfnExportRetrieverArn}}
              Type: Custom::GetCFNExports
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          RegionalAppDbAdminSecretArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Admin Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbAdminSecretArn
              Tier: Standard
              Type: String
              Value: !Ref 'AppDbAdminSecret'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional App DB Cluster ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryAppCluster.DBClusterArn'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional App DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'PrimaryAppCluster'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Reader Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryAppCluster.ReadEndpoint.Address'
            Type: AWS::SSM::Parameter
          RegionalAppDbClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Cluster Writer Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryAppCluster.Endpoint.Address'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxy.DBProxyArn'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyNameParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'App DB Proxy name for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyName
              Tier: Standard
              Type: String
              Value: !Ref 'AppDbProxy'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyPortParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy port for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyPort
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryAppCluster.Endpoint.Port'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy reader endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'
            Type: AWS::SSM::Parameter
          RegionalAppDbProxyWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'RDS Proxy writer endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalAppDbProxyWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'AppDbProxy.Endpoint'
            Type: AWS::SSM::Parameter
          RegionalDemoDbAdminSecretArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Admin Secret ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbAdminSecretArn
              Tier: Standard
              Type: String
              Value: !Ref 'DemoDbAdminSecret'
            Type: AWS::SSM::Parameter
          RegionalDemoDbClusterArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional Demo DB Cluster ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbClusterArn
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryDemoCluster.DBClusterArn'
            Type: AWS::SSM::Parameter
          RegionalDemoDbClusterIdentifierParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional Demo DB Cluster Identifier for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbClusterIdentifier
              Tier: Standard
              Type: String
              Value: !Ref 'PrimaryDemoCluster'
            Type: AWS::SSM::Parameter
          RegionalDemoDbClusterReaderEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Reader Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbClusterReaderEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryDemoCluster.ReadEndpoint.Address'
            Type: AWS::SSM::Parameter
          RegionalDemoDbClusterWriterEndpointParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Demo DB Cluster Writer Endpoint for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalDemoDbClusterWriterEndpoint
              Tier: Standard
              Type: String
              Value: !GetAtt 'PrimaryDemoCluster.Endpoint.Address'
            Type: AWS::SSM::Parameter
          RegionalKmsKeyArnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'Regional KMS Key ARN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - RegionalKmsKeyArn
              Tier: Standard
              Type: String
              Value: !If
                - IsPrimaryRegion
                - !GetAtt 'KMSKey.Arn'
                - !GetAtt 'KMSKeyReplica.Arn'
            Type: AWS::SSM::Parameter
        Transform:
          Name: AWS::SecretsManager-2020-07-23
    Type: AWS::CloudFormation::StackSet
  PrimaryVpcIdRetriever:
    DependsOn:
      - NetworkingStackSet
      - CfnExportRetrieverLogGroup
    Properties:
      Properties:
        ExportPrefix: !Ref 'AWS::StackName'
        Region: !Ref 'PrimaryRegionName'
        Version: 1.06
      ServiceToken: !GetAtt 'CfnExportRetriever.Arn'
      Type: Custom::GetCFNExports
      Version: '1.0'
    Type: AWS::CloudFormation::CustomResource
  StackSetAdministrationRole:
    DeletionPolicy: Retain
    DependsOn:
      - StackSetExecutionRole
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource:
                  - !GetAtt 'StackSetExecutionRole.Arn'
          PolicyName: main-policy
    Type: AWS::IAM::Role
  StackSetExecutionRole:
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                - !Ref 'AWS::AccountId'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
    Type: AWS::IAM::Role
  VPCPeeringStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - NetworkingStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - VPC-Peering
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 1
        RegionConcurrencyType: SEQUENTIAL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
        - ParameterKey: PrimaryVpcId
          ParameterValue: !GetAtt 'PrimaryVpcIdRetriever.RegionalVpcId'
        - ParameterKey: FailoverVpcId
          ParameterValue: !GetAtt 'FailoverVpcIdRetriever.RegionalVpcId'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - VPC-Peering
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          PeeringConnectionIdExport:
            Condition: IsPrimaryRegion
            Export:
              Name: !Join
                - ''
                - - !Ref 'MainStackName'
                  - -PeeringConnectionId
            Value: !Ref 'PeeringInvitation'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          FailoverVpcId:
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PrimaryVpcId:
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          PeeringInvitation:
            Condition: IsPrimaryRegion
            Properties:
              PeerOwnerId: !Ref 'AWS::AccountId'
              PeerRegion: !Ref 'FailoverRegionName'
              PeerVpcId: !Ref 'FailoverVpcId'
              Tags:
                - Key: Name
                  Value: !Join
                    - ''
                    - - !Ref 'MainStackName'
                      - '-'
                      - !Ref 'FailoverRegionName'
              VpcId: !Ref 'PrimaryVpcId'
            Type: AWS::EC2::VPCPeeringConnection
          PrimaryRegionPeeringConnectionIdRetriever:
            Condition: IsFailoverRegion
            Properties:
              Properties:
                ExportPrefix: !Ref 'MainStackName'
                Region: !Ref 'PrimaryRegionName'
                Version: 1.05
              ServiceToken: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalCfnExportRetrieverArn}}
              Type: Custom::GetCFNExports
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          ZoneARouteToFailoverRegion:
            Condition: IsPrimaryRegion
            DependsOn:
              - PeeringInvitation
            Properties:
              DestinationCidrBlock: !Ref 'FailoverVpcCidr'
              RouteTableId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /PrivateRouteTableZone
                  - A
                  - Id}}
              VpcPeeringConnectionId: !Ref 'PeeringInvitation'
            Type: AWS::EC2::Route
          ZoneARouteToPrimaryRegion:
            Condition: IsFailoverRegion
            DependsOn:
              - PrimaryRegionPeeringConnectionIdRetriever
            Properties:
              DestinationCidrBlock: !Ref 'PrimaryVpcCidr'
              RouteTableId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /PrivateRouteTableZone
                  - A
                  - Id}}
              VpcPeeringConnectionId: !GetAtt 'PrimaryRegionPeeringConnectionIdRetriever.PeeringConnectionId'
            Type: AWS::EC2::Route
          ZoneBRouteToFailoverRegion:
            Condition: IsPrimaryRegion
            DependsOn:
              - PeeringInvitation
            Properties:
              DestinationCidrBlock: !Ref 'FailoverVpcCidr'
              RouteTableId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /PrivateRouteTableZone
                  - B
                  - Id}}
              VpcPeeringConnectionId: !Ref 'PeeringInvitation'
            Type: AWS::EC2::Route
          ZoneBRouteToPrimaryRegion:
            Condition: IsFailoverRegion
            DependsOn:
              - PrimaryRegionPeeringConnectionIdRetriever
            Properties:
              DestinationCidrBlock: !Ref 'PrimaryVpcCidr'
              RouteTableId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /PrivateRouteTableZone
                  - B
                  - Id}}
              VpcPeeringConnectionId: !GetAtt 'PrimaryRegionPeeringConnectionIdRetriever.PeeringConnectionId'
            Type: AWS::EC2::Route
    Type: AWS::CloudFormation::StackSet
  WebsiteStackSet:
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdministrationRole
      - CustomResourcesStackSet
      - NetworkingStackSet
      - PrimaryDatabasesStackSet
      - FailoverDatabasesStackSet
    Properties:
      AdministrationRoleARN: !GetAtt 'StackSetAdministrationRole.Arn'
      CallAs: SELF
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: Multi-Region RDS - Website
      ExecutionRoleName: !Ref 'StackSetExecutionRole'
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: MainStackName
          ParameterValue: !Ref 'AWS::StackName'
        - ParameterKey: DatabaseAdminUsername
          ParameterValue: !Ref 'DatabaseAdminUsername'
        - ParameterKey: DatabaseAdminPassword
          ParameterValue: !Ref 'DatabaseAdminPassword'
        - ParameterKey: PrimaryRegionName
          ParameterValue: !Ref 'PrimaryRegionName'
        - ParameterKey: PrimaryVpcCidr
          ParameterValue: !Ref 'PrimaryVpcCidr'
        - ParameterKey: PrimaryPublicSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneACidr'
        - ParameterKey: PrimaryPublicSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPublicSubnetZoneBCidr'
        - ParameterKey: PrimaryPrivateSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneACidr'
        - ParameterKey: PrimaryPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryPrivateSubnetZoneBCidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneACidr'
        - ParameterKey: PrimaryDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'PrimaryDatabaseSubnetZoneBCidr'
        - ParameterKey: FailoverRegionName
          ParameterValue: !Ref 'FailoverRegionName'
        - ParameterKey: FailoverVpcCidr
          ParameterValue: !Ref 'FailoverVpcCidr'
        - ParameterKey: FailoverPublicSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneACidr'
        - ParameterKey: FailoverPublicSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPublicSubnetZoneBCidr'
        - ParameterKey: FailoverPrivateSubnetZoneACidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneACidr'
        - ParameterKey: FailoverPrivateSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverPrivateSubnetZoneBCidr'
        - ParameterKey: FailoverDatabaseSubnetZoneACidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneACidr'
        - ParameterKey: FailoverDatabaseSubnetZoneBCidr
          ParameterValue: !Ref 'FailoverDatabaseSubnetZoneBCidr'
        - ParameterKey: PublicFqdn
          ParameterValue: !Ref 'PublicFqdn'
        - ParameterKey: PublicHostedZoneId
          ParameterValue: !Ref 'PublicHostedZoneId'
        - ParameterKey: CodeDownloadUrl
          ParameterValue: !Ref 'CodeDownloadUrl'
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref 'AWS::AccountId'
          Regions:
            - !Ref 'PrimaryRegionName'
            - !Ref 'FailoverRegionName'
      StackSetName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - Website
      TemplateBody: |
        Conditions:
          IsFailoverRegion: !Not
            - !Equals
              - !Ref 'PrimaryRegionName'
              - !Ref 'AWS::Region'
          IsPrimaryRegion: !Equals
            - !Ref 'PrimaryRegionName'
            - !Ref 'AWS::Region'
        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups: []
            ParameterLabels: {}
          Comments: ''
          CreatedBy: Carter Meyers (AWS)
          Description: This application deploys a Global RDS Aurora cluster.
          LastUpdated: September 25, 2024
          Version: v2.11
        Outputs:
          WebLoadBalancerFqdn:
            Condition: ''
            Value: !GetAtt 'Alb.DNSName'
          WebLoadBalancerHostedZoneId:
            Condition: ''
            Value: !GetAtt 'Alb.CanonicalHostedZoneID'
        Parameters:
          CodeDownloadUrl:
            Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main
            Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.
            Type: String
          DatabaseAdminPassword:
            Description: The password to be used for the RDS Aurora admin account.
            NoEcho: true
            Type: String
          DatabaseAdminUsername:
            Description: The username to be used for the RDS Aurora admin account.
            Type: String
          FailoverDatabaseSubnetZoneACidr:
            Default: 10.10.10.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          FailoverDatabaseSubnetZoneBCidr:
            Default: 10.10.13.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          FailoverPrivateSubnetZoneACidr:
            Default: 10.10.9.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          FailoverPrivateSubnetZoneBCidr:
            Default: 10.10.12.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          FailoverPublicSubnetZoneACidr:
            Default: 10.10.8.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          FailoverPublicSubnetZoneBCidr:
            Default: 10.10.11.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          FailoverRegionName:
            Default: us-east-2
            Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          FailoverVpcCidr:
            Default: 10.10.8.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          MainStackName:
            Type: String
          PrimaryDatabaseSubnetZoneACidr:
            Default: 10.10.2.0/24
            Description: The CIDR range you wish to use for your primary database subnet.
            Type: String
          PrimaryDatabaseSubnetZoneBCidr:
            Default: 10.10.5.0/24
            Description: The CIDR range you wish to use for your failover database subnet.
            Type: String
          PrimaryPrivateSubnetZoneACidr:
            Default: 10.10.1.0/24
            Description: The CIDR range you wish to use for your primary private subnet.
            Type: String
          PrimaryPrivateSubnetZoneBCidr:
            Default: 10.10.4.0/24
            Description: The CIDR range you wish to use for your failover private subnet.
            Type: String
          PrimaryPublicSubnetZoneACidr:
            Default: 10.10.0.0/24
            Description: The CIDR range you wish to use for your primary public subnet.
            Type: String
          PrimaryPublicSubnetZoneBCidr:
            Default: 10.10.3.0/24
            Description: The CIDR range you wish to use for your failover public subnet.
            Type: String
          PrimaryRegionName:
            Default: us-east-1
            Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.
            Type: String
          PrimaryVpcCidr:
            Default: 10.10.0.0/21
            Description: The CIDR range you wish to use for your VPC.
            Type: String
          PublicFqdn:
            Description: >-
              The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS
              record currently defined in the corresponding Route 53 Hosted Zone.
            Type: String
          PublicHostedZoneId:
            Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.
            Type: String
        Resources:
          Alb:
            DependsOn:
              - AlbSecurityGroup
            Properties:
              IpAddressType: ipv4
              Scheme: internet-facing
              SecurityGroups:
                - !Ref 'AlbSecurityGroup'
              Subnets:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PublicSubnetZoneAId}}
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /PublicSubnetZoneBId}}
              Type: application
            Type: AWS::ElasticLoadBalancingV2::LoadBalancer
          AlbDnsDeleter:
            Condition: IsPrimaryRegion
            Properties:
              Properties:
                Fqdns:
                  - !Ref 'PublicFqdn'
                HostedZoneId: !Ref 'PublicHostedZoneId'
              ServiceToken: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalDnsRecordDeleterArn}}
              Type: Custom::DeployLambdaLayer
              Version: '1.0'
            Type: AWS::CloudFormation::CustomResource
          AlbSecurityGroup:
            Properties:
              GroupDescription: ALB Security Group
              SecurityGroupEgress: []
              SecurityGroupIngress:
                - CidrIp: '0.0.0.0/0'
                  Description: IPv4 HTTP Access from Internet
                  FromPort: 80
                  IpProtocol: tcp
                  ToPort: 80
                - CidrIp: '0.0.0.0/0'
                  Description: IPv4 HTTPS Access from Internet
                  FromPort: 443
                  IpProtocol: tcp
                  ToPort: 443
              VpcId: !Join
                - ''
                - - '{{resolve:ssm:/'
                  - !Ref 'MainStackName'
                  - /RegionalVpcId}}
            Type: AWS::EC2::SecurityGroup
          DnsRecord:
            Condition: IsPrimaryRegion
            DeletionPolicy: Retain
            DependsOn:
              - Alb
            Properties:
              HostedZoneId: !Ref 'PublicHostedZoneId'
              RecordSets:
                - AliasTarget:
                    DNSName: !GetAtt 'Alb.DNSName'
                    EvaluateTargetHealth: false
                    HostedZoneId: !GetAtt 'Alb.CanonicalHostedZoneID'
                  Name: !Ref 'PublicFqdn'
                  Type: A
            Type: AWS::Route53::RecordSetGroup
          Port443AlbListener:
            DependsOn:
              - TlsCertificate
              - WebsiteTargetGroup
            Properties:
              Certificates:
                - CertificateArn: !Ref 'TlsCertificate'
              DefaultActions:
                - TargetGroupArn: !Ref 'WebsiteTargetGroup'
                  Type: forward
              LoadBalancerArn: !Ref 'Alb'
              Port: 443
              Protocol: HTTPS
            Type: AWS::ElasticLoadBalancingV2::Listener
          Port80AlbListener:
            DependsOn:
              - Alb
            Properties:
              DefaultActions:
                - RedirectConfig:
                    Host: '#{host}'
                    Path: /#{path}
                    Port: '443'
                    Protocol: HTTPS
                    Query: '#{query}'
                    StatusCode: HTTP_301
                  Type: redirect
              LoadBalancerArn: !Ref 'Alb'
              Port: 80
              Protocol: HTTP
            Type: AWS::ElasticLoadBalancingV2::Listener
          TlsCertificate:
            Properties:
              DomainName: !Ref 'PublicFqdn'
              DomainValidationOptions:
                - DomainName: !Ref 'PublicFqdn'
                  HostedZoneId: !Ref 'PublicHostedZoneId'
              ValidationMethod: DNS
            Type: AWS::CertificateManager::Certificate
          WebLoadBalancerFqdnParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ALB FQDN for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - WebLoadBalancerFqdn
              Tier: Standard
              Type: String
              Value: !GetAtt 'Alb.DNSName'
            Type: AWS::SSM::Parameter
          WebLoadBalancerHostedZoneIdParam:
            Condition: ''
            Properties:
              Description: !Join
                - ''
                - - 'ALB Hosted Zone ID for '
                  - !Ref 'AWS::StackName'
                  - ' stack'
              Name: !Join
                - ''
                - - /
                  - !Ref 'MainStackName'
                  - /
                  - WebLoadBalancerHostedZoneId
              Tier: Standard
              Type: String
              Value: !GetAtt 'Alb.CanonicalHostedZoneID'
            Type: AWS::SSM::Parameter
          Website:
            DependsOn:
              - WebsiteRole
            Properties:
              Architectures:
                - x86_64
              Code:
                ZipFile: "import sys\nsys.path.append('/opt')\n\nimport os\nimport json\nimport boto3\nimport datetime\nimport psycopg2\nimport dateutil.tz\nimport multi_region_db\nfrom botocore.exceptions import\
                  \ ClientError as boto3_client_error\n\ncustom_functions = multi_region_db.Functions()\n\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    http_status_code = 200\n  \
                  \  \n    app_db_credentials = custom_functions.get_db_credentials('App')\n    \n    db_conn = psycopg2.connect(\n        host = os.environ['REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT'],\n       \
                  \ port = app_db_credentials['port'],\n        user = app_db_credentials['username'],\n        password = app_db_credentials['password'],\n        database = app_db_credentials['database'],\n \
                  \       connect_timeout = 3,\n        sslmode = 'require',\n    )\n    \n    if 'Amazon-Route53-Health-Check-Service' in event['headers']['user-agent']:\n        \n        try:\n        \n   \
                  \         with db_conn:\n                with db_conn.cursor() as curs:\n                    curs.execute('SELECT NOW()')\n                    results = curs.fetchall()\n                    db_conn.commit()\n\
                  \                    \n        except Exception as e:\n            http_status_code = 500\n            print(e)\n            print('Failed to Establish DB Connection')\n    \n    else:\n     \
                  \       \n        try: \n            \n            guid = event['queryStringParameters']['guid']\n\n            eastern = dateutil.tz.gettz('US/Eastern')\n\n            sql_statement = \"INSERT\
                  \ INTO dataserver (guid, insertedon) VALUES ('\" + str(guid) + \"','\" + datetime.datetime.now(tz = eastern).strftime(\"%m/%d/%Y %H:%M:%S\") + \"') RETURNING id\"\n            \n            id\
                  \ = 0\n            http_status_code = 200\n            curs = db_conn.cursor()\n            curs.execute(sql_statement)\n            id = curs.fetchone()[0]\n            print(id)\n          \
                  \  db_conn.commit()\n            curs.close()\n            db_conn.close()\n            \n        except Exception as e:\n            http_status_code = 500\n            print(e)\n           \
                  \ \n    return {\n        'statusCode': http_status_code,\n        'headers': {\n            'Content-Type': 'text/html'\n        },\n        'body': os.environ['AWS_REGION']\n    }"
              Description: Serves as the root handler behind the Web ALB
              Environment:
                Variables:
                  REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbClusterWriterEndpoint}}
                  REGIONAL_APP_DB_SECRET_ARN: !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /RegionalAppDbAdminSecretArn}}
              Handler: index.handler
              Layers:
                - !Join
                  - ''
                  - - '{{resolve:ssm:/'
                    - !Ref 'MainStackName'
                    - /RegionalLambdaLayerVersionArn}}
              MemorySize: 128
              Role: !GetAtt 'WebsiteRole.Arn'
              Runtime: python3.11
              Timeout: 15
              TracingConfig:
                Mode: PassThrough
              VpcConfig:
                SecurityGroupIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /LambdaSecurityGroupId}}
                SubnetIds:
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneAId}}
                  - !Join
                    - ''
                    - - '{{resolve:ssm:/'
                      - !Ref 'MainStackName'
                      - /PrivateSubnetZoneBId}}
            Type: AWS::Lambda::Function
          WebsiteLogGroup:
            DeletionPolicy: Delete
            DependsOn:
              - Website
            Properties:
              LogGroupName: !Join
                - ''
                - - /aws/lambda/
                  - !Ref 'Website'
              RetentionInDays: 30
            Type: AWS::Logs::LogGroup
          WebsiteRole:
            DependsOn: []
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                  - Action:
                      - sts:AssumeRole
                    Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
              ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              MaxSessionDuration: 3600
              Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - secretsmanager:GetSecretValue
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalAppDbAdminSecretArn}}
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalDemoDbAdminSecretArn}}
                        Sid: GetRDSAdminSecret
                      - Action:
                          - kms:Decrypt
                        Effect: Allow
                        Resource:
                          - !Join
                            - ''
                            - - '{{resolve:ssm:/'
                              - !Ref 'MainStackName'
                              - /RegionalKmsKeyArn}}
                        Sid: DecryptWithKMS
                  PolicyName: database-secret-retrieval
            Type: AWS::IAM::Role
          WebsiteTargetGroup:
            DependsOn:
              - Website
              - WebsiteTargetGroupPermission
            Properties:
              HealthCheckEnabled: false
              Matcher:
                HttpCode: '200'
              TargetType: lambda
              Targets:
                - Id: !GetAtt 'Website.Arn'
            Type: AWS::ElasticLoadBalancingV2::TargetGroup
          WebsiteTargetGroupPermission:
            DependsOn:
              - Website
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref 'Website'
              Principal: elasticloadbalancing.amazonaws.com
              SourceAccount: !Ref 'AWS::AccountId'
            Type: AWS::Lambda::Permission
    Type: AWS::CloudFormation::StackSet
