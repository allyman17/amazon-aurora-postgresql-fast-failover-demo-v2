{
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "Codebase"
     },
     "Parameters": [
      "CodeDownloadUrl"
     ]
    },
    {
     "Label": {
      "default": "Accessibility"
     },
     "Parameters": [
      "PublicHostedZoneId",
      "PublicFqdn"
     ]
    },
    {
     "Label": {
      "default": "Database"
     },
     "Parameters": [
      "DatabaseAdminUsername",
      "DatabaseAdminPassword"
     ]
    },
    {
     "Label": {
      "default": "Primary Region"
     },
     "Parameters": [
      "PrimaryRegionName",
      "PrimaryVpcCidr",
      "PrimaryPublicSubnetZoneACidr",
      "PrimaryPublicSubnetZoneBCidr",
      "PrimaryPrivateSubnetZoneACidr",
      "PrimaryPrivateSubnetZoneBCidr",
      "PrimaryDatabaseSubnetZoneACidr",
      "PrimaryDatabaseSubnetZoneBCidr"
     ]
    },
    {
     "Label": {
      "default": "Failover Region"
     },
     "Parameters": [
      "FailoverRegionName",
      "FailoverVpcCidr",
      "FailoverPublicSubnetZoneACidr",
      "FailoverPublicSubnetZoneBCidr",
      "FailoverPrivateSubnetZoneACidr",
      "FailoverPrivateSubnetZoneBCidr",
      "FailoverDatabaseSubnetZoneACidr",
      "FailoverDatabaseSubnetZoneBCidr"
     ]
    }
   ],
   "ParameterLabels": {
    "CodeDownloadUrl": {
     "default": "Download URL"
    },
    "DatabaseAdminPassword": {
     "default": "Admin Password"
    },
    "DatabaseAdminUsername": {
     "default": "Admin Username"
    },
    "FailoverDatabaseSubnetZoneACidr": {
     "default": "Failover Region Database Subnet Zone A CIDR"
    },
    "FailoverDatabaseSubnetZoneBCidr": {
     "default": "Failover Region Database Subnet Zone B CIDR"
    },
    "FailoverPrivateSubnetZoneACidr": {
     "default": "Failover Region Private Subnet Zone A CIDR"
    },
    "FailoverPrivateSubnetZoneBCidr": {
     "default": "Failover Region Private Subnet Zone B CIDR"
    },
    "FailoverPublicSubnetZoneACidr": {
     "default": "Failover Region Public Subnet Zone A CIDR"
    },
    "FailoverPublicSubnetZoneBCidr": {
     "default": "Failover Region Public Subnet Zone B CIDR"
    },
    "FailoverRegionName": {
     "default": "Failover Region Name"
    },
    "FailoverVpcCidr": {
     "default": "Failover Region VPC CIDR"
    },
    "PrimaryDatabaseSubnetZoneACidr": {
     "default": "Primary Region Database Subnet Zone A CIDR"
    },
    "PrimaryDatabaseSubnetZoneBCidr": {
     "default": "Primary Region Database Subnet Zone B CIDR"
    },
    "PrimaryPrivateSubnetZoneACidr": {
     "default": "Primary Region Private Subnet Zone A CIDR"
    },
    "PrimaryPrivateSubnetZoneBCidr": {
     "default": "Primary Region Private Subnet Zone B CIDR"
    },
    "PrimaryPublicSubnetZoneACidr": {
     "default": "Primary Region Public Subnet Zone A CIDR"
    },
    "PrimaryPublicSubnetZoneBCidr": {
     "default": "Primary Region Public Subnet Zone B CIDR"
    },
    "PrimaryRegionName": {
     "default": "Primary Region Name"
    },
    "PrimaryVpcCidr": {
     "default": "Primary Region VPC CIDR"
    },
    "PublicFqdn": {
     "default": "Public Service FQDN"
    },
    "PublicHostedZoneId": {
     "default": "Public Hosted Zone ID"
    }
   }
  },
  "Comments": "",
  "CreatedBy": "Carter Meyers (AWS)",
  "Description": "This application deploys a Global RDS Aurora cluster.",
  "LastUpdated": "September 25, 2024",
  "Version": "v2.11"
 },
 "Outputs": {
  "CrossRegionFailoverDemoUrl": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "FinalExportRetriever",
        "CustomCloudFrontDashboardEndpoint"
       ]
      },
      "/cross-region-failover.html",
      {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Join": [
           "",
           [
            {
             "Fn::Join": [
              "",
              [
               "?apiHost=",
               {
                "Fn::GetAtt": [
                 "FinalExportRetriever",
                 "CustomApiEndpoint"
                ]
               }
              ]
             ]
            },
            "&primaryRegion=",
            {
             "Ref": "PrimaryRegionName"
            }
           ]
          ]
         },
         "&failoverRegion=",
         {
          "Ref": "FailoverRegionName"
         }
        ]
       ]
      }
     ]
    ]
   }
  },
  "InRegionFailoverDemoUrl": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "FinalExportRetriever",
        "CustomCloudFrontDashboardEndpoint"
       ]
      },
      "/in-region-failover.html",
      {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Join": [
           "",
           [
            {
             "Fn::Join": [
              "",
              [
               "?apiHost=",
               {
                "Fn::GetAtt": [
                 "FinalExportRetriever",
                 "CustomApiEndpoint"
                ]
               }
              ]
             ]
            },
            "&primaryRegion=",
            {
             "Ref": "PrimaryRegionName"
            }
           ]
          ]
         },
         "&failoverRegion=",
         {
          "Ref": "FailoverRegionName"
         }
        ]
       ]
      }
     ]
    ]
   }
  }
 },
 "Parameters": {
  "CodeDownloadUrl": {
   "Default": "https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main",
   "Description": "The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.",
   "Type": "String"
  },
  "DatabaseAdminPassword": {
   "Description": "The password to be used for the RDS Aurora admin account.",
   "NoEcho": true,
   "Type": "String"
  },
  "DatabaseAdminUsername": {
   "Description": "The username to be used for the RDS Aurora admin account.",
   "Type": "String"
  },
  "FailoverDatabaseSubnetZoneACidr": {
   "Default": "10.10.10.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "FailoverDatabaseSubnetZoneBCidr": {
   "Default": "10.10.13.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "FailoverPrivateSubnetZoneACidr": {
   "Default": "10.10.9.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "FailoverPrivateSubnetZoneBCidr": {
   "Default": "10.10.12.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "FailoverPublicSubnetZoneACidr": {
   "Default": "10.10.8.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "FailoverPublicSubnetZoneBCidr": {
   "Default": "10.10.11.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "FailoverRegionName": {
   "Default": "us-east-2",
   "Description": "The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.",
   "Type": "String"
  },
  "FailoverVpcCidr": {
   "Default": "10.10.8.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "PrimaryDatabaseSubnetZoneACidr": {
   "Default": "10.10.2.0/24",
   "Description": "The CIDR range you wish to use for your primary database subnet.",
   "Type": "String"
  },
  "PrimaryDatabaseSubnetZoneBCidr": {
   "Default": "10.10.5.0/24",
   "Description": "The CIDR range you wish to use for your failover database subnet.",
   "Type": "String"
  },
  "PrimaryPrivateSubnetZoneACidr": {
   "Default": "10.10.1.0/24",
   "Description": "The CIDR range you wish to use for your primary private subnet.",
   "Type": "String"
  },
  "PrimaryPrivateSubnetZoneBCidr": {
   "Default": "10.10.4.0/24",
   "Description": "The CIDR range you wish to use for your failover private subnet.",
   "Type": "String"
  },
  "PrimaryPublicSubnetZoneACidr": {
   "Default": "10.10.0.0/24",
   "Description": "The CIDR range you wish to use for your primary public subnet.",
   "Type": "String"
  },
  "PrimaryPublicSubnetZoneBCidr": {
   "Default": "10.10.3.0/24",
   "Description": "The CIDR range you wish to use for your failover public subnet.",
   "Type": "String"
  },
  "PrimaryRegionName": {
   "Default": "us-east-1",
   "Description": "The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.",
   "Type": "String"
  },
  "PrimaryVpcCidr": {
   "Default": "10.10.0.0/21",
   "Description": "The CIDR range you wish to use for your VPC.",
   "Type": "String"
  },
  "PublicFqdn": {
   "Description": "The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS record currently defined in the corresponding Route 53 Hosted Zone.",
   "Type": "String"
  },
  "PublicHostedZoneId": {
   "Description": "The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.",
   "Type": "String"
  }
 },
 "Resources": {
  "APIDeploymentStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet",
    "APIMethods1StackSet",
    "APIMethods2StackSet",
    "APIMethods3StackSet",
    "APIMethods4StackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - API-Deployment",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "API-Deployment"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  ApiHostExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -ApiHost\n    Value: !Join\n      - ''\n      - - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /ApiId}}\n        - .execute-api.\n        - !Ref 'AWS::Region'\n        - .amazonaws.com/\n        - v1\n  CustomApiEndpointExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -CustomApiEndpoint\n    Value: !Join\n      - ''\n      - - api.\n        - !Ref 'PublicFqdn'\n  DefaultApiEndpointExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -DefaultApiEndpoint\n    Value: !GetAtt 'DomainName.RegionalDomainName'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  BasePathMapping:\n    DependsOn:\n      - DomainName\n      - Deployment\n      - DeploymentStage\n    Properties:\n      DomainName: !Join\n        - ''\n        - - api.\n          - !Ref 'PublicFqdn'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n      Stage: v1\n    Type: AWS::ApiGateway::BasePathMapping\n  Deployment:\n    Properties:\n      Description: Initial Deployment\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Deployment\n  DeploymentStage:\n    DependsOn:\n      - Deployment\n    Properties:\n      DeploymentId: !Ref 'Deployment'\n      MethodSettings:\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: GET\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n        - CachingEnabled: false\n          DataTraceEnabled: true\n          HttpMethod: POST\n          MetricsEnabled: true\n          ResourcePath: /~1\n          ThrottlingBurstLimit: '5000'\n          ThrottlingRateLimit: '10000'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n      StageName: v1\n    Type: AWS::ApiGateway::Stage\n  DnsRecord:\n    DependsOn:\n      - DomainName\n    Properties:\n      HostedZoneId: !Ref 'PublicHostedZoneId'\n      RecordSets:\n        - AliasTarget:\n            DNSName: !GetAtt 'DomainName.RegionalDomainName'\n            HostedZoneId: !GetAtt 'DomainName.RegionalHostedZoneId'\n          Name: !Join\n            - ''\n            - - api.\n              - !Ref 'PublicFqdn'\n          Type: A\n    Type: AWS::Route53::RecordSetGroup\n  DomainName:\n    DependsOn:\n      - TlsCertificate\n    Properties:\n      DomainName: !Join\n        - ''\n        - - api.\n          - !Ref 'PublicFqdn'\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      RegionalCertificateArn: !Ref 'TlsCertificate'\n    Type: AWS::ApiGateway::DomainName\n  TlsCertificate:\n    Properties:\n      DomainName: !Join\n        - ''\n        - - api.\n          - !Ref 'PublicFqdn'\n      DomainValidationOptions:\n        - DomainName: !Join\n            - ''\n            - - api.\n              - !Ref 'PublicFqdn'\n          HostedZoneId: !Ref 'PublicHostedZoneId'\n      ValidationMethod: DNS\n    Type: AWS::CertificateManager::Certificate\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIGatewayStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - API-Gateway",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "API-Gateway"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  ApiId:\n    Condition: ''\n    Value: !Ref 'Api'\n  ApiRootResourceId:\n    Condition: ''\n    Value: !GetAtt 'Api.RootResourceId'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  Api:\n    Properties:\n      Description: !Join\n        - ''\n        - - !If\n            - IsPrimaryRegion\n            - Primary\n            - Failover\n          - ' Dashboard API'\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n    Type: AWS::ApiGateway::RestApi\n  ApiIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - ApiId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'Api'\n    Type: AWS::SSM::Parameter\n  ApiRootResourceIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'API Gateway Root Resource ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - ApiRootResourceId\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'Api.RootResourceId'\n    Type: AWS::SSM::Parameter\n  DEFAULT4XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_4XX\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::GatewayResponse\n  DEFAULT5XXGatewayResponse:\n    Properties:\n      ResponseParameters:\n        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''\n      ResponseType: DEFAULT_5XX\n      RestApiId: !Ref 'Api'\n    Type: AWS::ApiGateway::GatewayResponse\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods1StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - API-Methods-1",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "API-Methods-1"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  GetClusterInfo:\n    DependsOn:\n      - GetClusterInfoRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import os\\nimport json\\nimport boto3\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    data = {}\\n    rds_client = boto3.client('rds')\\n\\n    cluster_resp\\\n          \\ = rds_client.describe_db_clusters(\\n        DBClusterIdentifier = os.environ['REGIONAL_APP_DB_CLUSTER_IDENTIFIER']\\n    )\\n        \\n    for member in cluster_resp['DBClusters'][0]['DBClusterMembers']:\\n\\\n          \\        \\n        instance_resp = rds_client.describe_db_instances(\\n            DBInstanceIdentifier = member['DBInstanceIdentifier']\\n        )\\n        \\n        data[member['DBInstanceIdentifier']]\\\n          \\ = {\\n            'az': instance_resp['DBInstances'][0]['AvailabilityZone'],\\n            'type': 'WRITER' if member['IsClusterWriter'] is True else 'READER'\\n        }\\n        \\n    return\\\n          \\ {\\n        'code': 200,\\n        'body': json.dumps(data)\\n    }\"\n      Description: Retrieves DB cluster info\n      Environment:\n        Variables:\n          REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterIdentifier}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'GetClusterInfoRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetClusterInfoLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetClusterInfo\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetClusterInfo'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetClusterInfoMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetClusterInfo.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getClusterInfo\n      ResourceId: !Ref 'GetClusterInfoResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClusterInfoMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetClusterInfo\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetClusterInfo.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - get-cluster-info\n    Type: AWS::Lambda::Permission\n  GetClusterInfoResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-cluster-info\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetClusterInfoResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetClusterInfoResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClusterInfoRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DescribeDBClusters\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbClusterArn}}\n                Sid: DescribeRDSClusters\n          PolicyName: get-db-clusters\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DescribeDBInstances\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:aws:rds:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :db*\n                Sid: DescribeDBInstances\n          PolicyName: get-db-instances\n    Type: AWS::IAM::Role\n  GetFailoverEvents:\n    DependsOn:\n      - GetFailoverEventsRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\nimport multi_region_db\\n\\ncustom_functions = multi_region_db.Functions()\\n        \\ndef handler(event, context):\\n\\\n          \\    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n\\\n          \\        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n\\\n          \\        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n        \\n    curs = db_conn.cursor()\\n    \\n    curs.execute('''\\n        SELECT \\n            event,\\n            to_char(insertedon,'HH24:MI:SS')\\\n          \\ AS time, \\n            insertedon \\n        FROM failoverevents\\n        ORDER BY insertedon\\n    ''');\\n    \\n    failover_events = curs.fetchall()\\n    \\n    curs.close()\\n    db_conn.close()\\n\\\n          \\    \\n    records_to_return = []\\n    \\n    for x in failover_events:\\n    \\n        c = 0\\n        temp2 = {}\\n        \\n        for col in curs.description:\\n            \\n            temp2.update({str(col[0]):\\\n          \\ x[c]})\\n            c += 1\\n        \\n        records_to_return.append(temp2)\\n    \\n    return {\\n        'code': 200,\\n        'body': json.dumps(records_to_return, default = str)\\n    }\"\n      Description: Retrieves failover events from the database\n      Environment:\n        Variables:\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'GetFailoverEventsRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetFailoverEventsLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetFailoverEvents\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetFailoverEvents'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetFailoverEventsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetFailoverEvents.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getFailoverEvents\n      ResourceId: !Ref 'GetFailoverEventsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetFailoverEventsMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetFailoverEvents\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetFailoverEvents.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - get-failover-events\n    Type: AWS::Lambda::Permission\n  GetFailoverEventsResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-failover-events\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetFailoverEventsResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetFailoverEventsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetFailoverEventsRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  UpdateDatabaseNacl:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - UpdateDatabaseNaclRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n\\\n          \\    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n  \\\n          \\      port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        sslmode = 'require',\\n        password = demo_db_credentials['password'],\\n        database\\\n          \\ = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n\\n    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event, insertedon) values (1,'\\\" + datetime.datetime.now(tz\\\n          \\ = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\n    try:\\n        \\n        boto3.client('ec2').replace_network_acl_entry(\\n\\\n          \\            Egress = False, \\n            CidrBlock = '0.0.0.0/0',\\n            NetworkAclId = os.environ['REGIONAL_APP_DB_NACL_ID'],\\n            Protocol = '-1',\\n            RuleAction = 'deny',\\n\\\n          \\            RuleNumber = 100\\n        )\\n        \\n    except boto3_client_error as e:\\n        raise Exception('Failed to Update Database NACL')\\n    \\n    return {\\n        'code': 200,\\n \\\n          \\       'body': json.dumps([])\\n    }\"\n      Description: Updates the database NACL to deny incoming traffic\n      Environment:\n        Variables:\n          REGIONAL_APP_DB_NACL_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDatabaseNaclId}}\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'UpdateDatabaseNaclRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  UpdateDatabaseNaclLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - UpdateDatabaseNacl\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'UpdateDatabaseNacl'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  UpdateDatabaseNaclMethod:\n    Condition: IsPrimaryRegion\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'UpdateDatabaseNacl.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getFailoverEvents\n      ResourceId: !Ref 'UpdateDatabaseNaclResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  UpdateDatabaseNaclMethodInvocationPermission:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - UpdateDatabaseNacl\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'UpdateDatabaseNacl.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - update-database-nacl\n    Type: AWS::Lambda::Permission\n  UpdateDatabaseNaclResource:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: update-database-nacl\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  UpdateDatabaseNaclResourceOptionsMethod:\n    Condition: IsPrimaryRegion\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'UpdateDatabaseNaclResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  UpdateDatabaseNaclRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  UpdateDatabaseNaclRoleCustomPolicy:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - UpdateDatabaseNaclRole\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - ec2:ReplaceNetworkAclEntry\n            Effect: Allow\n            Resource:\n              - !Join\n                - ''\n                - - 'arn:aws:ec2:'\n                  - !Ref 'AWS::Region'\n                  - ':'\n                  - !Ref 'AWS::AccountId'\n                  - :network-acl/\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDatabaseNaclId}}\n            Sid: UpdateACLEntry\n      PolicyName: custom-policy\n      Roles:\n        - !Ref 'UpdateDatabaseNaclRole'\n    Type: AWS::IAM::Policy\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods2StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - API-Methods-2",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "API-Methods-2"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  BypassRdsProxy:\n    DependsOn:\n      - BypassRdsProxyRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport multi_region_db\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n\\\n          \\    \\n    print(json.dumps(event))\\n    \\n    '''\\n        For each global database endpoint, we'll update it to point to the\\n        regional writer endpoint.\\n    '''\\n    for endpoint_type\\\n          \\ in ['READER', 'WRITER']:\\n        \\n        custom_functions.update_dns_record(\\n            fqdn            = os.environ['REGIONAL_APP_DB_' + endpoint_type + '_ENDPOINT'],\\n            new_value\\\n          \\       = os.environ['REGIONAL_APP_DB_CLUSTER_' + endpoint_type + '_ENDPOINT'],\\n            hosted_zone_id  = os.environ['PRIVATE_HOSTED_ZONE_ID'],\\n        )\\n        \\n    return {\\n      \\\n          \\  'code': 200,\\n        'records': json.dumps([])\\n    }\"\n      Description: Updates the global database endpoints to bypass the RDS proxy\n      Environment:\n        Variables:\n          REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterReaderEndpoint}}\n          REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterWriterEndpoint}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'BypassRdsProxyRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  BypassRdsProxyLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - BypassRdsProxy\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'BypassRdsProxy'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  BypassRdsProxyMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'BypassRdsProxy.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getBypassRdsProxy\n      ResourceId: !Ref 'BypassRdsProxyResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  BypassRdsProxyMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - BypassRdsProxy\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'BypassRdsProxy.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - bypass-rds-proxy\n    Type: AWS::Lambda::Permission\n  BypassRdsProxyResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: bypass-rds-proxy\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  BypassRdsProxyResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'BypassRdsProxyResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  BypassRdsProxyRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  CalculateRecoveryTime:\n    DependsOn:\n      - CalculateRecoveryTimeRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\nimport multi_region_db\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n\\\n          \\    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n\\\n          \\        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n\\\n          \\        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n        \\n    curs = db_conn.cursor()\\n    \\n    curs.execute('''\\n        SELECT\\n            DATE_PART('second', max(insertedon)::time\\\n          \\ - min(insertedon)::time) AS rto\\n        FROM dataclient \\n        WHERE http_code = 500 \\n        GROUP BY http_code\\n    ''');\\n    \\n    client_events = curs.fetchall()\\n    \\n    curs.close()\\n\\\n          \\    db_conn.close()\\n    \\n    records_to_return = []\\n    \\n    for client_event in client_events:\\n    \\n        c = 0\\n        temp2 = {}\\n        \\n        for col in curs.description:\\n\\\n          \\            \\n            temp2.update({str(col[0]): client_event[c]})\\n            c += 1\\n        \\n        records_to_return.append(temp2)\\n    \\n    return {\\n        'code': 200,\\n     \\\n          \\   'body': json.dumps(records_to_return, default = str),\\n    }\"\n      Description: Retrieves the resolved RTO\n      Environment:\n        Variables:\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'CalculateRecoveryTimeRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  CalculateRecoveryTimeLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - CalculateRecoveryTime\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'CalculateRecoveryTime'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  CalculateRecoveryTimeMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'CalculateRecoveryTime.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getRecoveryTime\n      ResourceId: !Ref 'CalculateRecoveryTimeResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  CalculateRecoveryTimeMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - CalculateRecoveryTime\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'CalculateRecoveryTime.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - calculate-recovery-time\n    Type: AWS::Lambda::Permission\n  CalculateRecoveryTimeResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: calculate-recovery-time\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  CalculateRecoveryTimeResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'CalculateRecoveryTimeResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  CalculateRecoveryTimeRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  InitiateFailover:\n    DependsOn:\n      - InitiateFailoverRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef trigger_failover():\\n    \\n    try:\\n        \\n        boto3.client('rds').failover_db_cluster(\\n \\\n          \\           DBClusterIdentifier = os.environ['REGIONAL_APP_DB_CLUSTER_IDENTIFIER']\\n        )\\n        \\n    except boto3_client_error as e:\\n        raise Exception('Failed to Initiate Cluster\\\n          \\ Failover: ' + str(e))\\n        \\ndef log_failover_event():\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n    \\n\\\n          \\    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        sslmode = 'require',\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n\\n    curs = db_conn.cursor()\\n\\\n          \\    curs.execute(\\\"INSERT INTO failoverevents (event, insertedon) values (1,'\\\" + datetime.datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n    \\n\\\n          \\    curs.close()\\n    db_conn.close()\\n    \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    trigger_failover()\\n\\n    log_failover_event()\\n    \\n    return {\\n \\\n          \\       'code': 200,\\n        'body': []\\n    }\"\n      Description: Logs failover events\n      Environment:\n        Variables:\n          REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterIdentifier}}\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'InitiateFailoverRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  InitiateFailoverLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - InitiateFailover\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'InitiateFailover'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  InitiateFailoverMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'InitiateFailover.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getInitiateFailover\n      ResourceId: !Ref 'InitiateFailoverResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  InitiateFailoverMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - InitiateFailover\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'InitiateFailover.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - initiate-failover\n    Type: AWS::Lambda::Permission\n  InitiateFailoverResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: initiate-failover\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  InitiateFailoverResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'InitiateFailoverResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  InitiateFailoverRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:FailoverDBCluster\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbClusterArn}}\n                Sid: InitiateClusterFailover\n          PolicyName: initiate-cluster-failover\n    Type: AWS::IAM::Role\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods3StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - API-Methods-3",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "API-Methods-3"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  GetClientErrors:\n    DependsOn:\n      - GetClientErrorsRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\nimport multi_region_db\\n\\ncustom_functions = multi_region_db.Functions()\\n        \\ndef handler(event, context):\\n\\\n          \\    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n\\\n          \\        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n\\\n          \\        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n        \\n    curs = db_conn.cursor()\\n    curs.execute('''\\n        SELECT\\n            insertedon,\\n            sum(CASE WHEN\\\n          \\ http_code = 200 THEN 0 ELSE 1 END)\\n        FROM dataclient\\n        WHERE http_code != 0\\n        GROUP BY insertedon\\n        ORDER BY insertedon DESC\\n        LIMIT 15\\n    ''');\\n    client_errors\\\n          \\ = curs.fetchall()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\n    data_json = \\\"\\\"\\n    label_json = \\\"\\\"\\n    \\n    data_arr = []\\n    label_arr = []\\n    \\n    #for i in reversed(range(1,len(client_errors))):\\n\\\n          \\    #    label_arr.append(str(client_errors[i][0]))\\n    #    data_arr.append(str(client_errors[i][1]))\\n    \\n    for r in reversed(client_errors):\\n        \\n        label_arr.append(str(r[0]))\\n\\\n          \\        data_arr.append(str(r[1]))\\n        \\n    if len(label_arr) > 0:\\n        \\n        for n in range(len(label_arr) + 1, 16):\\n            \\n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\\n\\\n          \\            data_arr.insert(0, '0')\\n        \\n        custom_functions.add_time(label_arr,data_arr)\\n    \\n    i =- 1\\n    for r in label_arr:\\n        i = i + 1\\n        if label_json!=\\\"\\\"\\\n          :\\n            label_json+=\\\",\\\"\\n        if data_json!=\\\"\\\":\\n            data_json+=\\\",\\\"\\n            \\n        data_json += data_arr[i]\\n        label_json += label_arr[i]\\n    \\n    return\\\n          \\ {\\n        'code': 200,\\n        'body': json.dumps([{\\n            'data': data_json,\\n            'labels': label_json, \\n        }])\\n    }\"\n      Description: Retrieves client errors from the database\n      Environment:\n        Variables:\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'GetClientErrorsRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetClientErrorsLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetClientErrors\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetClientErrors'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetClientErrorsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetClientErrors.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getClientErrors\n      ResourceId: !Ref 'GetClientErrorsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClientErrorsMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetClientErrors\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetClientErrors.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - get-client-errors\n    Type: AWS::Lambda::Permission\n  GetClientErrorsResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-client-errors\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetClientErrorsResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetClientErrorsResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClientErrorsRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  GetClientTraffic:\n    DependsOn:\n      - GetClientTrafficRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport psycopg2\\t\\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\t\\nfrom datetime import timedelta\\n\\\n          \\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        sslmode = 'require',\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n    \\n    if event['queryParams']['region']\\\n          \\ not in ['primary', 'failover']:\\n        raise Exception('Invalid Region Specified')\\n        \\n    curs = db_conn.cursor()\\t\\n    \\n    curs.execute('''\\n        SELECT\\n            insertedon,\\n\\\n          \\            sum(CASE WHEN http_code = 200 AND {}_region = 1 THEN 1 ELSE 0 END)\\n        FROM dataclient\\n        WHERE http_code != 0\\n        GROUP BY insertedon\\n        ORDER BY insertedon\\n\\\n          \\        DESC limit 15\\n    '''.format(event['queryParams']['region']))\\n    \\n    traffic_records = curs.fetchall()\\n    \\n    curs.close()\\t\\n    db_conn.close()\\n    \\n    data_json = \\\"\\\"\\n\\\n          \\    label_json = \\\"\\\"\\n    \\t\\n    data_arr = []\\t\\n    label_arr = []\\t\\n    \\n    if event['queryParams']['region'] == 'primary':\\n        \\n        for i in reversed(range(1, len(traffic_records))):\\t\\\n          \\n            \\n            data_arr.append(str(traffic_records[i][1]))\\t\\n            label_arr.append(str(traffic_records[i][0]))\\n            \\n    elif event['queryParams']['region'] == 'failover':\\n\\\n          \\    \\t\\n        for i in reversed(traffic_records):\\n            \\n            data_arr.append(str(i[1]))\\n            label_arr.append(str(i[0]))\\n        \\t\\n    if len(label_arr) > 0:\\n  \\\n          \\      \\n        for n in range(len(label_arr) + 1, 16):\\t\\n            \\n            data_arr.insert(0, '0')\\n            label_arr.insert(0, custom_functions.subtract_five_seconds(label_arr[0]))\\t\\\n          \\n        \\t\\n        custom_functions.add_time(label_arr,data_arr)\\t\\n    \\t\\n    i =- 1\\t\\n    for r in label_arr:\\t\\n        i = i + 1\\t\\n        if label_json != \\\"\\\":\\t\\n            label_json\\\n          \\ += \\\",\\\"\\t\\n        if data_json != \\\"\\\":\\t\\n            data_json += \\\",\\\"\\t\\n            \\t\\n        data_json += data_arr[i]\\t\\n        label_json += label_arr[i]\\t\\n    \\t\\n    return {\\n\\\n          \\        'code': 200,\\n        'body': json.dumps([{\\n            'data': data_json,\\n            'labels': label_json,\\n        }])\\n    }\\t\"\n      Description: Retrieves client traffic logs from the database\n      Environment:\n        Variables:\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'GetClientTrafficRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GetClientTrafficLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GetClientTraffic\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GetClientTraffic'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GetClientTrafficMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GetClientTraffic.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getClientTraffic\n      ResourceId: !Ref 'GetClientTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClientTrafficMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GetClientTraffic\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GetClientTraffic.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - get-client-traffic\n    Type: AWS::Lambda::Permission\n  GetClientTrafficResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: get-client-traffic\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  GetClientTrafficResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GetClientTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GetClientTrafficRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  ResetDemoEnvironment:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - ResetDemoEnvironmentRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\nfrom botocore.exceptions\\\n          \\ import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\nevent_bridge_client = ec2_client = boto3.client('events', \\n    region_name = os.environ['FAILOVER_REGION_NAME']\\n\\\n          )\\n\\ndef point_service_fqdn_to_primary_web_alb():\\n    \\n    r53_client = boto3.client('route53')\\n        \\n    try:\\n        \\n        r53_client.change_resource_record_sets(\\n            ChangeBatch\\\n          \\ = {\\n                'Changes': [\\n                    {\\n                        'Action': 'UPSERT',\\n                        'ResourceRecordSet': {\\n                            'Name': os.environ['PUBLIC_FQDN'],\\n\\\n          \\                            'AliasTarget': {\\n                                'DNSName': os.environ['REGIONAL_WEB_ALB_FQDN'],\\n                                'HostedZoneId': os.environ['REGIONAL_WEB_ALB_HOSTED_ZONE_ID'],\\n\\\n          \\                                'EvaluateTargetHealth': False\\n                            },\\n                            'Type': 'A'\\n                        },\\n                    },\\n  \\\n          \\              ],\\n            },\\n            HostedZoneId = os.environ['PUBLIC_HOSTED_ZONE_ID'],\\n        )\\n        \\n    except boto3_client_error as e:\\n        raise Exception('Failed to\\\n          \\ Update DNS Record: ' + str(e))\\n    \\n    return True\\n\\ndef allow_traffic_to_primary_db_cluster():\\n    \\n    ec2_client = boto3.client('ec2')\\n    \\n    try:\\n        \\n        ec2_client.replace_network_acl_entry(\\n\\\n          \\            Egress = False, \\n            Protocol = '-1',\\n            CidrBlock = '0.0.0.0/0',\\n            RuleAction = 'allow',\\n            RuleNumber = 100,\\n            NetworkAclId =\\\n          \\ os.environ['REGIONAL_APP_DB_NACL_ID'],\\n        )\\n        \\n    except boto3_client_error as e:\\n        raise Exception('Failed to Reset NACL: ' + str(e))\\n\\ndef prune_db_tables(db_identifier,\\\n          \\ table_names):\\n    \\n    db_credentials = custom_functions.get_db_credentials(db_identifier)\\n    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_' + db_identifier.upper()\\\n          \\ + '_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = db_credentials['port'],\\n        user = db_credentials['username'],\\n        sslmode = 'require',\\n        password = db_credentials['password'],\\n\\\n          \\        database = db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n    \\n    for table_to_prune in table_names:\\n        \\n        curs = db_conn.cursor()\\n        curs.execute('DELETE\\\n          \\ FROM ' + table_to_prune)\\n        db_conn.commit()\\n        \\n    curs.close()\\n    db_conn.close()\\n    \\n    return True\\n\\n'''\\n    It is expected that this function will be run in the PRIMARY\\\n          \\ AWS region\\n'''\\ndef handler(event, context):\\n    \\n    allow_traffic_to_primary_db_cluster()\\n    \\n    prune_db_tables('App', ['dataserver'])\\n    prune_db_tables('Demo', ['dataclient', 'failoverevents'])\\n\\\n          \\    \\n    point_service_fqdn_to_primary_web_alb()\\n    \\n    return {\\n        'code': 200,\\n        'body': json.dumps([])\\n    }\"\n      Description: Resets the demo environment\n      Environment:\n        Variables:\n          DATABASE_CANARY_CRON_NAME: !Join\n            - ''\n            - - !Ref 'MainStackName'\n              - -database-canary\n          FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'\n          PUBLIC_FQDN: !Ref 'PublicFqdn'\n          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneId'\n          REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterReaderEndpoint}}\n          REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterWriterEndpoint}}\n          REGIONAL_APP_DB_NACL_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDatabaseNaclId}}\n          REGIONAL_APP_DB_PROXY_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RegionalAppDbProxyReaderEndpoint}}\n          REGIONAL_APP_DB_PROXY_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RegionalAppDbProxyWriterEndpoint}}\n          REGIONAL_APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbAdminSecretArn}}\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n          REGIONAL_WEB_ALB_FQDN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /WebLoadBalancerFqdn}}\n          REGIONAL_WEB_ALB_HOSTED_ZONE_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /WebLoadBalancerHostedZoneId}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'ResetDemoEnvironmentRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  ResetDemoEnvironmentLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - ResetDemoEnvironment\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'ResetDemoEnvironment'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  ResetDemoEnvironmentMethod:\n    Condition: IsPrimaryRegion\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'ResetDemoEnvironment.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getResetDemoEnvironment\n      ResourceId: !Ref 'ResetDemoEnvironmentResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  ResetDemoEnvironmentMethodInvocationPermission:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - ResetDemoEnvironment\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'ResetDemoEnvironment.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - reset-demo-environment\n    Type: AWS::Lambda::Permission\n  ResetDemoEnvironmentResource:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: reset-demo-environment\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  ResetDemoEnvironmentResourceOptionsMethod:\n    Condition: IsPrimaryRegion\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'ResetDemoEnvironmentResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  ResetDemoEnvironmentRole:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - ec2:ReplaceNetworkAclEntry\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:aws:ec2:'\n                      - !Ref 'AWS::Region'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :network-acl/\n                      - !Join\n                        - ''\n                        - - '{{resolve:ssm:/'\n                          - !Ref 'MainStackName'\n                          - /RegionalAppDatabaseNaclId}}\n                Sid: UpdateACLEntry\n              - Action:\n                  - events:EnableRule\n                  - events:DisableRule\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:aws:events:'\n                      - !Ref 'FailoverRegionName'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :rule/\n                      - !Join\n                        - ''\n                        - - !Ref 'MainStackName'\n                          - -database-canary\n                  - !Join\n                    - ''\n                    - - 'arn:aws:events:'\n                      - !Ref 'FailoverRegionName'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :rule/\n                      - !Join\n                        - ''\n                        - - !Ref 'MainStackName'\n                          - -database-proxy-monitor\n                Sid: ManageCrons\n              - Action:\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PublicHostedZoneId'\n                Sid: UpdateR53HostedZone\n          PolicyName: custom-policy\n    Type: AWS::IAM::Role\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "APIMethods4StackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "APIGatewayStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - API-Methods-4",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "API-Methods-4"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  ClientEmulator:\n    DependsOn:\n      - ClientEmulatorRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport uuid\\nimport psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport urllib.request\\nimport multi_region_db\\nfrom botocore.vendored\\\n          \\ import requests\\n\\ncustom_functions = multi_region_db.Functions()\\n        \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    guid = uuid.uuid4()\\n    \\n    eastern\\\n          \\ = dateutil.tz.gettz('US/Eastern')\\n\\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n\\\n          \\        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n\\\n          \\        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n\\n    curs = db_conn.cursor()\\n    \\n    curs.execute(\\\"INSERT INTO dataclient (guid, primary_region, failover_region, http_code,\\\n          \\ insertedon) VALUES ('{}', 0, 0, 0, '{}');\\\".format(\\n        str(guid),\\n        datetime.datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\")\\n    ))\\n    \\n    db_conn.commit()\\n   \\\n          \\ \\n    http_code = 200\\n    http_content = ''\\n\\n    print('END guid: ' + str(guid))\\n\\n    try:\\n        \\n        res = urllib.request.urlopen(\\n            urllib.request.Request(\\n      \\\n          \\          url = 'https://' + os.environ['PUBLIC_FQDN'] + '?guid=' + str(guid),\\n                method = 'GET',\\n            ),\\n            timeout = 5\\n        )\\n        \\n        http_code\\\n          \\ = res.status\\n        http_content = res.read().decode()\\n        \\n    except Exception as e:\\n        http_code = 500\\n        print('Client Web Request Failed :' + str(e))\\n\\n    try: \\n\\n\\\n          \\        if http_code > 200:\\n            http_content = ''\\n            \\n        curs = db_conn.cursor()\\n        \\n        curs.execute('''\\n            UPDATE dataclient SET\\n            \\\n          \\    primary_region  = {},\\n                failover_region = {},\\n                http_code       = {}\\n            WHERE guid = '{}'\\n        '''.format(\\n            1 if http_content == os.environ['PRIMARY_REGION_NAME']\\\n          \\ else 0,\\n            1 if http_content == os.environ['FAILOVER_REGION_NAME'] else 0,\\n            http_code,\\n            str(guid)\\n        ))\\n        \\n        db_conn.commit()\\n        \\n\\\n          \\    except Exception as ex:\\n        http_code = 500\\n        print('Failed to Update Client Request: ' + str(ex) + ' - HTTP Content: \\\"' + http_content + '\\\"')\\n    \\n    curs.close()\\n    db_conn.close()\\n\\\n          \\    \\n    return True\"\n      Description: Emulates legitimate client traffic\n      Environment:\n        Variables:\n          FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'\n          PRIMARY_REGION_NAME: !Ref 'PrimaryRegionName'\n          PUBLIC_FQDN: !Ref 'PublicFqdn'\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'ClientEmulatorRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  ClientEmulatorLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - ClientEmulator\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'ClientEmulator'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  ClientEmulatorRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  ClientEmulatorTopicSubscription:\n    DependsOn:\n      - ClientEmulator\n      - TestTrafficTopic\n      - TestTrafficTopicPermission\n    Properties:\n      Endpoint: !GetAtt 'ClientEmulator.Arn'\n      Protocol: lambda\n      TopicArn: !Ref 'TestTrafficTopic'\n    Type: AWS::SNS::Subscription\n  GenerateSampleTraffic:\n    DependsOn:\n      - GenerateSampleTrafficRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import os\\nimport time\\nimport json\\nimport boto3\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n\\n    sns_client = boto3.client('sns')\\n    \\n    for i in range(0,\\\n          \\ 10000):\\n        \\n        sns_client.publish(\\n            Message = 'Hola',\\n            TargetArn = os.environ['TEST_TRAFFIC_TOPIC_ARN'],\\n        )\\n        \\n        time.sleep(0.1)\\n \\\n          \\   \\n    return {\\n        'code': 200,\\n        'body': json.dumps([])\\n    }\\n\"\n      Description: Generates test client traffic\n      Environment:\n        Variables:\n          TEST_TRAFFIC_TOPIC_ARN: !Ref 'TestTrafficTopic'\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'GenerateSampleTrafficRole.Arn'\n      Runtime: python3.11\n      Timeout: 900\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  GenerateSampleTrafficLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - GenerateSampleTraffic\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'GenerateSampleTraffic'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  GenerateSampleTrafficMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: GET\n      Integration:\n        IntegrationHttpMethod: POST\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.body')\n            StatusCode: '200'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":400.*\n            StatusCode: '400'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":401.*\n            StatusCode: '401'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":403.*\n            StatusCode: '403'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":404.*\n            StatusCode: '404'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":415.*\n            StatusCode: '415'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":429.*\n            StatusCode: '429'\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: $input.path('$.errorMessage')\n            SelectionPattern: .*\"code\":500.*\n            StatusCode: '500'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: \"#set($params = $input.params())\\n{\\n\\\"queryParams\\\": { #set($paramSet = $params.get('querystring')) #foreach($paramName in $paramSet.keySet()) \\\"$paramName\\\" : \\\"$util.escapeJavaScript($paramSet.get($paramName))\\\"\\\n            \\ #if($foreach.hasNext),#end #end }\\n}\"\n        Type: AWS\n        Uri: !Join\n          - ''\n          - - 'arn:aws:apigateway:'\n            - !Ref 'AWS::Region'\n            - :lambda:path/2015-03-31/functions/\n            - !GetAtt 'GenerateSampleTraffic.Arn'\n            - /invocations\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '400'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '401'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '403'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '404'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '415'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '429'\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '500'\n      OperationName: getTrafficGenerator\n      ResourceId: !Ref 'GenerateSampleTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GenerateSampleTrafficMethodInvocationPermission:\n    Condition: ''\n    DependsOn:\n      - GenerateSampleTraffic\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt 'GenerateSampleTraffic.Arn'\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Join\n        - ''\n        - - 'arn:aws:execute-api:'\n          - !Ref 'AWS::Region'\n          - ':'\n          - !Ref 'AWS::AccountId'\n          - ':'\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /ApiId}}\n          - /*/\n          - GET\n          - /\n          - generate-sample-traffic\n    Type: AWS::Lambda::Permission\n  GenerateSampleTrafficResource:\n    Condition: ''\n    DependsOn: []\n    Properties:\n      ParentId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiRootResourceId}}\n      PathPart: generate-sample-traffic\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Resource\n  GenerateSampleTrafficResourceOptionsMethod:\n    Condition: ''\n    Properties:\n      ApiKeyRequired: false\n      AuthorizationType: NONE\n      HttpMethod: OPTIONS\n      Integration:\n        IntegrationResponses:\n          - ResponseParameters:\n              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Amz-Security-Token'''\n              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''\n              method.response.header.Access-Control-Allow-Origin: '''*'''\n            ResponseTemplates:\n              application/json: '{}'\n            StatusCode: '200'\n        PassthroughBehavior: WHEN_NO_TEMPLATES\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n        Type: MOCK\n      MethodResponses:\n        - ResponseModels:\n            application/json: Empty\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n            method.response.header.Access-Control-Allow-Origin: true\n          StatusCode: '200'\n      ResourceId: !Ref 'GenerateSampleTrafficResource'\n      RestApiId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /ApiId}}\n    Type: AWS::ApiGateway::Method\n  GenerateSampleTrafficRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies: []\n    Type: AWS::IAM::Role\n  GenerateSampleTrafficRoleGenerateTestTraffic:\n    DependsOn:\n      - GenerateSampleTrafficRole\n      - TestTrafficTopic\n    Properties:\n      PolicyDocument:\n        Statement:\n          - Action:\n              - sns:Publish\n            Effect: Allow\n            Resource:\n              - !Ref 'TestTrafficTopic'\n            Sid: SendMessagesToSNS\n      PolicyName: generate-test-traffic\n      Roles:\n        - !Ref 'GenerateSampleTrafficRole'\n    Type: AWS::IAM::Policy\n  TestTrafficTopic:\n    Type: AWS::SNS::Topic\n  TestTrafficTopicPermission:\n    DependsOn:\n      - ClientEmulator\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'ClientEmulator'\n      Principal: sns.amazonaws.com\n      SourceAccount: !Ref 'AWS::AccountId'\n      SourceArn: !Ref 'TestTrafficTopic'\n    Type: AWS::Lambda::Permission\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "CfnExportRetriever": {
   "DependsOn": [
    "CfnExportRetrieverRole"
   ],
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "ZipFile": "import sys\nimport subprocess\n\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\nsys.path.insert(1, '/tmp/')\n\nimport io\nimport os\nimport json\nimport boto3\nimport cfnresponse\nfrom botocore.exceptions import ClientError, ParamValidationError\n\n'''\n    - Region | str\n    - ExportPrefix | str\n'''\ndef handler(event, context):\n    \n    print(json.dumps(event))\n    \n    arguments = event['ResourceProperties']['Properties']\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\n    \n    response_data = {}\n    \n    boto3Session = boto3.Session(\n        region_name = arguments['Region']\n    )\n    \n    cfn_client = boto3Session.client('cloudformation')\n    \n    if event['RequestType'] in ['Create', 'Update']:\n        \n        try:\n            \n            response = cfn_client.list_exports()\n            \n            '''\n                For each CloudFormation export in this region\n            '''\n            for export in response['Exports']:\n            \t\n                '''\n                    If this export has the proper prefix\n                '''\n                if export['Name'].startswith(arguments['ExportPrefix']):\n                    \n                    response_data[export['Name'].replace(arguments['ExportPrefix'] + '-', '')] = export['Value']\n                \n        except ClientError as e:\n            \n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\n            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\n            \n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
    },
    "Description": "",
    "Handler": "index.handler",
    "Layers": [],
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "CfnExportRetrieverRole",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 15,
    "TracingConfig": {
     "Mode": "PassThrough"
    }
   },
   "Type": "AWS::Lambda::Function"
  },
  "CfnExportRetrieverLogGroup": {
   "DeletionPolicy": "Delete",
   "DependsOn": [
    "CfnExportRetriever"
   ],
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "CfnExportRetriever"
       }
      ]
     ]
    },
    "RetentionInDays": 30
   },
   "Type": "AWS::Logs::LogGroup"
  },
  "CfnExportRetrieverRole": {
   "DependsOn": [],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "cloudformation:ListExports"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ],
         "Sid": "GetCFNOutputs"
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "CustomResourcesStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Custom-Resources",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Custom-Resources"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  RegionalCfnExportRetrieverArn:\n    Condition: ''\n    Value: !GetAtt 'CfnExportRetriever.Arn'\n  RegionalDnsRecordDeleterArn:\n    Condition: ''\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'DnsRecordDeleter.Arn'\n      - '-'\n  RegionalLambdaLayerVersionArn:\n    Condition: ''\n    Value: !Ref 'LambdaLayerCreatorResource'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  CfnExportRetriever:\n    DependsOn:\n      - CfnExportRetrieverRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nimport subprocess\\n\\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\\nsys.path.insert(1,\\\n          \\ '/tmp/')\\n\\nimport io\\nimport os\\nimport json\\nimport boto3\\nimport cfnresponse\\nfrom botocore.exceptions import ClientError, ParamValidationError\\n\\n'''\\n    - Region | str\\n    - ExportPrefix\\\n          \\ | str\\n'''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    arguments = event['ResourceProperties']['Properties']\\n    operation = event['ResourceProperties']['Type'].replace('Custom::',\\\n          \\ '')\\n    \\n    response_data = {}\\n    \\n    boto3Session = boto3.Session(\\n        region_name = arguments['Region']\\n    )\\n    \\n    cfn_client = boto3Session.client('cloudformation')\\n \\\n          \\   \\n    if event['RequestType'] in ['Create', 'Update']:\\n        \\n        try:\\n            \\n            response = cfn_client.list_exports()\\n            \\n            '''\\n            \\\n          \\    For each CloudFormation export in this region\\n            '''\\n            for export in response['Exports']:\\n            \\t\\n                '''\\n                    If this export has\\\n          \\ the proper prefix\\n                '''\\n                if export['Name'].startswith(arguments['ExportPrefix']):\\n                    \\n                    response_data[export['Name'].replace(arguments['ExportPrefix']\\\n          \\ + '-', '')] = export['Value']\\n                \\n        except ClientError as e:\\n            \\n            print('Failed to Retrieve CFN Exports: ' + str(e.response))\\n            return cfnresponse.send(event,\\\n          \\ context, cfnresponse.FAILED, response_data)\\n            \\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\"\n      Description: ''\n      Handler: index.handler\n      Layers: []\n      MemorySize: 128\n      Role: !GetAtt 'CfnExportRetrieverRole.Arn'\n      Runtime: python3.11\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  CfnExportRetrieverLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - CfnExportRetriever\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'CfnExportRetriever'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  CfnExportRetrieverRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - cloudformation:ListExports\n                Effect: Allow\n                Resource:\n                  - '*'\n                Sid: GetCFNOutputs\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  DnsRecordDeleter:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DnsRecordDeleterRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nimport subprocess\\n\\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(), stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)\\nsys.path.insert(1,\\\n          \\ '/tmp/')\\n\\nimport json\\nimport boto3\\nimport cfnresponse\\nfrom botocore.exceptions import ClientError, ParamValidationError\\n\\n'''\\n    - Fqdns | list \\n    - HostedZoneId | str\\n'''\\ndef handler(event,\\\n          \\ context):\\n    \\n    print(json.dumps(event))\\n    \\n    arguments = event['ResourceProperties']['Properties']\\n    operation = event['ResourceProperties']['Type'].replace('Custom::', '')\\n\\\n          \\    \\n    response_data = {}\\n    \\n    route53_client = boto3.client('route53')\\n    \\n    if event['RequestType'] in ['Delete']:\\n        \\n        try:\\n            \\n            record_sets_resp\\\n          \\ = route53_client.list_resource_record_sets(\\n                HostedZoneId = arguments['HostedZoneId'],\\n            )\\n            \\n            change_batch = []\\n            \\n           \\\n          \\ for record_set in record_sets_resp['ResourceRecordSets']:\\n                \\n                print(record_set)\\n                \\n                '''\\n                    We'll be leaving NS\\\n          \\ and SOA records.\\n                '''\\n                if record_set['Type'] in ['NS', 'SOA']:\\n                    print('Not An Eligible Record Type - Skipping')\\n                    continue\\n\\\n          \\                \\n                '''\\n                    If we've been instructed to delete all FQDNs or this FQDN\\n                    \\n                    We're going to use for comparison\\\n          \\ the raw record name from Route53\\n                    as well as the name minus the trailing period.\\n                '''\\n                if '*' in arguments['Fqdns'] or (record_set['Name']\\\n          \\ in arguments['Fqdns'] or record_set['Name'][0:-1] in arguments['Fqdns']):\\n                    \\n                    print('Deleting Record')\\n                    \\n                    change_batch.append({\\n\\\n          \\                        'Action': 'DELETE',\\n                        'ResourceRecordSet': record_set,\\n                    })\\n            \\n            if len(change_batch) > 0:\\n          \\\n          \\      \\n                route53_client.change_resource_record_sets(\\n                    HostedZoneId = arguments['HostedZoneId'],\\n                    ChangeBatch = {\\n                     \\\n          \\   'Changes': change_batch\\n                    }\\n                )\\n                \\n        except ClientError as e:\\n            \\n            print('Failed to Delete DNS Records: ' + str(e.response))\\n\\\n          \\            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\\n            \\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\"\n      Description: Deletes DNS Records on Stack Cleanup\n      Handler: index.handler\n      Layers: []\n      MemorySize: 128\n      Role: !GetAtt 'DnsRecordDeleterRole.Arn'\n      Runtime: python3.11\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  DnsRecordDeleterLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - DnsRecordDeleter\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DnsRecordDeleter'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DnsRecordDeleterRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - route53:ListResourceRecordSets\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PublicHostedZoneId'\n                Sid: DeleteRoute53Records\n          PolicyName: delete-route53-records\n    Type: AWS::IAM::Role\n  LambdaLayerCreator:\n    DependsOn:\n      - LambdaLayerCreatorRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"_A='%H:%M:%S'\\nimport sys,subprocess\\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\\nsys.path.insert(1,'/tmp/')\\n\\\n          import io,os,json,boto3,shutil,cfnresponse\\nfrom zipfile import ZipFile\\nfrom botocore.exceptions import ClientError as boto3_client_error\\ndef zip_directory(path):\\n\\tfor(B,F,C)in os.walk(path):\\n\\\n          \\t\\tfor D in C:A=os.path.join(B,D);E=A[len(path)+len(os.sep):];yield(A,E)\\ndef make_zip_file_bytes(path):\\n\\tA=io.BytesIO()\\n\\twith ZipFile(A,'w')as B:\\n\\t\\tfor(C,D)in zip_directory(path=path):B.write(C,D)\\n\\\n          \\treturn A.getvalue()\\n'\\\\n    - Region | str\\\\n    - Packages | list\\\\n    - LayerName | str\\\\n'\\ndef handler(event,context):\\n\\tJ='RequestType';I='ResourceProperties';G='LayerName';C=context;A=event;print(json.dumps(A));B=A[I]['Properties'];N=A[I]['Type'].replace('Custom::','');D={};K=boto3.Session(region_name=B['Region']);E=K.client('lambda')\\n\\\n          \\tif A[J]in['Create','Update']:\\n\\t\\tsubprocess.call(('pip install '+' '.join(B['Packages'])+' -t /tmp/lambda-layer --no-cache-dir').split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL);shutil.copyfile(os.path.realpath(__file__),'/tmp/lambda-layer/multi_region_db.py')\\n\\\n          \\t\\ttry:H=E.publish_layer_version(LayerName=B[G],Content={'ZipFile':make_zip_file_bytes('/tmp/lambda-layer')},CompatibleRuntimes=['python3.9','python3.10','python3.11','python3.12'],CompatibleArchitectures=['x86_64','arm64']);return\\\n          \\ cfnresponse.send(A,C,cfnresponse.SUCCESS,D,H['LayerVersionArn'])\\n\\t\\texcept boto3_client_error as F:print('Failed to Deploy Lambda Layer: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\\n\\\n          \\tif A[J]in['Delete']:\\n\\t\\ttry:\\n\\t\\t\\tL=E.list_layer_versions(LayerName=B[G])\\n\\t\\t\\tfor M in L['LayerVersions']:H=E.delete_layer_version(LayerName=B[G],VersionNumber=M['Version'])\\n\\t\\texcept\\\n          \\ boto3_client_error as F:print('Failed to Delete Layer Versions: '+str(F.response));return cfnresponse.send(A,C,cfnresponse.FAILED,D)\\n\\t\\treturn cfnresponse.send(A,C,cfnresponse.SUCCESS,D)\\n\\\n          import dateutil.tz\\nfrom datetime import datetime\\nfrom datetime import timedelta\\nclass Functions:\\n\\tdef __init__(A):''\\n\\tdef add_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=5)).strftime(_A)\\n\\\n          \\tdef subtract_five_seconds(A,start_time):return(datetime.strptime(str(start_time),_A)+timedelta(seconds=-5)).strftime(_A)\\n\\tdef add_time(B,label,data):\\n\\t\\tA=label;C=dateutil.tz.gettz('US/Pacific');D=datetime.now(tz=C)\\n\\\n          \\t\\twhile datetime.strptime(A[len(A)-1],_A)+timedelta(seconds=9)<datetime.strptime(D.strftime(_A),_A):A.pop(0);data.pop(0);A.append(B.add_five_seconds(A[len(A)-1]));data.append('0')\\n\\t'\\\\n  \\\n          \\      Requires \\\"REGIONAL_(APP|DEMO)_DB_SECRET_ARN\\\" as an environment variable\\\\n        \\\\n        - db_identifier | str (App|Demo)\\\\n    '\\n\\tdef get_db_credentials(E,db_identifier):\\n\\t\\t\\\n          A=db_identifier;B=boto3.client('secretsmanager')\\n\\t\\ttry:C=B.get_secret_value(SecretId=os.environ['REGIONAL_'+A.upper()+'_DB_SECRET_ARN'])\\n\\t\\texcept boto3_client_error as D:raise Exception('Failed\\\n          \\ to Retrieve '+A+' Database Secret: '+str(D))\\n\\t\\telse:return json.loads(C['SecretString'])\\n\\t'\\\\n        fqdn | str\\\\n        newValue | str\\\\n        hostedZoneId | str\\\\n        [ ttl |\\\n          \\ int ]\\\\n        [ type | str ]\\\\n    '\\n\\tdef update_dns_record(C,fqdn,new_value,hosted_zone_id,ttl=1,record_type='CNAME'):\\n\\t\\tA=boto3.client('route53')\\n\\t\\ttry:A.change_resource_record_sets(ChangeBatch={'Changes':[{'Action':'UPSERT','ResourceRecordSet':{'Name':fqdn,'ResourceRecords':[{'Value':new_value}],'TTL':ttl,'Type':record_type}}]},HostedZoneId=hosted_zone_id)\\n\\\n          \\t\\texcept boto3_client_error as B:raise Exception('Failed to Update DNS Record: '+str(B))\\n\\t\\treturn True\"\n      Description: ''\n      Handler: index.handler\n      Layers: []\n      MemorySize: 256\n      Role: !GetAtt 'LambdaLayerCreatorRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  LambdaLayerCreatorLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - LambdaLayerCreator\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'LambdaLayerCreator'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  LambdaLayerCreatorResource:\n    DependsOn:\n      - LambdaLayerCreatorLogGroup\n    Properties:\n      Properties:\n        LayerName: !Ref 'AWS::StackName'\n        Packages:\n          - requests\n          - cfnresponse\n          - psycopg2-binary\n        Region: !Ref 'AWS::Region'\n        Version: 1.0\n      ServiceToken: !GetAtt 'LambdaLayerCreator.Arn'\n      Type: Custom::DeployLambdaLayer\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  LambdaLayerCreatorRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - lambda:ListLayerVersions\n                  - lambda:DeleteLayerVersion\n                  - lambda:PublishLayerVersion\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - lambda\n                      - !Ref 'PrimaryRegionName'\n                      - !Ref 'AWS::AccountId'\n                      - layer\n                      - !Ref 'AWS::StackName'\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - lambda\n                      - !Ref 'FailoverRegionName'\n                      - !Ref 'AWS::AccountId'\n                      - layer\n                      - !Ref 'AWS::StackName'\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - lambda\n                      - !Ref 'PrimaryRegionName'\n                      - !Ref 'AWS::AccountId'\n                      - layer\n                      - !Ref 'AWS::StackName'\n                      - '*'\n                  - !Join\n                    - ':'\n                    - - arn\n                      - !Ref 'AWS::Partition'\n                      - lambda\n                      - !Ref 'FailoverRegionName'\n                      - !Ref 'AWS::AccountId'\n                      - layer\n                      - !Ref 'AWS::StackName'\n                      - '*'\n                Sid: CreateAndDeleteLambdaLayers\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  RegionalCfnExportRetrieverArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional CFN Export Retriever Lambda ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalCfnExportRetrieverArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'CfnExportRetriever.Arn'\n    Type: AWS::SSM::Parameter\n  RegionalDnsRecordDeleterArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional DNS Record Deleter Lambda ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDnsRecordDeleterArn\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'DnsRecordDeleter.Arn'\n        - '-'\n    Type: AWS::SSM::Parameter\n  RegionalLambdaLayerVersionArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional Lambda Layer Version ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalLambdaLayerVersionArn\n      Tier: Standard\n      Type: String\n      Value: !Ref 'LambdaLayerCreatorResource'\n    Type: AWS::SSM::Parameter\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "DashboardStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Dashboard",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Dashboard"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  CustomCloudFrontCdnFqdnExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -CustomCloudFrontDashboardEndpoint\n    Value: !Join\n      - .\n      - - dashboard\n        - !Ref 'PublicFqdn'\n  DefaultCloudFrontCdnFqdnExport:\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -DefaultCloudFrontDashboardEndpoint\n    Value: !GetAtt 'CloudFrontDistribution.DomainName'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  Bucket:\n    Properties:\n      AccessControl: Private\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n      VersioningConfiguration:\n        Status: Suspended\n    Type: AWS::S3::Bucket\n  BucketPolicy:\n    DependsOn:\n      - Bucket\n      - CloudFrontAccessIdentity\n    Properties:\n      Bucket: !Ref 'Bucket'\n      PolicyDocument:\n        Statement:\n          - Action:\n              - s3:GetObject\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:'\n                  - !Ref 'AWS::Partition'\n                  - ':iam::cloudfront:user/CloudFront Origin Access Identity '\n                  - !Ref 'CloudFrontAccessIdentity'\n            Resource:\n              - !Join\n                - ''\n                - - !GetAtt 'Bucket.Arn'\n                  - /*\n    Type: AWS::S3::BucketPolicy\n  CloudFrontAccessIdentity:\n    Properties:\n      CloudFrontOriginAccessIdentityConfig:\n        Comment: Dashboard\n    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n  CloudFrontDistribution:\n    DependsOn:\n      - TlsCertificate\n      - ResponseHeadersPolicy\n      - CloudFrontAccessIdentity\n    Properties:\n      DistributionConfig:\n        Aliases:\n          - !Join\n            - .\n            - - dashboard\n              - !Ref 'PublicFqdn'\n        Comment: !Join\n          - ''\n          - - 'Dashboard Controller for '\n            - !Ref 'MainStackName'\n        DefaultCacheBehavior:\n          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad\n          Compress: true\n          ForwardedValues:\n            QueryString: true\n          ResponseHeadersPolicyId: !Ref 'ResponseHeadersPolicy'\n          TargetOriginId: dashboard-bucket\n          ViewerProtocolPolicy: redirect-to-https\n        Enabled: true\n        HttpVersion: http2\n        IPV6Enabled: true\n        Origins:\n          - DomainName: !GetAtt 'Bucket.DomainName'\n            Id: dashboard-bucket\n            S3OriginConfig:\n              OriginAccessIdentity: !Join\n                - ''\n                - - origin-access-identity/cloudfront/\n                  - !Ref 'CloudFrontAccessIdentity'\n        ViewerCertificate:\n          AcmCertificateArn: !Ref 'TlsCertificate'\n          MinimumProtocolVersion: TLSv1.1_2016\n          SslSupportMethod: sni-only\n    Type: AWS::CloudFront::Distribution\n  DashboardCodeDeployer:\n    DependsOn:\n      - DashboardCodeDeployerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys,subprocess\\nsubprocess.call('pip install cfnresponse -t /tmp/ --no-cache-dir'.split(),stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)\\nsys.path.insert(1,'/tmp/')\\nimport\\\n          \\ os,json,glob,boto3,shutil,urllib3,zipfile,mimetypes,cfnresponse\\nfrom collections import defaultdict\\nfrom botocore.exceptions import ClientError as boto3_client_error\\nhttp=urllib3.PoolManager()\\n\\\n          try:from urllib2 import HTTPError,build_opener,HTTPHandler,Request\\nexcept ImportError:from urllib.error import HTTPError;from urllib.request import build_opener,HTTPHandler,Request\\n'\\\\n    -\\\n          \\ CodeBucketName | str\\\\n    - CodeDownloadUrl | str\\\\n'\\ndef handler(event,context):\\n\\tU='VersionId';T='Key';S='/dashboard/';R=False;Q='RequestType';J='CodeBucketName';D=context;A=event;print(json.dumps(A));C=A['ResourceProperties']['Properties'];E=boto3.client('s3');F={}\\n\\\n          \\tif A[Q]in['Create','Update']:\\n\\t\\tG='/tmp/dashboard_code.zip';K=G.replace('.zip','');'\\\\n            Download the codebase\\\\n        ';V=urllib3.PoolManager();L=V.request('GET',C['CodeDownloadUrl'],preload_content=R)\\n\\\n          \\t\\tif L.status!=200:return R\\n\\t\\twith L as W,open(G,'wb')as X:shutil.copyfileobj(W,X)\\n\\t\\t'\\\\n            Unzip the downloaded code\\\\n        '\\n\\t\\twith zipfile.ZipFile(G,'r')as Y:Y.extractall(K)\\n\\\n          \\t\\t'\\\\n            For each file in the local code directory\\\\n        '\\n\\t\\tfor B in glob.iglob(K+'**/**',recursive=True):\\n\\t\\t\\t\\\"\\\\n                If it's one of the dashboard files and\\\n          \\ it's a file, not a directory, we'll upload it to S3\\\\n            \\\"\\n\\t\\t\\tif S in B and os.path.isfile(B):\\n\\t\\t\\t\\ttry:Z=B.split(S)[1];E.upload_file(B,C[J],Z,ExtraArgs={'ContentType':mimetypes.guess_type(B)[0]})\\n\\\n          \\t\\t\\t\\texcept boto3_client_error as H:print('Failed to Upload Dashboard File: '+str(H));return cfnresponse.send(A,D,cfnresponse.FAILED,F)\\n\\telif A[Q]in['Delete']:\\n\\t\\t\\\"\\\\n            Here,\\\n          \\ we'll delete all objects, versions, and delete markers from the bucket.\\\\n        \\\";a=E.get_paginator('list_object_versions');I=[]\\n\\t\\tfor M in a.paginate(Bucket=C[J]):\\n\\t\\t\\tfor N in['Versions','DeleteMarkers']:\\n\\\n          \\t\\t\\t\\tif N in M:\\n\\t\\t\\t\\t\\tfor O in M[N]:I.append({T:O[T],U:O[U]})\\n\\t\\tfor P in range(0,len(I),1000):\\n\\t\\t\\ttry:b=E.delete_objects(Bucket=C[J],Delete={'Objects':I[P:P+1000],'Quiet':True})\\n\\\n          \\t\\t\\texcept boto3_client_error as H:print('Failed to Delete S3 Objects: '+str(H));return cfnresponse.send(A,D,cfnresponse.FAILED,F)\\n\\treturn cfnresponse.send(A,D,cfnresponse.SUCCESS,F)\"\n      Description: Downloads dashboard code from a remote repo and deploys it to Amazon S3\n      Environment:\n        Variables:\n          CODE_BUCKET_NAME: !Ref 'Bucket'\n          CODE_DOWNLOAD_URL: !Ref 'CodeDownloadUrl'\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'DashboardCodeDeployerRole.Arn'\n      Runtime: python3.11\n      Timeout: 30\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  DashboardCodeDeployerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - DashboardCodeDeployer\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DashboardCodeDeployer'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DashboardCodeDeployerResource:\n    DependsOn:\n      - Bucket\n      - DashboardCodeDeployer\n      - DashboardCodeDeployerLogGroup\n    Properties:\n      Properties:\n        CodeBucketName: !Ref 'Bucket'\n        CodeDownloadUrl: !Ref 'CodeDownloadUrl'\n      ServiceToken: !GetAtt 'DashboardCodeDeployer.Arn'\n      Type: Custom::DeployDashboardCode\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  DashboardCodeDeployerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - s3:PutObject\n                  - s3:ListBucket\n                  - s3:DeleteObject\n                  - s3:ListBucketVersions\n                  - s3:DeleteObjectVersion\n                Effect: Allow\n                Resource:\n                  - !GetAtt 'Bucket.Arn'\n                  - !Join\n                    - ''\n                    - - !GetAtt 'Bucket.Arn'\n                      - /*\n                Sid: PutS3Objects\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  DnsRecord:\n    DependsOn:\n      - CloudFrontDistribution\n    Properties:\n      HostedZoneId: !Ref 'PublicHostedZoneId'\n      RecordSets:\n        - AliasTarget:\n            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'\n            HostedZoneId: Z2FDTNDATAQYW2\n          Name: !Join\n            - .\n            - - dashboard\n              - !Ref 'PublicFqdn'\n          Type: A\n    Type: AWS::Route53::RecordSetGroup\n  ResponseHeadersPolicy:\n    Properties:\n      ResponseHeadersPolicyConfig:\n        CorsConfig:\n          AccessControlAllowCredentials: false\n          AccessControlAllowHeaders:\n            Items:\n              - '*'\n          AccessControlAllowMethods:\n            Items:\n              - GET\n              - POST\n              - OPTIONS\n          AccessControlAllowOrigins:\n            Items:\n              - '*'\n          AccessControlExposeHeaders:\n            Items:\n              - '*'\n          OriginOverride: false\n        Name: !Join\n          - ''\n          - - !Ref 'MainStackName'\n            - -CORS-With-Preflight\n    Type: AWS::CloudFront::ResponseHeadersPolicy\n  TlsCertificate:\n    Properties:\n      DomainName: !Join\n        - .\n        - - dashboard\n          - !Ref 'PublicFqdn'\n      DomainValidationOptions:\n        - DomainName: !Join\n            - .\n            - - dashboard\n              - !Ref 'PublicFqdn'\n          HostedZoneId: !Ref 'PublicHostedZoneId'\n      ValidationMethod: DNS\n    Type: AWS::CertificateManager::Certificate\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "FailoverDatabasesStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "NetworkingStackSet",
    "PrimaryDatabasesStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Failover-Databases",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Failover-Databases"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  GlobalAppDbClusterIdentifier:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - GlobalAppDbClusterIdentifier\n    Value: !GetAtt 'PrimaryRegionDbExportRetriever.GlobalAppDbClusterIdentifier'\n  RegionalAppDbAdminSecretArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - AppDbAdminSecretArn\n    Value: !Ref 'AppDbAdminSecret'\n  RegionalAppDbClusterArn:\n    Condition: ''\n    Value: !GetAtt 'FailoverAppCluster.DBClusterArn'\n  RegionalAppDbClusterIdentifier:\n    Condition: ''\n    Value: !Ref 'FailoverAppCluster'\n  RegionalAppDbClusterReaderEndpoint:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalAppDbClusterReaderEndpoint\n    Value: !GetAtt 'FailoverAppCluster.ReadEndpoint.Address'\n  RegionalAppDbClusterWriterEndpoint:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalAppDbClusterWriterEndpoint\n    Value: !GetAtt 'FailoverAppCluster.Endpoint.Address'\n  RegionalAppDbProxyArn:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxy.DBProxyArn'\n  RegionalAppDbProxyName:\n    Condition: ''\n    Value: !Ref 'AppDbProxy'\n  RegionalAppDbProxyPort:\n    Condition: ''\n    Value: !GetAtt 'FailoverAppCluster.Endpoint.Port'\n  RegionalAppDbProxyReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'\n  RegionalAppDbProxyWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxy.Endpoint'\n  RegionalDemoDbAdminSecretArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - DemoDbAdminSecretArn\n    Value: !Join\n      - ':'\n      - - arn\n        - !Ref 'AWS::Partition'\n        - secretsmanager\n        - !Ref 'AWS::Region'\n        - !Ref 'AWS::AccountId'\n        - secret\n        - !Select\n          - 6\n          - !Split\n            - ':'\n            - !GetAtt 'PrimaryRegionDbExportRetriever.DemoDbAdminSecretArn'\n  RegionalDemoDbClusterReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterReaderEndpoint'\n  RegionalDemoDbClusterWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterWriterEndpoint'\n  RegionalKmsKeyArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalKmsKeyArn\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'KMSKey.Arn'\n      - !GetAtt 'KMSKeyReplica.Arn'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  AppDbAdminSecret:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Failover App DB Cluster Admin Account for '\n          - !Ref 'MainStackName'\n      SecretString: !Join\n        - ''\n        - - '{\"username\": \"'\n          - !Ref 'DatabaseAdminUsername'\n          - '\", \"password\": \"'\n          - !Ref 'DatabaseAdminPassword'\n          - '\", \"database\": \"template1\"}'\n    Type: AWS::SecretsManager::Secret\n  AppDbClusterDeleter:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - AppDbSubnetGroup\n      - FailoverAppCluster\n      - RdsClusterDeleterLogGroup\n    Properties:\n      Properties:\n        ClusterArn: !GetAtt 'FailoverAppCluster.DBClusterArn'\n        ClusterIdentifier: !Ref 'FailoverAppCluster'\n      ServiceToken: !GetAtt 'RdsClusterDeleter.Arn'\n      Type: Custom::DeleteRdsCluster\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  AppDbProxy:\n    Properties:\n      Auth:\n        - SecretArn: !Ref 'AppDbAdminSecret'\n      DBProxyName: !Ref 'FailoverAppCluster'\n      EngineFamily: POSTGRESQL\n      RequireTLS: true\n      RoleArn: !GetAtt 'DbProxyRole.Arn'\n      VpcSecurityGroupIds:\n        - !Ref 'DbProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneBId}}\n    Type: AWS::RDS::DBProxy\n  AppDbProxyReaderEndpoint:\n    DependsOn:\n      - AppDbProxy\n    Properties:\n      DBProxyEndpointName: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - app\n          - reader\n      DBProxyName: !Ref 'AppDbProxy'\n      TargetRole: READ_ONLY\n      VpcSecurityGroupIds:\n        - !Ref 'DbProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneBId}}\n    Type: AWS::RDS::DBProxyEndpoint\n  AppDbProxyTargetGroup:\n    DependsOn:\n      - AppDbProxy\n      - FailoverAppInstance1\n    Properties:\n      DBClusterIdentifiers:\n        - !Ref 'FailoverAppCluster'\n      DBProxyName: !Ref 'AppDbProxy'\n      TargetGroupName: default\n    Type: AWS::RDS::DBProxyTargetGroup\n  AppDbSubnetGroup:\n    Properties:\n      DBSubnetGroupDescription: App Database Subnets\n      DBSubnetGroupName: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - !Join\n            - ''\n            - !Split\n              - subnet-\n              - !Join\n                - '-'\n                - - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Database\n                      - SubnetZoneAId}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Database\n                      - SubnetZoneAId}}\n      SubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Database\n            - SubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Database\n            - SubnetZoneBId}}\n    Type: AWS::RDS::DBSubnetGroup\n  ClusterParameterGroup:\n    Properties:\n      Description: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - ' - Cluster Param Group'\n      Family: aurora-postgresql13\n      Parameters:\n        rds.logical_replication: 1\n        wal_sender_timeout: 240000\n    Type: AWS::RDS::DBClusterParameterGroup\n  DbClusterSecurityGroup:\n    DependsOn:\n      - DbProxySecurityGroup\n    Properties:\n      GroupDescription: RDS Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from In-Region Lambda Functions\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n          ToPort: 5432\n        - Description: DB Access from In-Region RDS Proxy\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Ref 'DbProxySecurityGroup'\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneACidr'\n            - !Ref 'PrimaryPrivateSubnetZoneACidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - a\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneBCidr'\n            - !Ref 'PrimaryPrivateSubnetZoneBCidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - b\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalVpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DbProxyRole:\n    DependsOn:\n      - AppDbAdminSecret\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - rds.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'AppDbAdminSecret'\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  DbProxySecurityGroup:\n    Properties:\n      GroupDescription: RDS Proxy Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from Lambda\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneACidr'\n            - !Ref 'PrimaryPrivateSubnetZoneACidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - a\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneBCidr'\n            - !Ref 'PrimaryPrivateSubnetZoneBCidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - b\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalVpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DemoDbSubnetGroup:\n    Properties:\n      DBSubnetGroupDescription: Demo Database Subnets\n      DBSubnetGroupName: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - !Join\n            - ''\n            - !Split\n              - subnet-\n              - !Join\n                - '-'\n                - - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Private\n                      - SubnetZoneAId}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Private\n                      - SubnetZoneAId}}\n      SubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Private\n            - SubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Private\n            - SubnetZoneBId}}\n    Type: AWS::RDS::DBSubnetGroup\n  FailoverAppCluster:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - AppDbSubnetGroup\n      - PrimaryRegionDbExportRetriever\n    Properties:\n      BackupRetentionPeriod: 30\n      DBSubnetGroupName: !Ref 'AppDbSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '13.18'\n      GlobalClusterIdentifier: !GetAtt 'PrimaryRegionDbExportRetriever.GlobalAppDbClusterIdentifier'\n      KmsKeyId: !If\n        - IsPrimaryRegion\n        - !Ref 'KMSKey'\n        - !Ref 'KMSKeyReplica'\n      Port: 5432\n      RestoreType: copy-on-write\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'DbClusterSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  FailoverAppDbAdminSecretAttachment:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - AppDbAdminSecret\n      - FailoverAppCluster\n    Properties:\n      SecretId: !Ref 'AppDbAdminSecret'\n      TargetId: !Ref 'FailoverAppCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  FailoverAppInstance1:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - AppDbSubnetGroup\n      - FailoverAppCluster\n      - AppDbClusterDeleter\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'FailoverAppCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n    Type: AWS::RDS::DBInstance\n  FailoverAppInstance2:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - AppDbSubnetGroup\n      - FailoverAppCluster\n      - AppDbClusterDeleter\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'FailoverAppCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n    Type: AWS::RDS::DBInstance\n  GlobalAppDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Global App DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - GlobalAppDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryRegionDbExportRetriever.GlobalAppDbClusterIdentifier'\n    Type: AWS::SSM::Parameter\n  KMSKey:\n    Condition: IsPrimaryRegion\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Muli-Region KMS Key for '\n          - !Ref 'AWS::StackName'\n      EnableKeyRotation: true\n      Enabled: true\n      KeyPolicy:\n        Id: default-key-policy\n        Statement:\n          - Action: kms:*\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:aws:iam::'\n                  - !Ref 'AWS::AccountId'\n                  - :root\n            Resource: '*'\n            Sid: Enable IAM User Permissions\n        Version: '2012-10-17'\n      MultiRegion: true\n    Type: AWS::KMS::Key\n  KMSKeyReplica:\n    Condition: IsFailoverRegion\n    Properties:\n      Enabled: true\n      KeyPolicy:\n        Id: default-key-policy\n        Statement:\n          - Action: kms:*\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:aws:iam::'\n                  - !Ref 'AWS::AccountId'\n                  - :root\n            Resource: '*'\n            Sid: Enable IAM User Permissions\n        Version: '2012-10-17'\n      PrimaryKeyArn: !GetAtt 'PrimaryRegionCmkRetriever.RegionalKmsKeyArn'\n    Type: AWS::KMS::ReplicaKey\n  PrimaryRegionCmkRetriever:\n    Condition: IsFailoverRegion\n    Properties:\n      Properties:\n        ExportPrefix: !Ref 'MainStackName'\n        Region: !Ref 'PrimaryRegionName'\n        Version: 1.05\n      ServiceToken: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalCfnExportRetrieverArn}}\n      Type: Custom::GetCFNExports\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  PrimaryRegionDbExportRetriever:\n    Properties:\n      Properties:\n        ExportPrefix: !Ref 'MainStackName'\n        Region: !Ref 'PrimaryRegionName'\n        Version: 1.04\n      ServiceToken: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalCfnExportRetrieverArn}}\n      Type: Custom::GetCFNExports\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  RdsClusterDeleter:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - RdsClusterDeleterRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport time\\nimport boto3\\nimport cfnresponse\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\n'''\\n\\\n          \\    ClusterArn\\n    ClusterIdentifier\\n'''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    arguments = event['ResourceProperties']['Properties']\\n    operation =\\\n          \\ event['ResourceProperties']['Type'].replace('Custom::', '')\\n    \\n    response_data = {}\\n    \\n    if event['RequestType'] in ['Delete']:\\n        \\n        rds_client = boto3.client('rds')\\n\\\n          \\        \\n        try:\\n            \\n            '''\\n                First, we'll get the cluster's current status\\n            '''\\n            describe_cluster_resp = rds_client.describe_db_clusters(\\n\\\n          \\                DBClusterIdentifier = arguments['ClusterArn'],\\n            )\\n            \\n            '''\\n                If there's a cluster matching this identifier\\n            '''\\n\\\n          \\            if len(describe_cluster_resp) > 0:\\n                \\n                cluster_status = describe_cluster_resp['DBClusters'][0]['Status']\\n                \\n                '''\\n  \\\n          \\                  If the cluster's current status is AVAILABLE\\n                '''\\n                if cluster_status in ['available']:\\n                    \\n                    try:\\n    \\\n          \\                    \\n                        '''\\n                            We'll try to delete it\\n                        '''\\n                        rds_client.delete_db_cluster(\\n   \\\n          \\                         SkipFinalSnapshot = True,\\n                            DBClusterIdentifier = arguments['ClusterIdentifier']\\n                        )\\n                        \\n   \\\n          \\                     '''\\n                            Now, we'll monitor its deletion and respond only after it's successful.\\n                        '''\\n                        while True:\\n\\\n          \\                            \\n                            try:\\n                                \\n                                describe_cluster_resp = rds_client.describe_db_clusters(\\n  \\\n          \\                                  DBClusterIdentifier = arguments['ClusterArn'],\\n                                )\\n\\n                                time.sleep(5)\\n                        \\\n          \\        \\n                            except boto3_client_error as e:\\n                                \\n                                if e.response['Error']['Code'] == 'DBClusterNotFoundFault':\\n\\\n          \\                                    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\\n                                \\n                                else:\\n    \\\n          \\                                print('Failed to Retrieve Cluster: ' + str(e.response))\\n                                    return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\\n\\\n          \\                            \\n                    except boto3_client_error as e:\\n                        print('Failed to Delete Cluster: ' + str(e.response))\\n                        return\\\n          \\ cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\\n                \\n        except boto3_client_error as e:\\n            print('Failed to Retrieve Cluster: ' + str(e.response))\\n\\\n          \\            return cfnresponse.send(event, context, cfnresponse.FAILED, response_data)\\n\\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\"\n      Description: Deletes the failover cluster once the local instances are deleted\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'RdsClusterDeleterRole.Arn'\n      Runtime: python3.11\n      Timeout: 300\n      TracingConfig:\n        Mode: PassThrough\n    Type: AWS::Lambda::Function\n  RdsClusterDeleterLogGroup:\n    Condition: IsFailoverRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - RdsClusterDeleter\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'RdsClusterDeleter'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  RdsClusterDeleterRole:\n    Condition: IsFailoverRegion\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - rds:DeleteDBCluster\n                  - rds:DescribeDBClusters\n                Effect: Allow\n                Resource:\n                  - !GetAtt 'FailoverAppCluster.DBClusterArn'\n                Sid: DescribeAndDeleteDBCluster\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  RegionalAppDbAdminSecretArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Admin Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbAdminSecretArn\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppDbAdminSecret'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional App DB Cluster ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'FailoverAppCluster.DBClusterArn'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional App DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'FailoverAppCluster'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Reader Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'FailoverAppCluster.ReadEndpoint.Address'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Writer Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'FailoverAppCluster.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxy.DBProxyArn'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyNameParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Proxy name for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyName\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppDbProxy'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyPortParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy port for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyPort\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'FailoverAppCluster.Endpoint.Port'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy reader endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy writer endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxy.Endpoint'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbAdminSecretArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Admin Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbAdminSecretArn\n      Tier: Standard\n      Type: String\n      Value: !Join\n        - ':'\n        - - arn\n          - !Ref 'AWS::Partition'\n          - secretsmanager\n          - !Ref 'AWS::Region'\n          - !Ref 'AWS::AccountId'\n          - secret\n          - !Select\n            - 6\n            - !Split\n              - ':'\n              - !GetAtt 'PrimaryRegionDbExportRetriever.DemoDbAdminSecretArn'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Reader Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterReaderEndpoint'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Writer Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryRegionDbExportRetriever.RegionalDemoDbClusterWriterEndpoint'\n    Type: AWS::SSM::Parameter\n  RegionalKmsKeyArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional KMS Key ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalKmsKeyArn\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'KMSKey.Arn'\n        - !GetAtt 'KMSKeyReplica.Arn'\n    Type: AWS::SSM::Parameter\nTransform:\n  Name: AWS::SecretsManager-2020-07-23\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "FailoverHandlersStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "WebsiteStackSet",
    "NetworkingStackSet",
    "PrimaryDatabasesStackSet",
    "FailoverDatabasesStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Failover-Handlers",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Failover-Handlers"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  FailoverClusterPromoter:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - FailoverClusterPromoterRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\nfrom botocore.exceptions\\\n          \\ import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef initiate_global_cluster_failover():\\n    \\n    rds_client = boto3.client('rds')\\n    \\n    try:\\n\\\n          \\        \\n        print('Attempting to Retrieve Global DB Cluster Members: \\\"' + os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'] + '\\\"')\\n            \\n        describe_cluster_resp = rds_client.describe_global_clusters(\\n\\\n          \\            GlobalClusterIdentifier = os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER']\\n        )\\n        \\n        '''\\n            For each Global Cluster member\\n        '''\\n        for cluster_member\\\n          \\ in describe_cluster_resp['GlobalClusters'][0]['GlobalClusterMembers']:\\n            \\n                '''\\n                    If there's a member in the failover region\\n                '''\\n\\\n          \\                if os.environ['FAILOVER_REGION_NAME'] in cluster_member['DBClusterArn']:\\n                    \\n                    try:\\n                        \\n                        print('Attempting\\\n          \\ to Promote Regional Cluster \\\"' + cluster_member['DBClusterArn'] + '\\\" within Global DB Cluster \\\"' + os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'] + '\\\"')\\n                        \\n     \\\n          \\                   rds_client.failover_global_cluster(\\n                            GlobalClusterIdentifier = os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'],\\n                            TargetDbClusterIdentifier\\\n          \\ = cluster_member['DBClusterArn'],\\n                            AllowDataLoss = True\\n                        )\\n                        \\n                        print('Successfully Promoted\\\n          \\ Regional Cluster \\\"' + cluster_member['DBClusterArn'] + '\\\" within Global DB Cluster \\\"' + os.environ['GLOBAL_APP_DB_CLUSTER_IDENTIFIER'] + '\\\"')\\n                    \\n                    except\\\n          \\ boto3_client_error as e:\\n                        raise Exception('Failed to Promote Regional Cluster within Global DB Cluster: ' + str(e))\\n                \\n    except boto3_client_error as\\\n          \\ e:\\n        raise Exception('Failed to Retrieve Global Cluster Members: ' + str(e))\\n                    \\n    return True\\n    \\ndef log_failover_event():\\n    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\\n          \\    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n        port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n\\\n          \\        sslmode = 'require',\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n        connect_timeout = 3,\\n    )\\n    \\n    eastern\\\n          \\ = dateutil.tz.gettz('US/Eastern')\\n    \\n    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (2,'\\\" + datetime.now(tz = eastern).strftime(\\\"\\\n          %m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n    \\n    curs.close()\\n    db_conn.close()\\n   \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    initiate_global_cluster_failover()\\n\\\n          \\            \\n    log_failover_event()\"\n      Description: ''\n      Environment:\n        Variables:\n          FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'\n          GLOBAL_APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /GlobalAppDbClusterIdentifier}}\n          REGIONAL_APP_DB_CLUSTER_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterArn}}\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'FailoverClusterPromoterRole.Arn'\n      Runtime: python3.11\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  FailoverClusterPromoterEventsPermission:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - FailoverClusterPromoter\n      - WebsiteHealthCheckAlarmListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverClusterPromoter'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'WebsiteHealthCheckAlarmListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverClusterPromoterLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - FailoverClusterPromoter\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverClusterPromoter'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverClusterPromoterRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n              - Action:\n                  - rds:DescribeGlobalClusters\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:'\n                      - !Ref 'AWS::Partition'\n                      - ':rds::'\n                      - !Ref 'AWS::AccountId'\n                      - ':global-cluster:'\n                      - !Join\n                        - ''\n                        - - '{{resolve:ssm:/'\n                          - !Ref 'MainStackName'\n                          - /GlobalAppDbClusterIdentifier}}\n                Sid: DescribeGlobalClusters\n              - Action:\n                  - rds:FailoverGlobalCluster\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - 'arn:'\n                      - !Ref 'AWS::Partition'\n                      - ':rds:'\n                      - !Ref 'FailoverRegionName'\n                      - ':'\n                      - !Ref 'AWS::AccountId'\n                      - :cluster:*\n                  - !Join\n                    - ''\n                    - - 'arn:'\n                      - !Ref 'AWS::Partition'\n                      - ':rds::'\n                      - !Ref 'AWS::AccountId'\n                      - ':global-cluster:'\n                      - !Join\n                        - ''\n                        - - '{{resolve:ssm:/'\n                          - !Ref 'MainStackName'\n                          - /GlobalAppDbClusterIdentifier}}\n                Sid: PromoteFailoverCluster\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  FailoverCompletedEventListener:\n    DependsOn:\n      - FailoverCompletedHandler\n    Properties:\n      Description: Invokes Handler When Failover is Completed\n      EventPattern:\n        detail:\n          EventID:\n            - RDS-EVENT-0071\n          SourceArn:\n            - !Join\n              - ''\n              - - '{{resolve:ssm:/'\n                - !Ref 'MainStackName'\n                - /RegionalAppDbClusterArn}}\n        detail-type:\n          - RDS DB Cluster Event\n        source:\n          - aws.rds\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverCompletedHandler.Arn'\n          Id: FailoverCompletedHandler\n    Type: AWS::Events::Rule\n  FailoverCompletedHandler:\n    DependsOn:\n      - FailoverCompletedHandlerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom datetime import datetime\\nfrom datetime import\\\n          \\ timedelta\\nfrom botocore.exceptions import ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef enable_proxy_target_waiter_rule():\\n    \\n    print('Attempting\\\n          \\ to Enable Proxy Target Waiter Cron: \\\"' + os.environ['PROXY_MONITOR_CRON_NAME'] + '\\\"')\\n\\n    try:\\n        \\n        boto3.client('events').enable_rule(\\n            Name = os.environ['PROXY_MONITOR_CRON_NAME']\\n\\\n          \\        )\\n        \\n        print('Successfully Enabled Proxy Target Waiter Cron: \\\"' + os.environ['PROXY_MONITOR_CRON_NAME'] + '\\\"')\\n        \\n    except boto3_client_error as e:\\n       \\\n          \\ raise Exception('Failed to Enable Proxy Target Waiter Cron: ' + str(e))\\n    \\ndef point_service_fqdn_to_failover_web_alb():\\n    \\n    try:\\n\\n        boto3.client('route53').change_resource_record_sets(\\n\\\n          \\            ChangeBatch = {\\n                'Changes': [\\n                    {\\n                        'Action': 'UPSERT',\\n                        'ResourceRecordSet': {\\n               \\\n          \\             'Name': os.environ['PUBLIC_FQDN'],\\n                            'AliasTarget': {\\n                                'DNSName': os.environ['REGIONAL_WEB_ALB_FQDN'],\\n              \\\n          \\                  'HostedZoneId': os.environ['REGIONAL_WEB_ALB_HOSTED_ZONE_ID'],\\n                                'EvaluateTargetHealth': False\\n                            },\\n             \\\n          \\               'Type': 'A'\\n                        },\\n                    },\\n                ],\\n            },\\n            HostedZoneId = os.environ['PUBLIC_HOSTED_ZONE_ID'],\\n        )\\n\\\n          \\        \\n    except boto3_client_error as e:\\n        raise Exception('Failed to Update ALB DNS Record: ' + str(e))\\n\\ndef register_failover_cluster_as_proxy_target():\\n    \\n    try:\\n    \\\n          \\    \\n        boto3.client('rds').register_db_proxy_targets(\\n            DBProxyName             = os.environ['REGIONAL_APP_DB_PROXY_NAME'],\\n            TargetGroupName         = 'default',\\n\\\n          \\            DBClusterIdentifiers    = [\\n                os.environ['REGIONAL_APP_DB_CLUSTER_IDENTIFIER']\\n            ]\\n        )\\n    \\n    except boto3_client_error as e:\\n        raise Exception('Failed\\\n          \\ to Register Failover Cluster as Proxy Target: ' + str(e))\\n        \\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n \\\n          \\   \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n       \\\n          \\ port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n\\\n          \\        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n    \\n    current_region = os.environ['AWS_REGION']\\n    \\n    if current_region == os.environ['PRIMARY_REGION_NAME']:\\n   \\\n          \\     \\n        curs = db_conn.cursor()\\n        curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (3,'\\\" + datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\"\\\n          )\\n        db_conn.commit()\\n        \\n    elif current_region == os.environ['FAILOVER_REGION_NAME']:\\n        \\n        point_service_fqdn_to_failover_web_alb()\\n      \\n    '''\\n        Logs\\\n          \\ CNAME Update\\n    '''\\n    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (4,'\\\" + datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\"\\\n          ) + \\\"' )\\\")\\n    db_conn.commit()\\n    \\n    '''\\n        Logs Failover Completion\\n    '''\\n    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values\\\n          \\ (3,'\\\" + datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n        \\n    curs.close()\\n    db_conn.close()\\n    \\n    return True\"\n      Description: Processes failover completed events\n      Environment:\n        Variables:\n          FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'\n          PRIMARY_REGION_NAME: !Ref 'PrimaryRegionName'\n          PUBLIC_FQDN: !Ref 'PublicFqdn'\n          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneId'\n          REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterIdentifier}}\n          REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterReaderEndpoint}}\n          REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterWriterEndpoint}}\n          REGIONAL_APP_DB_PROXY_NAME: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RegionalAppDbProxyName}}\n          REGIONAL_APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbAdminSecretArn}}\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n          REGIONAL_WEB_ALB_FQDN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /WebLoadBalancerFqdn}}\n          REGIONAL_WEB_ALB_HOSTED_ZONE_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /WebLoadBalancerHostedZoneId}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'FailoverCompletedHandlerRole.Arn'\n      Runtime: python3.11\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  FailoverCompletedHandlerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - FailoverCompletedHandler\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverCompletedHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverCompletedHandlerPermission:\n    DependsOn:\n      - FailoverCompletedHandler\n      - FailoverCompletedEventListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverCompletedHandler'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'FailoverCompletedEventListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverCompletedHandlerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PublicHostedZoneId'\n                Sid: UpdateRoute53Records\n          PolicyName: update-route53-records\n    Type: AWS::IAM::Role\n  FailoverStartedEventListener:\n    DependsOn:\n      - FailoverStartedHandler\n    Properties:\n      Description: Invokes Handler When Failover is Started\n      EventPattern:\n        detail:\n          EventID:\n            - RDS-EVENT-0073\n          SourceArn:\n            - !Join\n              - ''\n              - - '{{resolve:ssm:/'\n                - !Ref 'MainStackName'\n                - /RegionalAppDbClusterArn}}\n        detail-type:\n          - RDS DB Cluster Event\n        source:\n          - aws.rds\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverStartedHandler.Arn'\n          Id: FailoverStartedHandler\n    Type: AWS::Events::Rule\n  FailoverStartedHandler:\n    DependsOn:\n      - FailoverStartedHandlerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport datetime\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    eastern = dateutil.tz.gettz('US/Eastern')\\n\\\n          \\    \\n    demo_db_credentials = custom_functions.get_db_credentials('Demo')\\n\\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT'],\\n      \\\n          \\  port = demo_db_credentials['port'],\\n        user = demo_db_credentials['username'],\\n        password = demo_db_credentials['password'],\\n        database = demo_db_credentials['database'],\\n\\\n          \\        connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n\\n    curs = db_conn.cursor()\\n    curs.execute(\\\"INSERT INTO failoverevents (event,insertedon) values (2,'\\\" + datetime.datetime.now(tz\\\n          \\ = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"' )\\\")\\n    db_conn.commit()\\n    \\n    curs.close()\\n    db_conn.close()\\n    \\n    return True\"\n      Description: Processes failover started events\n      Environment:\n        Variables:\n          FAILOVER_REGION_NAME: !Ref 'FailoverRegionName'\n          PRIMARY_REGION_NAME: !Ref 'PrimaryRegionName'\n          PUBLIC_FQDN: !Ref 'PublicFqdn'\n          PUBLIC_HOSTED_ZONE_ID: !Ref 'PublicHostedZoneId'\n          REGIONAL_APP_DB_CLUSTER_IDENTIFIER: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterIdentifier}}\n          REGIONAL_APP_DB_CLUSTER_READER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterReaderEndpoint}}\n          REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterWriterEndpoint}}\n          REGIONAL_APP_DB_PROXY_NAME: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /\n              - RegionalAppDbProxyName}}\n          REGIONAL_APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbAdminSecretArn}}\n          REGIONAL_DEMO_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbClusterWriterEndpoint}}\n          REGIONAL_DEMO_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalDemoDbAdminSecretArn}}\n          REGIONAL_WEB_ALB_FQDN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /WebLoadBalancerFqdn}}\n          REGIONAL_WEB_ALB_HOSTED_ZONE_ID: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /WebLoadBalancerHostedZoneId}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'FailoverStartedHandlerRole.Arn'\n      Runtime: python3.11\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  FailoverStartedHandlerLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - FailoverStartedHandler\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'FailoverStartedHandler'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  FailoverStartedHandlerPermission:\n    DependsOn:\n      - FailoverStartedHandler\n      - FailoverStartedEventListener\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'FailoverStartedHandler'\n      Principal: events.amazonaws.com\n      SourceArn: !GetAtt 'FailoverStartedEventListener.Arn'\n    Type: AWS::Lambda::Permission\n  FailoverStartedHandlerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: main-policy\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - route53:ChangeResourceRecordSets\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - arn:aws:route53:::hostedzone/\n                      - !Ref 'PublicHostedZoneId'\n                Sid: UpdateRoute53Records\n          PolicyName: update-route53-records\n    Type: AWS::IAM::Role\n  WebsiteHealthCheck:\n    Condition: IsPrimaryRegion\n    Properties:\n      HealthCheckConfig:\n        EnableSNI: false\n        FailureThreshold: '1'\n        FullyQualifiedDomainName: !Ref 'PublicFqdn'\n        Inverted: false\n        MeasureLatency: false\n        Port: 443\n        RequestInterval: '10'\n        ResourcePath: ''\n        Type: HTTPS\n    Type: AWS::Route53::HealthCheck\n  WebsiteHealthCheckAlarm:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - WebsiteHealthCheck\n    Properties:\n      ActionsEnabled: true\n      AlarmDescription: !Join\n        - ''\n        - - 'Alerts when '\n          - !Ref 'PublicFqdn'\n          - ' is unavailable.'\n      ComparisonOperator: LessThanOrEqualToThreshold\n      Dimensions:\n        - Name: HealthCheckId\n          Value: !Ref 'WebsiteHealthCheck'\n      EvaluationPeriods: 1\n      MetricName: HealthCheckStatus\n      Namespace: AWS/Route53\n      Period: 10\n      Statistic: Sum\n      Threshold: '0'\n      TreatMissingData: ignore\n    Type: AWS::CloudWatch::Alarm\n  WebsiteHealthCheckAlarmListener:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - FailoverClusterPromoter\n    Properties:\n      Description: Invokes Handler When Failure is Detected\n      EventPattern:\n        detail:\n          state:\n            value:\n              - ALARM\n        detail-type:\n          - CloudWatch Alarm State Change\n        resources:\n          - !GetAtt 'WebsiteHealthCheckAlarm.Arn'\n        source:\n          - aws.cloudwatch\n      State: ENABLED\n      Targets:\n        - Arn: !GetAtt 'FailoverClusterPromoter.Arn'\n          Id: FailoverClusterPromoter\n    Type: AWS::Events::Rule\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "FailoverVpcIdRetriever": {
   "DependsOn": [
    "NetworkingStackSet",
    "CfnExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "FailoverRegionName"
     },
     "Version": 1.06
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CfnExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "FinalExportRetriever": {
   "DependsOn": [
    "DashboardStackSet",
    "APIDeploymentStackSet",
    "CfnExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "PrimaryRegionName"
     },
     "Version": 1.1
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CfnExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "NetworkingStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Networking",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 1,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Networking"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  DatabaseSubnetZoneAId:\n    Condition: ''\n    Value: !Ref 'DatabaseSubnetZoneA'\n  DatabaseSubnetZoneBId:\n    Condition: ''\n    Value: !Ref 'DatabaseSubnetZoneB'\n  LambdaSecurityGroupId:\n    Condition: ''\n    Value: !Ref 'LambdaSecurityGroup'\n  PrivateRouteTableZoneAId:\n    Condition: ''\n    Value: !Ref 'PrivateRouteTableZoneA'\n  PrivateRouteTableZoneBId:\n    Condition: ''\n    Value: !Ref 'PrivateRouteTableZoneB'\n  PrivateSubnetZoneAId:\n    Condition: ''\n    Value: !Ref 'PrivateSubnetZoneA'\n  PrivateSubnetZoneBId:\n    Condition: ''\n    Value: !Ref 'PrivateSubnetZoneB'\n  PublicSubnetZoneAId:\n    Condition: ''\n    Value: !Ref 'PublicSubnetZoneA'\n  PublicSubnetZoneBId:\n    Condition: ''\n    Value: !Ref 'PublicSubnetZoneB'\n  RegionalAppDatabaseNaclId:\n    Condition: ''\n    Value: !GetAtt 'DatabaseAcl.Id'\n  RegionalVpcId:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalVpcId\n    Value: !Ref 'Vpc'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  DatabaseAcl:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - '-'\n            - - !Ref 'AWS::StackName'\n              - Database\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::NetworkAcl\n  DatabaseAclEgressEntry:\n    Properties:\n      CidrBlock: '0.0.0.0/0'\n      Egress: true\n      NetworkAclId: !Ref 'DatabaseAcl'\n      Protocol: -1\n      RuleAction: allow\n      RuleNumber: 100\n    Type: AWS::EC2::NetworkAclEntry\n  DatabaseAclIngressEntry:\n    Properties:\n      CidrBlock: '0.0.0.0/0'\n      Egress: false\n      NetworkAclId: !Ref 'DatabaseAcl'\n      Protocol: -1\n      RuleAction: allow\n      RuleNumber: 100\n    Type: AWS::EC2::NetworkAclEntry\n  DatabaseSubnetZoneA:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryDatabaseSubnetZoneACidr'\n        - !Ref 'FailoverDatabaseSubnetZoneACidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - DatabaseSubnetZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  DatabaseSubnetZoneAAclAssociation:\n    Properties:\n      NetworkAclId: !Ref 'DatabaseAcl'\n      SubnetId: !Ref 'DatabaseSubnetZoneA'\n    Type: AWS::EC2::SubnetNetworkAclAssociation\n  DatabaseSubnetZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Database\n          - ' Subnet Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DatabaseSubnetZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'DatabaseSubnetZoneA'\n    Type: AWS::SSM::Parameter\n  DatabaseSubnetZoneATableAssociation:\n    DependsOn:\n      - Vpc\n      - DatabaseSubnetZoneA\n      - PrivateRouteTableZoneA\n    Properties:\n      RouteTableId: !Ref 'PrivateRouteTableZoneA'\n      SubnetId: !Ref 'DatabaseSubnetZoneA'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  DatabaseSubnetZoneB:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryDatabaseSubnetZoneBCidr'\n        - !Ref 'FailoverDatabaseSubnetZoneBCidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - DatabaseSubnetZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  DatabaseSubnetZoneBAclAssociation:\n    Properties:\n      NetworkAclId: !Ref 'DatabaseAcl'\n      SubnetId: !Ref 'DatabaseSubnetZoneB'\n    Type: AWS::EC2::SubnetNetworkAclAssociation\n  DatabaseSubnetZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Database\n          - ' Subnet Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - DatabaseSubnetZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'DatabaseSubnetZoneB'\n    Type: AWS::SSM::Parameter\n  DatabaseSubnetZoneBTableAssociation:\n    DependsOn:\n      - Vpc\n      - DatabaseSubnetZoneB\n      - PrivateRouteTableZoneB\n    Properties:\n      RouteTableId: !Ref 'PrivateRouteTableZoneB'\n      SubnetId: !Ref 'DatabaseSubnetZoneB'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  InternetGateway:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Ref 'AWS::StackName'\n    Type: AWS::EC2::InternetGateway\n  InternetGatewayVpcAssociation:\n    DependsOn:\n      - Vpc\n      - InternetGateway\n    Properties:\n      InternetGatewayId: !Ref 'InternetGateway'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::VPCGatewayAttachment\n  LambdaSecurityGroup:\n    Properties:\n      GroupDescription: Lambda Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress: []\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::SecurityGroup\n  LambdaSecurityGroupIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Lambda Security Group ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - LambdaSecurityGroupId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'LambdaSecurityGroup'\n    Type: AWS::SSM::Parameter\n  NatGatewayZoneA:\n    DependsOn:\n      - PublicSubnetZoneA\n      - NatGatewayZoneAElasticIp\n    Properties:\n      AllocationId: !GetAtt 'NatGatewayZoneAElasticIp.AllocationId'\n      SubnetId: !Ref 'PublicSubnetZoneA'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - NatGatewayZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n    Type: AWS::EC2::NatGateway\n  NatGatewayZoneAElasticIp:\n    Properties:\n      Domain: vpc\n    Type: AWS::EC2::EIP\n  NatGatewayZoneB:\n    DependsOn:\n      - PublicSubnetZoneB\n      - NatGatewayZoneBElasticIp\n    Properties:\n      AllocationId: !GetAtt 'NatGatewayZoneBElasticIp.AllocationId'\n      SubnetId: !Ref 'PublicSubnetZoneB'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - NatGatewayZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n    Type: AWS::EC2::NatGateway\n  NatGatewayZoneBElasticIp:\n    Properties:\n      Domain: vpc\n    Type: AWS::EC2::EIP\n  PrivateRouteTableZoneA:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateRouteTableZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::RouteTable\n  PrivateRouteTableZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ID of Private Route Table in Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateRouteTableZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateRouteTableZoneA'\n    Type: AWS::SSM::Parameter\n  PrivateRouteTableZoneB:\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateRouteTableZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::RouteTable\n  PrivateRouteTableZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ID of Private Route Table in Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateRouteTableZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateRouteTableZoneB'\n    Type: AWS::SSM::Parameter\n  PrivateSubnetRouteToNatGatewayZoneA:\n    DependsOn:\n      - NatGatewayZoneA\n      - PrivateRouteTableZoneA\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'NatGatewayZoneA'\n      RouteTableId: !Ref 'PrivateRouteTableZoneA'\n    Type: AWS::EC2::Route\n  PrivateSubnetRouteToNatGatewayZoneB:\n    DependsOn:\n      - NatGatewayZoneB\n      - PrivateRouteTableZoneB\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      NatGatewayId: !Ref 'NatGatewayZoneB'\n      RouteTableId: !Ref 'PrivateRouteTableZoneB'\n    Type: AWS::EC2::Route\n  PrivateSubnetZoneA:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPrivateSubnetZoneACidr'\n        - !Ref 'FailoverPrivateSubnetZoneACidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateSubnetZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PrivateSubnetZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Private\n          - ' Subnet Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateSubnetZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateSubnetZoneA'\n    Type: AWS::SSM::Parameter\n  PrivateSubnetZoneATableAssociation:\n    DependsOn:\n      - Vpc\n      - PrivateSubnetZoneA\n      - PrivateRouteTableZoneA\n    Properties:\n      RouteTableId: !Ref 'PrivateRouteTableZoneA'\n      SubnetId: !Ref 'PrivateSubnetZoneA'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PrivateSubnetZoneB:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPrivateSubnetZoneBCidr'\n        - !Ref 'FailoverPrivateSubnetZoneBCidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PrivateSubnetZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PrivateSubnetZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Private\n          - ' Subnet Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PrivateSubnetZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrivateSubnetZoneB'\n    Type: AWS::SSM::Parameter\n  PrivateSubnetZoneBTableAssociation:\n    DependsOn:\n      - Vpc\n      - PrivateSubnetZoneB\n      - PrivateRouteTableZoneB\n    Properties:\n      RouteTableId: !Ref 'PrivateRouteTableZoneB'\n      SubnetId: !Ref 'PrivateSubnetZoneB'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicRouteTable:\n    DependsOn:\n      - Vpc\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicRouteTable-\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::RouteTable\n  PublicRouteToInternet:\n    DependsOn:\n      - InternetGateway\n      - PublicRouteTable\n    Properties:\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n      RouteTableId: !Ref 'PublicRouteTable'\n    Type: AWS::EC2::Route\n  PublicSubnetZoneA:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - a\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPublicSubnetZoneACidr'\n        - !Ref 'FailoverPublicSubnetZoneACidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicSubnetZoneA\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PublicSubnetZoneAIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Public\n          - ' Subnet Zone '\n          - A\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PublicSubnetZoneAId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PublicSubnetZoneA'\n    Type: AWS::SSM::Parameter\n  PublicSubnetZoneATableAssociation:\n    DependsOn:\n      - Vpc\n      - PublicSubnetZoneA\n      - PublicRouteTable\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      SubnetId: !Ref 'PublicSubnetZoneA'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  PublicSubnetZoneB:\n    DependsOn:\n      - Vpc\n    Properties:\n      AvailabilityZone: !Join\n        - ''\n        - - !Ref 'AWS::Region'\n          - b\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryPublicSubnetZoneBCidr'\n        - !Ref 'FailoverPublicSubnetZoneBCidr'\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - PublicSubnetZoneB\n              - '-'\n              - !Ref 'AWS::StackName'\n      VpcId: !Ref 'Vpc'\n    Type: AWS::EC2::Subnet\n  PublicSubnetZoneBIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - Public\n          - ' Subnet Zone '\n          - B\n          - ' for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - PublicSubnetZoneBId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PublicSubnetZoneB'\n    Type: AWS::SSM::Parameter\n  PublicSubnetZoneBTableAssociation:\n    DependsOn:\n      - Vpc\n      - PublicSubnetZoneB\n      - PublicRouteTable\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      SubnetId: !Ref 'PublicSubnetZoneB'\n    Type: AWS::EC2::SubnetRouteTableAssociation\n  RegionalAppDatabaseNaclIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Database ACL ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDatabaseNaclId\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'DatabaseAcl.Id'\n    Type: AWS::SSM::Parameter\n  RegionalVpcIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'VPC for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalVpcId\n      Tier: Standard\n      Type: String\n      Value: !Ref 'Vpc'\n    Type: AWS::SSM::Parameter\n  Vpc:\n    Properties:\n      CidrBlock: !If\n        - IsPrimaryRegion\n        - !Ref 'PrimaryVpcCidr'\n        - !Ref 'FailoverVpcCidr'\n      EnableDnsHostnames: true\n      EnableDnsSupport: true\n      Tags:\n        - Key: Name\n          Value: !Ref 'AWS::StackName'\n    Type: AWS::EC2::VPC\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "PrimaryDatabasesStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Primary-Databases",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Primary-Databases"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  GlobalAppDbClusterIdentifier:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - GlobalAppDbClusterIdentifier\n    Value: !Ref 'GlobalAppCluster'\n  GlobalDemoDbClusterIdentifier:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - GlobalDemoDbClusterIdentifier\n    Value: !Ref 'GlobalDemoCluster'\n  RegionalAppDbAdminSecretArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - AppDbAdminSecretArn\n    Value: !Ref 'AppDbAdminSecret'\n  RegionalAppDbClusterArn:\n    Condition: ''\n    Value: !GetAtt 'PrimaryAppCluster.DBClusterArn'\n  RegionalAppDbClusterIdentifier:\n    Condition: ''\n    Value: !Ref 'PrimaryAppCluster'\n  RegionalAppDbClusterReaderEndpoint:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalAppDbClusterReaderEndpoint\n    Value: !GetAtt 'PrimaryAppCluster.ReadEndpoint.Address'\n  RegionalAppDbClusterWriterEndpoint:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalAppDbClusterWriterEndpoint\n    Value: !GetAtt 'PrimaryAppCluster.Endpoint.Address'\n  RegionalAppDbProxyArn:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxy.DBProxyArn'\n  RegionalAppDbProxyName:\n    Condition: ''\n    Value: !Ref 'AppDbProxy'\n  RegionalAppDbProxyPort:\n    Condition: ''\n    Value: !GetAtt 'PrimaryAppCluster.Endpoint.Port'\n  RegionalAppDbProxyReaderEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'\n  RegionalAppDbProxyWriterEndpoint:\n    Condition: ''\n    Value: !GetAtt 'AppDbProxy.Endpoint'\n  RegionalDemoDbAdminSecretArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - DemoDbAdminSecretArn\n    Value: !Ref 'DemoDbAdminSecret'\n  RegionalDemoDbClusterArn:\n    Condition: ''\n    Value: !GetAtt 'PrimaryDemoCluster.DBClusterArn'\n  RegionalDemoDbClusterIdentifier:\n    Condition: ''\n    Value: !Ref 'PrimaryDemoCluster'\n  RegionalDemoDbClusterReaderEndpoint:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalDemoDbClusterReaderEndpoint\n    Value: !GetAtt 'PrimaryDemoCluster.ReadEndpoint.Address'\n  RegionalDemoDbClusterWriterEndpoint:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalDemoDbClusterWriterEndpoint\n    Value: !GetAtt 'PrimaryDemoCluster.Endpoint.Address'\n  RegionalKmsKeyArn:\n    Condition: ''\n    Export:\n      Name: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - RegionalKmsKeyArn\n    Value: !If\n      - IsPrimaryRegion\n      - !GetAtt 'KMSKey.Arn'\n      - !GetAtt 'KMSKeyReplica.Arn'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  AppDatabasePreparerResource:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DatabasePreparerLogGroup\n      - AppDbAdminSecret\n      - PrimaryAppInstance1\n      - PrimaryAppInstance2\n    Properties:\n      Properties:\n        DatabaseIdentifier: App\n        QueriesToExecute:\n          - \"\\n                    CREATE SEQUENCE IF NOT EXISTS data_sequence start 1 increment 1;\\n                    \"\n          - \"\\n                    CREATE TABLE IF NOT EXISTS dataserver (\\n                        id integer not null primary key default nextval('data_sequence'),\\n                        guid VARCHAR(255)\\\n            \\ NOT NULL,\\n                        insertedon timestamp NOT NULL DEFAULT NOW(),\\n                        migratedon timestamp NOT NULL DEFAULT NOW()\\n                    );\\n             \\\n            \\       \"\n      ServiceToken: !GetAtt 'DatabasePreparer.Arn'\n      Type: Custom::ExecuteQueriesAgainstDatabase\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  AppDbAdminSecret:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Primary App DB Cluster Admin Account for '\n          - !Ref 'MainStackName'\n      SecretString: !Join\n        - ''\n        - - '{\"username\": \"'\n          - !Ref 'DatabaseAdminUsername'\n          - '\", \"password\": \"'\n          - !Ref 'DatabaseAdminPassword'\n          - '\", \"database\": \"template1\"}'\n    Type: AWS::SecretsManager::Secret\n  AppDbProxy:\n    Properties:\n      Auth:\n        - SecretArn: !Ref 'AppDbAdminSecret'\n      DBProxyName: !Ref 'PrimaryAppCluster'\n      EngineFamily: POSTGRESQL\n      RequireTLS: true\n      RoleArn: !GetAtt 'DbProxyRole.Arn'\n      VpcSecurityGroupIds:\n        - !Ref 'DbProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneBId}}\n    Type: AWS::RDS::DBProxy\n  AppDbProxyReaderEndpoint:\n    DependsOn:\n      - AppDbProxy\n    Properties:\n      DBProxyEndpointName: !Join\n        - '-'\n        - - !Ref 'MainStackName'\n          - app\n          - reader\n      DBProxyName: !Ref 'AppDbProxy'\n      TargetRole: READ_ONLY\n      VpcSecurityGroupIds:\n        - !Ref 'DbProxySecurityGroup'\n      VpcSubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /DatabaseSubnetZoneBId}}\n    Type: AWS::RDS::DBProxyEndpoint\n  AppDbProxyTargetGroup:\n    DependsOn:\n      - AppDbProxy\n      - PrimaryAppInstance1\n    Properties:\n      DBClusterIdentifiers:\n        - !Ref 'PrimaryAppCluster'\n      DBProxyName: !Ref 'AppDbProxy'\n      TargetGroupName: default\n    Type: AWS::RDS::DBProxyTargetGroup\n  AppDbSubnetGroup:\n    Properties:\n      DBSubnetGroupDescription: App Database Subnets\n      DBSubnetGroupName: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - !Join\n            - ''\n            - !Split\n              - subnet-\n              - !Join\n                - '-'\n                - - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Database\n                      - SubnetZoneAId}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Database\n                      - SubnetZoneAId}}\n      SubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Database\n            - SubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Database\n            - SubnetZoneBId}}\n    Type: AWS::RDS::DBSubnetGroup\n  ClusterParameterGroup:\n    Properties:\n      Description: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - ' - Cluster Param Group'\n      Family: aurora-postgresql13\n      Parameters:\n        rds.logical_replication: 1\n        wal_sender_timeout: 240000\n    Type: AWS::RDS::DBClusterParameterGroup\n  DatabasePreparer:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DatabasePreparerRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\nimport subprocess\\n\\nimport os\\nimport json\\nimport boto3\\nimport psycopg2\\nimport cfnresponse\\nimport multi_region_db\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\n'''\\n    RDSAdminSecretArn\\n'''\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n   \\\n          \\ \\n    if 'Properties' in event['ResourceProperties']:\\n        arguments = event['ResourceProperties']['Properties']\\n        \\n    operation = event['ResourceProperties']['Type'].replace('Custom::',\\\n          \\ '')\\n    \\n    response_data = {}\\n    \\n    if event['RequestType'] in ['Create', 'Update']:\\n        \\n        db_credentials = custom_functions.get_db_credentials(arguments['DatabaseIdentifier'])\\n\\\n          \\        \\n        try:\\n                \\n            db_conn = psycopg2.connect(\\n                host = db_credentials['host'],\\n                port = db_credentials['port'],\\n           \\\n          \\     user = db_credentials['username'],\\n                password = db_credentials['password'],\\n                database = db_credentials['database'],\\n                connect_timeout = 3,\\n\\\n          \\                sslmode = 'require',\\n            )\\n            \\n            curs = db_conn.cursor()\\n            \\n            for query in arguments['QueriesToExecute']:\\n               \\\n          \\ \\n                curs.execute(query.replace('\\\\r','').replace('\\\\n',' '))\\n                db_conn.commit()\\n            \\n            curs.close()\\n            db_conn.close()\\n        \\n\\\n          \\        except Exception as error:\\n\\n            print('There was a problem executing the DDL statements: ' + str(error))\\n            return cfnresponse.send(event, context, cfnresponse.FAILED,\\\n          \\ response_data)\\n            \\n    return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)\"\n      Description: Executes DDL statements against new DB clusters to create necessary schema\n      Environment:\n        Variables:\n          REGIONAL_APP_DB_SECRET_ARN: !Ref 'AppDbAdminSecret'\n          REGIONAL_DEMO_DB_SECRET_ARN: !Ref 'DemoDbAdminSecret'\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'DatabasePreparerRole.Arn'\n      Runtime: python3.11\n      Timeout: 60\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  DatabasePreparerLogGroup:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - DatabasePreparer\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'DatabasePreparer'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  DatabasePreparerRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'AppDbAdminSecret'\n                  - !Ref 'DemoDbAdminSecret'\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !If\n                    - IsPrimaryRegion\n                    - !GetAtt 'KMSKey.Arn'\n                    - !GetAtt 'KMSKeyReplica.Arn'\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  DbClusterSecurityGroup:\n    DependsOn:\n      - DbProxySecurityGroup\n    Properties:\n      GroupDescription: RDS Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from In-Region Lambda Functions\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n          ToPort: 5432\n        - Description: DB Access from In-Region RDS Proxy\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Ref 'DbProxySecurityGroup'\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneACidr'\n            - !Ref 'PrimaryPrivateSubnetZoneACidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - a\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneBCidr'\n            - !Ref 'PrimaryPrivateSubnetZoneBCidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - b\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalVpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DbProxyRole:\n    DependsOn:\n      - AppDbAdminSecret\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - rds.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AdministratorAccess\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Ref 'AppDbAdminSecret'\n          PolicyName: main-policy\n    Type: AWS::IAM::Role\n  DbProxySecurityGroup:\n    Properties:\n      GroupDescription: RDS Proxy Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - Description: DB Access from Lambda\n          FromPort: 5432\n          IpProtocol: tcp\n          SourceSecurityGroupId: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneACidr'\n            - !Ref 'PrimaryPrivateSubnetZoneACidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - a\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n        - CidrIp: !If\n            - IsPrimaryRegion\n            - !Ref 'FailoverPrivateSubnetZoneBCidr'\n            - !Ref 'PrimaryPrivateSubnetZoneBCidr'\n          Description: !Join\n            - ''\n            - - 'DB Access from Lambda Functions in '\n              - !If\n                - IsPrimaryRegion\n                - !Ref 'FailoverRegionName'\n                - !Ref 'PrimaryRegionName'\n              - b\n          FromPort: 5432\n          IpProtocol: tcp\n          ToPort: 5432\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalVpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DemoDatabasePreparerResource:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DatabasePreparerLogGroup\n      - DemoDbAdminSecret\n      - PrimaryDemoInstance1\n      - PrimaryDemoInstance2\n    Properties:\n      Properties:\n        DatabaseIdentifier: Demo\n        QueriesToExecute:\n          - \"\\n                    CREATE TABLE IF NOT EXISTS dataclient (\\n                        guid character varying(255) COLLATE pg_catalog.\\\"default\\\" NOT NULL,\\n                        primary_region\\\n            \\ integer NOT NULL,\\n                        failover_region integer NOT NULL,\\n                        http_code integer,\\n                        insertedon time without time zone\\n      \\\n            \\              );\\n                    \"\n          - \"\\n                    CREATE TABLE IF NOT EXISTS failoverevents (\\n                        event integer NOT NULL,\\n                        insertedon timestamp without time zone NOT NULL\\n\\\n            \\                    );\\n                    \"\n      ServiceToken: !GetAtt 'DatabasePreparer.Arn'\n      Type: Custom::ExecuteQueriesAgainstDatabase\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  DemoDbAdminSecret:\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Primary Demo DB Cluster Admin Account for '\n          - !Ref 'MainStackName'\n      ReplicaRegions:\n        - Region: !Ref 'FailoverRegionName'\n      SecretString: !Join\n        - ''\n        - - '{\"username\": \"'\n          - !Ref 'DatabaseAdminUsername'\n          - '\", \"password\": \"'\n          - !Ref 'DatabaseAdminPassword'\n          - '\", \"database\": \"template1\"}'\n    Type: AWS::SecretsManager::Secret\n  DemoDbSubnetGroup:\n    Properties:\n      DBSubnetGroupDescription: Demo Database Subnets\n      DBSubnetGroupName: !Join\n        - ''\n        - - !Ref 'AWS::StackName'\n          - !Join\n            - ''\n            - !Split\n              - subnet-\n              - !Join\n                - '-'\n                - - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Private\n                      - SubnetZoneAId}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /\n                      - Private\n                      - SubnetZoneAId}}\n      SubnetIds:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Private\n            - SubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /\n            - Private\n            - SubnetZoneBId}}\n    Type: AWS::RDS::DBSubnetGroup\n  GlobalAppCluster:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - AppDbSubnetGroup\n      - PrimaryAppCluster\n    Properties:\n      DeletionProtection: false\n      SourceDBClusterIdentifier: !Ref 'PrimaryAppCluster'\n    Type: AWS::RDS::GlobalCluster\n  GlobalAppDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Global App DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - GlobalAppDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'GlobalAppCluster'\n    Type: AWS::SSM::Parameter\n  GlobalDemoCluster:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DemoDbSubnetGroup\n      - PrimaryDemoCluster\n    Properties:\n      DeletionProtection: false\n      SourceDBClusterIdentifier: !Ref 'PrimaryDemoCluster'\n    Type: AWS::RDS::GlobalCluster\n  GlobalDemoDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Global Demo DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - GlobalDemoDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'GlobalDemoCluster'\n    Type: AWS::SSM::Parameter\n  KMSKey:\n    Condition: IsPrimaryRegion\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Muli-Region KMS Key for '\n          - !Ref 'AWS::StackName'\n      EnableKeyRotation: true\n      Enabled: true\n      KeyPolicy:\n        Id: default-key-policy\n        Statement:\n          - Action: kms:*\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:aws:iam::'\n                  - !Ref 'AWS::AccountId'\n                  - :root\n            Resource: '*'\n            Sid: Enable IAM User Permissions\n        Version: '2012-10-17'\n      MultiRegion: true\n    Type: AWS::KMS::Key\n  KMSKeyReplica:\n    Condition: IsFailoverRegion\n    Properties:\n      Enabled: true\n      KeyPolicy:\n        Id: default-key-policy\n        Statement:\n          - Action: kms:*\n            Effect: Allow\n            Principal:\n              AWS: !Join\n                - ''\n                - - 'arn:aws:iam::'\n                  - !Ref 'AWS::AccountId'\n                  - :root\n            Resource: '*'\n            Sid: Enable IAM User Permissions\n        Version: '2012-10-17'\n      PrimaryKeyArn: !GetAtt 'PrimaryRegionCmkRetriever.RegionalKmsKeyArn'\n    Type: AWS::KMS::ReplicaKey\n  PrimaryAppCluster:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - AppDbSubnetGroup\n    Properties:\n      BackupRetentionPeriod: 30\n      DBSubnetGroupName: !Ref 'AppDbSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '13.18'\n      KmsKeyId: !If\n        - IsPrimaryRegion\n        - !Ref 'KMSKey'\n        - !Ref 'KMSKeyReplica'\n      MasterUserPassword: !Ref 'DatabaseAdminPassword'\n      MasterUsername: !Ref 'DatabaseAdminUsername'\n      Port: 5432\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'DbClusterSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  PrimaryAppDbAdminSecretAttachment:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - AppDbAdminSecret\n      - PrimaryAppCluster\n    Properties:\n      SecretId: !Ref 'AppDbAdminSecret'\n      TargetId: !Ref 'PrimaryAppCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  PrimaryAppInstance1:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'PrimaryAppCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n    Type: AWS::RDS::DBInstance\n  PrimaryAppInstance2:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'PrimaryAppCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n    Type: AWS::RDS::DBInstance\n  PrimaryDemoCluster:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Delete\n    DependsOn:\n      - DemoDbSubnetGroup\n    Properties:\n      BackupRetentionPeriod: 30\n      DBSubnetGroupName: !Ref 'DemoDbSubnetGroup'\n      DeletionProtection: false\n      EnableIAMDatabaseAuthentication: false\n      Engine: aurora-postgresql\n      EngineMode: provisioned\n      EngineVersion: '13.18'\n      KmsKeyId: !If\n        - IsPrimaryRegion\n        - !Ref 'KMSKey'\n        - !Ref 'KMSKeyReplica'\n      MasterUserPassword: !Ref 'DatabaseAdminPassword'\n      MasterUsername: !Ref 'DatabaseAdminUsername'\n      Port: 5432\n      StorageEncrypted: true\n      VpcSecurityGroupIds:\n        - !Ref 'DbClusterSecurityGroup'\n    Type: AWS::RDS::DBCluster\n  PrimaryDemoDbAdminSecretAttachment:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - DemoDbAdminSecret\n      - PrimaryDemoCluster\n    Properties:\n      SecretId: !Ref 'DemoDbAdminSecret'\n      TargetId: !Ref 'PrimaryDemoCluster'\n      TargetType: AWS::RDS::DBCluster\n    Type: AWS::SecretsManager::SecretTargetAttachment\n  PrimaryDemoInstance1:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'PrimaryDemoCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n    Type: AWS::RDS::DBInstance\n  PrimaryDemoInstance2:\n    Condition: IsPrimaryRegion\n    DependsOn: []\n    Properties:\n      AllowMajorVersionUpgrade: false\n      AutoMinorVersionUpgrade: true\n      DBClusterIdentifier: !Ref 'PrimaryDemoCluster'\n      DBInstanceClass: db.r6g.large\n      EnablePerformanceInsights: false\n      Engine: aurora-postgresql\n      MultiAZ: false\n    Type: AWS::RDS::DBInstance\n  PrimaryRegionCmkRetriever:\n    Condition: IsFailoverRegion\n    Properties:\n      Properties:\n        ExportPrefix: !Ref 'MainStackName'\n        Region: !Ref 'PrimaryRegionName'\n        Version: 1.05\n      ServiceToken: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalCfnExportRetrieverArn}}\n      Type: Custom::GetCFNExports\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  RegionalAppDbAdminSecretArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Admin Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbAdminSecretArn\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppDbAdminSecret'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional App DB Cluster ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryAppCluster.DBClusterArn'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional App DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrimaryAppCluster'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Reader Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryAppCluster.ReadEndpoint.Address'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Cluster Writer Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryAppCluster.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxy.DBProxyArn'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyNameParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'App DB Proxy name for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyName\n      Tier: Standard\n      Type: String\n      Value: !Ref 'AppDbProxy'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyPortParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy port for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyPort\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryAppCluster.Endpoint.Port'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy reader endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxyReaderEndpoint.Endpoint'\n    Type: AWS::SSM::Parameter\n  RegionalAppDbProxyWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'RDS Proxy writer endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalAppDbProxyWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'AppDbProxy.Endpoint'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbAdminSecretArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Admin Secret ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbAdminSecretArn\n      Tier: Standard\n      Type: String\n      Value: !Ref 'DemoDbAdminSecret'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbClusterArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional Demo DB Cluster ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbClusterArn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryDemoCluster.DBClusterArn'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbClusterIdentifierParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional Demo DB Cluster Identifier for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbClusterIdentifier\n      Tier: Standard\n      Type: String\n      Value: !Ref 'PrimaryDemoCluster'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbClusterReaderEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Reader Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbClusterReaderEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryDemoCluster.ReadEndpoint.Address'\n    Type: AWS::SSM::Parameter\n  RegionalDemoDbClusterWriterEndpointParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Demo DB Cluster Writer Endpoint for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalDemoDbClusterWriterEndpoint\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'PrimaryDemoCluster.Endpoint.Address'\n    Type: AWS::SSM::Parameter\n  RegionalKmsKeyArnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'Regional KMS Key ARN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - RegionalKmsKeyArn\n      Tier: Standard\n      Type: String\n      Value: !If\n        - IsPrimaryRegion\n        - !GetAtt 'KMSKey.Arn'\n        - !GetAtt 'KMSKeyReplica.Arn'\n    Type: AWS::SSM::Parameter\nTransform:\n  Name: AWS::SecretsManager-2020-07-23\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "PrimaryVpcIdRetriever": {
   "DependsOn": [
    "NetworkingStackSet",
    "CfnExportRetrieverLogGroup"
   ],
   "Properties": {
    "Properties": {
     "ExportPrefix": {
      "Ref": "AWS::StackName"
     },
     "Region": {
      "Ref": "PrimaryRegionName"
     },
     "Version": 1.06
    },
    "ServiceToken": {
     "Fn::GetAtt": [
      "CfnExportRetriever",
      "Arn"
     ]
    },
    "Type": "Custom::GetCFNExports",
    "Version": "1.0"
   },
   "Type": "AWS::CloudFormation::CustomResource"
  },
  "StackSetAdministrationRole": {
   "DeletionPolicy": "Retain",
   "DependsOn": [
    "StackSetExecutionRole"
   ],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "cloudformation.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "sts:AssumeRole"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "StackSetExecutionRole",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      "PolicyName": "main-policy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "StackSetExecutionRole": {
   "DeletionPolicy": "Retain",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": [
         {
          "Ref": "AWS::AccountId"
         }
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/AdministratorAccess"
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "VPCPeeringStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "NetworkingStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - VPC-Peering",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 1,
     "RegionConcurrencyType": "SEQUENTIAL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     },
     {
      "ParameterKey": "PrimaryVpcId",
      "ParameterValue": {
       "Fn::GetAtt": [
        "PrimaryVpcIdRetriever",
        "RegionalVpcId"
       ]
      }
     },
     {
      "ParameterKey": "FailoverVpcId",
      "ParameterValue": {
       "Fn::GetAtt": [
        "FailoverVpcIdRetriever",
        "RegionalVpcId"
       ]
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "VPC-Peering"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  PeeringConnectionIdExport:\n    Condition: IsPrimaryRegion\n    Export:\n      Name: !Join\n        - ''\n        - - !Ref 'MainStackName'\n          - -PeeringConnectionId\n    Value: !Ref 'PeeringInvitation'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  FailoverVpcId:\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PrimaryVpcId:\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  PeeringInvitation:\n    Condition: IsPrimaryRegion\n    Properties:\n      PeerOwnerId: !Ref 'AWS::AccountId'\n      PeerRegion: !Ref 'FailoverRegionName'\n      PeerVpcId: !Ref 'FailoverVpcId'\n      Tags:\n        - Key: Name\n          Value: !Join\n            - ''\n            - - !Ref 'MainStackName'\n              - '-'\n              - !Ref 'FailoverRegionName'\n      VpcId: !Ref 'PrimaryVpcId'\n    Type: AWS::EC2::VPCPeeringConnection\n  PrimaryRegionPeeringConnectionIdRetriever:\n    Condition: IsFailoverRegion\n    Properties:\n      Properties:\n        ExportPrefix: !Ref 'MainStackName'\n        Region: !Ref 'PrimaryRegionName'\n        Version: 1.05\n      ServiceToken: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalCfnExportRetrieverArn}}\n      Type: Custom::GetCFNExports\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  ZoneARouteToFailoverRegion:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - PeeringInvitation\n    Properties:\n      DestinationCidrBlock: !Ref 'FailoverVpcCidr'\n      RouteTableId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /PrivateRouteTableZone\n          - A\n          - Id}}\n      VpcPeeringConnectionId: !Ref 'PeeringInvitation'\n    Type: AWS::EC2::Route\n  ZoneARouteToPrimaryRegion:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - PrimaryRegionPeeringConnectionIdRetriever\n    Properties:\n      DestinationCidrBlock: !Ref 'PrimaryVpcCidr'\n      RouteTableId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /PrivateRouteTableZone\n          - A\n          - Id}}\n      VpcPeeringConnectionId: !GetAtt 'PrimaryRegionPeeringConnectionIdRetriever.PeeringConnectionId'\n    Type: AWS::EC2::Route\n  ZoneBRouteToFailoverRegion:\n    Condition: IsPrimaryRegion\n    DependsOn:\n      - PeeringInvitation\n    Properties:\n      DestinationCidrBlock: !Ref 'FailoverVpcCidr'\n      RouteTableId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /PrivateRouteTableZone\n          - B\n          - Id}}\n      VpcPeeringConnectionId: !Ref 'PeeringInvitation'\n    Type: AWS::EC2::Route\n  ZoneBRouteToPrimaryRegion:\n    Condition: IsFailoverRegion\n    DependsOn:\n      - PrimaryRegionPeeringConnectionIdRetriever\n    Properties:\n      DestinationCidrBlock: !Ref 'PrimaryVpcCidr'\n      RouteTableId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /PrivateRouteTableZone\n          - B\n          - Id}}\n      VpcPeeringConnectionId: !GetAtt 'PrimaryRegionPeeringConnectionIdRetriever.PeeringConnectionId'\n    Type: AWS::EC2::Route\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  },
  "WebsiteStackSet": {
   "DependsOn": [
    "StackSetExecutionRole",
    "StackSetAdministrationRole",
    "CustomResourcesStackSet",
    "NetworkingStackSet",
    "PrimaryDatabasesStackSet",
    "FailoverDatabasesStackSet"
   ],
   "Properties": {
    "AdministrationRoleARN": {
     "Fn::GetAtt": [
      "StackSetAdministrationRole",
      "Arn"
     ]
    },
    "CallAs": "SELF",
    "Capabilities": [
     "CAPABILITY_IAM",
     "CAPABILITY_AUTO_EXPAND"
    ],
    "Description": "Multi-Region RDS - Website",
    "ExecutionRoleName": {
     "Ref": "StackSetExecutionRole"
    },
    "OperationPreferences": {
     "FailureToleranceCount": 0,
     "MaxConcurrentCount": 2,
     "RegionConcurrencyType": "PARALLEL"
    },
    "Parameters": [
     {
      "ParameterKey": "MainStackName",
      "ParameterValue": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "ParameterKey": "DatabaseAdminUsername",
      "ParameterValue": {
       "Ref": "DatabaseAdminUsername"
      }
     },
     {
      "ParameterKey": "DatabaseAdminPassword",
      "ParameterValue": {
       "Ref": "DatabaseAdminPassword"
      }
     },
     {
      "ParameterKey": "PrimaryRegionName",
      "ParameterValue": {
       "Ref": "PrimaryRegionName"
      }
     },
     {
      "ParameterKey": "PrimaryVpcCidr",
      "ParameterValue": {
       "Ref": "PrimaryVpcCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "PrimaryDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "PrimaryDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverRegionName",
      "ParameterValue": {
       "Ref": "FailoverRegionName"
      }
     },
     {
      "ParameterKey": "FailoverVpcCidr",
      "ParameterValue": {
       "Ref": "FailoverVpcCidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPublicSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPublicSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverPrivateSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverPrivateSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneACidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneACidr"
      }
     },
     {
      "ParameterKey": "FailoverDatabaseSubnetZoneBCidr",
      "ParameterValue": {
       "Ref": "FailoverDatabaseSubnetZoneBCidr"
      }
     },
     {
      "ParameterKey": "PublicFqdn",
      "ParameterValue": {
       "Ref": "PublicFqdn"
      }
     },
     {
      "ParameterKey": "PublicHostedZoneId",
      "ParameterValue": {
       "Ref": "PublicHostedZoneId"
      }
     },
     {
      "ParameterKey": "CodeDownloadUrl",
      "ParameterValue": {
       "Ref": "CodeDownloadUrl"
      }
     }
    ],
    "PermissionModel": "SELF_MANAGED",
    "StackInstancesGroup": [
     {
      "DeploymentTargets": {
       "Accounts": [
        {
         "Ref": "AWS::AccountId"
        }
       ]
      },
      "Regions": [
       {
        "Ref": "PrimaryRegionName"
       },
       {
        "Ref": "FailoverRegionName"
       }
      ]
     }
    ],
    "StackSetName": {
     "Fn::Join": [
      "-",
      [
       {
        "Ref": "AWS::StackName"
       },
       "Website"
      ]
     ]
    },
    "TemplateBody": "Conditions:\n  IsFailoverRegion: !Not\n    - !Equals\n      - !Ref 'PrimaryRegionName'\n      - !Ref 'AWS::Region'\n  IsPrimaryRegion: !Equals\n    - !Ref 'PrimaryRegionName'\n    - !Ref 'AWS::Region'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups: []\n    ParameterLabels: {}\n  Comments: ''\n  CreatedBy: Carter Meyers (AWS)\n  Description: This application deploys a Global RDS Aurora cluster.\n  LastUpdated: September 25, 2024\n  Version: v2.11\nOutputs:\n  WebLoadBalancerFqdn:\n    Condition: ''\n    Value: !GetAtt 'Alb.DNSName'\n  WebLoadBalancerHostedZoneId:\n    Condition: ''\n    Value: !GetAtt 'Alb.CanonicalHostedZoneID'\nParameters:\n  CodeDownloadUrl:\n    Default: https://codeload.github.com/allyman17/amazon-aurora-postgresql-fast-failover-demo-v2 /zip/refs/heads/main\n    Description: The URL from which the supporting codebase can be downloaded. This codebase is used to deploy the demo dashboard.\n    Type: String\n  DatabaseAdminPassword:\n    Description: The password to be used for the RDS Aurora admin account.\n    NoEcho: true\n    Type: String\n  DatabaseAdminUsername:\n    Description: The username to be used for the RDS Aurora admin account.\n    Type: String\n  FailoverDatabaseSubnetZoneACidr:\n    Default: 10.10.10.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  FailoverDatabaseSubnetZoneBCidr:\n    Default: 10.10.13.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  FailoverPrivateSubnetZoneACidr:\n    Default: 10.10.9.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  FailoverPrivateSubnetZoneBCidr:\n    Default: 10.10.12.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  FailoverPublicSubnetZoneACidr:\n    Default: 10.10.8.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  FailoverPublicSubnetZoneBCidr:\n    Default: 10.10.11.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  FailoverRegionName:\n    Default: us-east-2\n    Description: The name of the failover region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  FailoverVpcCidr:\n    Default: 10.10.8.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  MainStackName:\n    Type: String\n  PrimaryDatabaseSubnetZoneACidr:\n    Default: 10.10.2.0/24\n    Description: The CIDR range you wish to use for your primary database subnet.\n    Type: String\n  PrimaryDatabaseSubnetZoneBCidr:\n    Default: 10.10.5.0/24\n    Description: The CIDR range you wish to use for your failover database subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneACidr:\n    Default: 10.10.1.0/24\n    Description: The CIDR range you wish to use for your primary private subnet.\n    Type: String\n  PrimaryPrivateSubnetZoneBCidr:\n    Default: 10.10.4.0/24\n    Description: The CIDR range you wish to use for your failover private subnet.\n    Type: String\n  PrimaryPublicSubnetZoneACidr:\n    Default: 10.10.0.0/24\n    Description: The CIDR range you wish to use for your primary public subnet.\n    Type: String\n  PrimaryPublicSubnetZoneBCidr:\n    Default: 10.10.3.0/24\n    Description: The CIDR range you wish to use for your failover public subnet.\n    Type: String\n  PrimaryRegionName:\n    Default: us-east-1\n    Description: The name of the primary region (e.g., us-east-1). You may choose any AWS Region that supports the required services. The primary and failover regions must be different.\n    Type: String\n  PrimaryVpcCidr:\n    Default: 10.10.0.0/21\n    Description: The CIDR range you wish to use for your VPC.\n    Type: String\n  PublicFqdn:\n    Description: >-\n      The FQDN to be used by this application (e.g., multi-region-aurora.example.com). An Amazon ACM Certificate will be issued for this FQDN and attached to an Amazon ALB. This FQDN should NOT have a DNS\n      record currently defined in the corresponding Route 53 Hosted Zone.\n    Type: String\n  PublicHostedZoneId:\n    Description: The ID of the public Route 53 Hosted Zone corresponding to the public Service FQDN.\n    Type: String\nResources:\n  Alb:\n    DependsOn:\n      - AlbSecurityGroup\n    Properties:\n      IpAddressType: ipv4\n      Scheme: internet-facing\n      SecurityGroups:\n        - !Ref 'AlbSecurityGroup'\n      Subnets:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PublicSubnetZoneAId}}\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /PublicSubnetZoneBId}}\n      Type: application\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n  AlbDnsDeleter:\n    Condition: IsPrimaryRegion\n    Properties:\n      Properties:\n        Fqdns:\n          - !Ref 'PublicFqdn'\n        HostedZoneId: !Ref 'PublicHostedZoneId'\n      ServiceToken: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalDnsRecordDeleterArn}}\n      Type: Custom::DeployLambdaLayer\n      Version: '1.0'\n    Type: AWS::CloudFormation::CustomResource\n  AlbSecurityGroup:\n    Properties:\n      GroupDescription: ALB Security Group\n      SecurityGroupEgress: []\n      SecurityGroupIngress:\n        - CidrIp: '0.0.0.0/0'\n          Description: IPv4 HTTP Access from Internet\n          FromPort: 80\n          IpProtocol: tcp\n          ToPort: 80\n        - CidrIp: '0.0.0.0/0'\n          Description: IPv4 HTTPS Access from Internet\n          FromPort: 443\n          IpProtocol: tcp\n          ToPort: 443\n      VpcId: !Join\n        - ''\n        - - '{{resolve:ssm:/'\n          - !Ref 'MainStackName'\n          - /RegionalVpcId}}\n    Type: AWS::EC2::SecurityGroup\n  DnsRecord:\n    Condition: IsPrimaryRegion\n    DeletionPolicy: Retain\n    DependsOn:\n      - Alb\n    Properties:\n      HostedZoneId: !Ref 'PublicHostedZoneId'\n      RecordSets:\n        - AliasTarget:\n            DNSName: !GetAtt 'Alb.DNSName'\n            EvaluateTargetHealth: false\n            HostedZoneId: !GetAtt 'Alb.CanonicalHostedZoneID'\n          Name: !Ref 'PublicFqdn'\n          Type: A\n    Type: AWS::Route53::RecordSetGroup\n  Port443AlbListener:\n    DependsOn:\n      - TlsCertificate\n      - WebsiteTargetGroup\n    Properties:\n      Certificates:\n        - CertificateArn: !Ref 'TlsCertificate'\n      DefaultActions:\n        - TargetGroupArn: !Ref 'WebsiteTargetGroup'\n          Type: forward\n      LoadBalancerArn: !Ref 'Alb'\n      Port: 443\n      Protocol: HTTPS\n    Type: AWS::ElasticLoadBalancingV2::Listener\n  Port80AlbListener:\n    DependsOn:\n      - Alb\n    Properties:\n      DefaultActions:\n        - RedirectConfig:\n            Host: '#{host}'\n            Path: /#{path}\n            Port: '443'\n            Protocol: HTTPS\n            Query: '#{query}'\n            StatusCode: HTTP_301\n          Type: redirect\n      LoadBalancerArn: !Ref 'Alb'\n      Port: 80\n      Protocol: HTTP\n    Type: AWS::ElasticLoadBalancingV2::Listener\n  TlsCertificate:\n    Properties:\n      DomainName: !Ref 'PublicFqdn'\n      DomainValidationOptions:\n        - DomainName: !Ref 'PublicFqdn'\n          HostedZoneId: !Ref 'PublicHostedZoneId'\n      ValidationMethod: DNS\n    Type: AWS::CertificateManager::Certificate\n  WebLoadBalancerFqdnParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ALB FQDN for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - WebLoadBalancerFqdn\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'Alb.DNSName'\n    Type: AWS::SSM::Parameter\n  WebLoadBalancerHostedZoneIdParam:\n    Condition: ''\n    Properties:\n      Description: !Join\n        - ''\n        - - 'ALB Hosted Zone ID for '\n          - !Ref 'AWS::StackName'\n          - ' stack'\n      Name: !Join\n        - ''\n        - - /\n          - !Ref 'MainStackName'\n          - /\n          - WebLoadBalancerHostedZoneId\n      Tier: Standard\n      Type: String\n      Value: !GetAtt 'Alb.CanonicalHostedZoneID'\n    Type: AWS::SSM::Parameter\n  Website:\n    DependsOn:\n      - WebsiteRole\n    Properties:\n      Architectures:\n        - x86_64\n      Code:\n        ZipFile: \"import sys\\nsys.path.append('/opt')\\n\\nimport os\\nimport json\\nimport boto3\\nimport datetime\\nimport psycopg2\\nimport dateutil.tz\\nimport multi_region_db\\nfrom botocore.exceptions import\\\n          \\ ClientError as boto3_client_error\\n\\ncustom_functions = multi_region_db.Functions()\\n\\ndef handler(event, context):\\n    \\n    print(json.dumps(event))\\n    \\n    http_status_code = 200\\n  \\\n          \\  \\n    app_db_credentials = custom_functions.get_db_credentials('App')\\n    \\n    db_conn = psycopg2.connect(\\n        host = os.environ['REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT'],\\n       \\\n          \\ port = app_db_credentials['port'],\\n        user = app_db_credentials['username'],\\n        password = app_db_credentials['password'],\\n        database = app_db_credentials['database'],\\n \\\n          \\       connect_timeout = 3,\\n        sslmode = 'require',\\n    )\\n    \\n    if 'Amazon-Route53-Health-Check-Service' in event['headers']['user-agent']:\\n        \\n        try:\\n        \\n   \\\n          \\         with db_conn:\\n                with db_conn.cursor() as curs:\\n                    curs.execute('SELECT NOW()')\\n                    results = curs.fetchall()\\n                    db_conn.commit()\\n\\\n          \\                    \\n        except Exception as e:\\n            http_status_code = 500\\n            print(e)\\n            print('Failed to Establish DB Connection')\\n    \\n    else:\\n     \\\n          \\       \\n        try: \\n            \\n            guid = event['queryStringParameters']['guid']\\n\\n            eastern = dateutil.tz.gettz('US/Eastern')\\n\\n            sql_statement = \\\"INSERT\\\n          \\ INTO dataserver (guid, insertedon) VALUES ('\\\" + str(guid) + \\\"','\\\" + datetime.datetime.now(tz = eastern).strftime(\\\"%m/%d/%Y %H:%M:%S\\\") + \\\"') RETURNING id\\\"\\n            \\n            id\\\n          \\ = 0\\n            http_status_code = 200\\n            curs = db_conn.cursor()\\n            curs.execute(sql_statement)\\n            id = curs.fetchone()[0]\\n            print(id)\\n          \\\n          \\  db_conn.commit()\\n            curs.close()\\n            db_conn.close()\\n            \\n        except Exception as e:\\n            http_status_code = 500\\n            print(e)\\n           \\\n          \\ \\n    return {\\n        'statusCode': http_status_code,\\n        'headers': {\\n            'Content-Type': 'text/html'\\n        },\\n        'body': os.environ['AWS_REGION']\\n    }\"\n      Description: Serves as the root handler behind the Web ALB\n      Environment:\n        Variables:\n          REGIONAL_APP_DB_CLUSTER_WRITER_ENDPOINT: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbClusterWriterEndpoint}}\n          REGIONAL_APP_DB_SECRET_ARN: !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /RegionalAppDbAdminSecretArn}}\n      Handler: index.handler\n      Layers:\n        - !Join\n          - ''\n          - - '{{resolve:ssm:/'\n            - !Ref 'MainStackName'\n            - /RegionalLambdaLayerVersionArn}}\n      MemorySize: 128\n      Role: !GetAtt 'WebsiteRole.Arn'\n      Runtime: python3.11\n      Timeout: 15\n      TracingConfig:\n        Mode: PassThrough\n      VpcConfig:\n        SecurityGroupIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /LambdaSecurityGroupId}}\n        SubnetIds:\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneAId}}\n          - !Join\n            - ''\n            - - '{{resolve:ssm:/'\n              - !Ref 'MainStackName'\n              - /PrivateSubnetZoneBId}}\n    Type: AWS::Lambda::Function\n  WebsiteLogGroup:\n    DeletionPolicy: Delete\n    DependsOn:\n      - Website\n    Properties:\n      LogGroupName: !Join\n        - ''\n        - - /aws/lambda/\n          - !Ref 'Website'\n      RetentionInDays: 30\n    Type: AWS::Logs::LogGroup\n  WebsiteRole:\n    DependsOn: []\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole\n      MaxSessionDuration: 3600\n      Policies:\n        - PolicyDocument:\n            Statement:\n              - Action:\n                  - secretsmanager:GetSecretValue\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalAppDbAdminSecretArn}}\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalDemoDbAdminSecretArn}}\n                Sid: GetRDSAdminSecret\n              - Action:\n                  - kms:Decrypt\n                Effect: Allow\n                Resource:\n                  - !Join\n                    - ''\n                    - - '{{resolve:ssm:/'\n                      - !Ref 'MainStackName'\n                      - /RegionalKmsKeyArn}}\n                Sid: DecryptWithKMS\n          PolicyName: database-secret-retrieval\n    Type: AWS::IAM::Role\n  WebsiteTargetGroup:\n    DependsOn:\n      - Website\n      - WebsiteTargetGroupPermission\n    Properties:\n      HealthCheckEnabled: false\n      Matcher:\n        HttpCode: '200'\n      TargetType: lambda\n      Targets:\n        - Id: !GetAtt 'Website.Arn'\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n  WebsiteTargetGroupPermission:\n    DependsOn:\n      - Website\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref 'Website'\n      Principal: elasticloadbalancing.amazonaws.com\n      SourceAccount: !Ref 'AWS::AccountId'\n    Type: AWS::Lambda::Permission\n"
   },
   "Type": "AWS::CloudFormation::StackSet"
  }
 }
}